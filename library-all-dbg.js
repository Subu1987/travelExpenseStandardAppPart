// This file has been generated by the SAPUI5 'AllInOne' Builder
/*
 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
 */
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS = CryptoJS || function(e, m) {
	var p = {},
		j = p.lib = {},
		l = function() {},
		f = j.Base = {
			extend: function(a) {
				l.prototype = this;
				var c = new l;
				a && c.mixIn(a);
				c.hasOwnProperty("init") || (c.init = function() {
					c.$super.init.apply(this, arguments)
				});
				c.init.prototype = c;
				c.$super = this;
				return c
			},
			create: function() {
				var a = this.extend();
				a.init.apply(a, arguments);
				return a
			},
			init: function() {},
			mixIn: function(a) {
				for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
				a.hasOwnProperty("toString") && (this.toString = a.toString)
			},
			clone: function() {
				return this.init.prototype.extend(this)
			}
		},
		n = j.WordArray = f.extend({
			init: function(a, c) {
				a = this.words = a || [];
				this.sigBytes = c != m ? c : 4 * a.length
			},
			toString: function(a) {
				return (a || h).stringify(this)
			},
			concat: function(a) {
				var c = this.words,
					q = a.words,
					d = this.sigBytes;
				a = a.sigBytes;
				this.clamp();
				if (d % 4)
					for (var b = 0; b < a; b++) c[d + b >>> 2] |= (q[b >>> 2] >>> 24 - 8 * (b % 4) & 255) << 24 - 8 * ((d + b) % 4);
				else if (65535 < q.length)
					for (b = 0; b < a; b += 4) c[d + b >>> 2] = q[b >>> 2];
				else c.push.apply(c, q);
				this.sigBytes += a;
				return this
			},
			clamp: function() {
				var a = this.words,
					c = this.sigBytes;
				a[c >>> 2] &= 4294967295 <<
					32 - 8 * (c % 4);
				a.length = e.ceil(c / 4)
			},
			clone: function() {
				var a = f.clone.call(this);
				a.words = this.words.slice(0);
				return a
			},
			random: function(a) {
				for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * e.random() | 0);
				return new n.init(c, a)
			}
		}),
		b = p.enc = {},
		h = b.Hex = {
			stringify: function(a) {
				var c = a.words;
				a = a.sigBytes;
				for (var b = [], d = 0; d < a; d++) {
					var f = c[d >>> 2] >>> 24 - 8 * (d % 4) & 255;
					b.push((f >>> 4).toString(16));
					b.push((f & 15).toString(16))
				}
				return b.join("")
			},
			parse: function(a) {
				for (var c = a.length, b = [], d = 0; d < c; d += 2) b[d >>> 3] |= parseInt(a.substr(d,
					2), 16) << 24 - 4 * (d % 8);
				return new n.init(b, c / 2)
			}
		},
		g = b.Latin1 = {
			stringify: function(a) {
				var c = a.words;
				a = a.sigBytes;
				for (var b = [], d = 0; d < a; d++) b.push(String.fromCharCode(c[d >>> 2] >>> 24 - 8 * (d % 4) & 255));
				return b.join("")
			},
			parse: function(a) {
				for (var c = a.length, b = [], d = 0; d < c; d++) b[d >>> 2] |= (a.charCodeAt(d) & 255) << 24 - 8 * (d % 4);
				return new n.init(b, c)
			}
		},
		r = b.Utf8 = {
			stringify: function(a) {
				try {
					return decodeURIComponent(escape(g.stringify(a)))
				} catch (c) {
					throw Error("Malformed UTF-8 data");
				}
			},
			parse: function(a) {
				return g.parse(unescape(encodeURIComponent(a)))
			}
		},
		k = j.BufferedBlockAlgorithm = f.extend({
			reset: function() {
				this._data = new n.init;
				this._nDataBytes = 0
			},
			_append: function(a) {
				"string" == typeof a && (a = r.parse(a));
				this._data.concat(a);
				this._nDataBytes += a.sigBytes
			},
			_process: function(a) {
				var c = this._data,
					b = c.words,
					d = c.sigBytes,
					f = this.blockSize,
					h = d / (4 * f),
					h = a ? e.ceil(h) : e.max((h | 0) - this._minBufferSize, 0);
				a = h * f;
				d = e.min(4 * a, d);
				if (a) {
					for (var g = 0; g < a; g += f) this._doProcessBlock(b, g);
					g = b.splice(0, a);
					c.sigBytes -= d
				}
				return new n.init(g, d)
			},
			clone: function() {
				var a = f.clone.call(this);
				a._data = this._data.clone();
				return a
			},
			_minBufferSize: 0
		});
	j.Hasher = k.extend({
		cfg: f.extend(),
		init: function(a) {
			this.cfg = this.cfg.extend(a);
			this.reset()
		},
		reset: function() {
			k.reset.call(this);
			this._doReset()
		},
		update: function(a) {
			this._append(a);
			this._process();
			return this
		},
		finalize: function(a) {
			a && this._append(a);
			return this._doFinalize()
		},
		blockSize: 16,
		_createHelper: function(a) {
			return function(c, b) {
				return (new a.init(b)).finalize(c)
			}
		},
		_createHmacHelper: function(a) {
			return function(b, f) {
				return (new s.HMAC.init(a,
					f)).finalize(b)
			}
		}
	});
	var s = p.algo = {};
	return p
}(Math);
(function() {
	var e = CryptoJS,
		m = e.lib,
		p = m.WordArray,
		j = m.Hasher,
		l = [],
		m = e.algo.SHA1 = j.extend({
			_doReset: function() {
				this._hash = new p.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
			},
			_doProcessBlock: function(f, n) {
				for (var b = this._hash.words, h = b[0], g = b[1], e = b[2], k = b[3], j = b[4], a = 0; 80 > a; a++) {
					if (16 > a) l[a] = f[n + a] | 0;
					else {
						var c = l[a - 3] ^ l[a - 8] ^ l[a - 14] ^ l[a - 16];
						l[a] = c << 1 | c >>> 31
					}
					c = (h << 5 | h >>> 27) + j + l[a];
					c = 20 > a ? c + ((g & e | ~g & k) + 1518500249) : 40 > a ? c + ((g ^ e ^ k) + 1859775393) : 60 > a ? c + ((g & e | g & k | e & k) -
						1894007588) : c + ((g ^ e ^
						k) - 899497514);
					j = k;
					k = e;
					e = g << 30 | g >>> 2;
					g = h;
					h = c
				}
				b[0] = b[0] + h | 0;
				b[1] = b[1] + g | 0;
				b[2] = b[2] + e | 0;
				b[3] = b[3] + k | 0;
				b[4] = b[4] + j | 0
			},
			_doFinalize: function() {
				var f = this._data,
					e = f.words,
					b = 8 * this._nDataBytes,
					h = 8 * f.sigBytes;
				e[h >>> 5] |= 128 << 24 - h % 32;
				e[(h + 64 >>> 9 << 4) + 14] = Math.floor(b / 4294967296);
				e[(h + 64 >>> 9 << 4) + 15] = b;
				f.sigBytes = 4 * e.length;
				this._process();
				return this._hash
			},
			clone: function() {
				var e = j.clone.call(this);
				e._hash = this._hash.clone();
				return e
			}
		});
	e.SHA1 = j._createHelper(m);
	e.HmacSHA1 = j._createHmacHelper(m)
})();
jQuery.sap.declare('sap.fin.travel.lib.reuse.library-all');
jQuery.sap.declare('sap.fin.travel.lib.reuse.thirdparty.CryptoJS.sha1'); // raw module, declared by SAPUI5 'AllInOne' Builder
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.ListPage.controller.ListPage.controller')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.ListPage.controller.ListPage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/ListPage/controller/ListPage.controller", [
		"sap/ui/core/mvc/Controller"
	], function(Controller) {
		"use strict";

		return Controller.extend("sap.fin.travel.lib.reuse.ListPage.controller.ListPage", {
			onInit: function() {
				this._eventHandler.initListPageFilterBar();
				this.oRouter = this.getOwnerComponent().getRouter();

			}

		});
	}, true);
}; // end of sap/fin/travel/lib/reuse/ListPage/controller/ListPage.controller.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controller.DetailDetail.controller')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.controller.DetailDetail.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/controller/DetailDetail.controller", [
		"sap/ui/core/mvc/Controller"
	], function(Controller) {
		"use strict";

		return Controller.extend("sap.fin.travel.lib.reuse.controller.DetailDetail", {});
	});
}; // end of sap/fin/travel/lib/reuse/controller/DetailDetail.controller.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controller.Middle.controller')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.controller.Middle.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/controller/Middle.controller", [
		"sap/ui/core/mvc/Controller"
	], function(Controller) {
		"use strict";
		return Controller.extend("sap.fin.travel.lib.reuse.controller.Middle", {
			onInit: function() {
				//var oMiddlePageContainer = this.getView().byId("middlePageComponent");
				/*this.oGenericObjectPageComponent = this.getOwnerComponent().getMainController().getObjectPage();
				oMiddlePageContainer.setPropagateModel(true);
				oMiddlePageContainer.setComponent(this.oGenericObjectPageComponent);
				*/
			},

			onPress: function(evt) {
				//MessageToast.show(evt.getSource().getId() + " Pressed");
				/*var oMiddlePageContainer = this.getView().byId("middlePageComponent");
				var oMiddlePageContainer2 = this.getView().byId("middlePage2Component");
				oMiddlePageContainer.setPropagateModel(true);
				oMiddlePageContainer2.setPropagateModel(true);
				oMiddlePageContainer.setComponent(this.getOwnerComponent().getMainController().getObjectPage1());
				oMiddlePageContainer2.setComponent(this.getOwnerComponent().getMainController().getObjectPage2());*/
			}
		});
	});
}; // end of sap/fin/travel/lib/reuse/controller/Middle.controller.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controller.NotFound.controller')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.controller.NotFound.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/controller/NotFound.controller", [
		"sap/ui/core/mvc/Controller"
	], function(Controller) {
		"use strict";
		return Controller.extend("sap.fin.travel.lib.reuse.controller.NotFound", {
			onBeforeRendering: function() {
				var oMessagePage = this.getView().getContent()[0];
				oMessagePage.bindProperty("title", "/title");
				oMessagePage.bindProperty("text", "/text");
				oMessagePage.setIcon("sap-icon://error");
				oMessagePage.bindProperty("description", "/description");
			},

			onInit: function() {
				var oLastMessageModel = this.getOwnerComponent().getModel("lastMessage");
				this.getView().setModel(oLastMessageModel);
			}
		});
	});
}; // end of sap/fin/travel/lib/reuse/controller/NotFound.controller.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controls.IconSwitch')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare("sap.fin.travel.lib.reuse.controls.IconSwitch");
	jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained

	jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

	jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.fin.travel.lib.reuse.controls.IconSwitch", ".css"));

	sap.ui.core.Control.extend("sap.fin.travel.lib.reuse.controls.IconSwitch", {
		metadata: {

			// ---- control specific ----
			properties: {
				"icon": {
					type: "sap.ui.core.URI",
					group: "Misc",
					defaultValue: ""
				},
				"tooltip": {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},
				"visible": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				"enabled": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				"state": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				"activeState": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			events: {
				"press": {}
			}
		},

		init: function() {
			this._oImage = null;
			this.attachBrowserEvent("keydown", $.proxy(function(e) {
				switch (e.keyCode) {
					case 13: //enter key
					case 32: //space key
						this.ontap(e);
						break;
				}
			}, this));

		},

		setIcon: function(sValue, bInvalidate) {

			//first non empty value creates the image
			if (sValue) {
				if (!this._oImage) {
					this._oImage = sap.ui.core.IconPool.createControlByURI({
						src: sValue,
						densityAware: true
					}, sap.m.Image);
					this._oImage.addStyleClass("TecIconSwitchImg");
					this._oImage.setDecorative(false);
				} else {
					this._oImage.setSrc(sValue);
				}
			}

			return this.setProperty("icon", sValue, bInvalidate);
		},

		ontap: function(oEvent) {
			if (this.getEnabled()) {
				this.setState(!this.getState());
				this.firePress(oEvent);
			}
		},
		exit: function() {
			if (this._oImage) {
				this._oImage.destroy();
				this._oImage = null;
			}
		}
	});
}; // end of sap/fin/travel/lib/reuse/controls/IconSwitch.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controls.IconSwitchRenderer')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	/* global mytravelandexpense */
	jQuery.sap.declare("sap.fin.travel.lib.reuse.controls.IconSwitchRenderer");
	jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

	sap.fin.travel.lib.reuse.controls.IconSwitchRenderer = {};
	sap.fin.travel.lib.reuse.controls.IconSwitchRenderer.render = function(oRm, oControl) {
		if (!oControl.getVisible()) {
			return;
		}
		oRm.write("<div tabindex=\"0\" ");
		oRm.writeControlData(oControl);
		var size = sap.ui.core.theming.Parameters.get("sapUiMarginLarge");
		var state = oControl.getState();
		var bActiveState = oControl.getActiveState();
		var disabled = !oControl.getEnabled();
		oRm.addStyle("width", size);
		oRm.addStyle("height", size);
		oRm.addStyle("line-height", size);
		oRm.addStyle("font-size", sap.ui.core.theming.Parameters.get("sapMFontHeader2Size"));
		if (state === bActiveState) {
			oRm.addStyle("border-color", sap.ui.core.theming.Parameters.get("sapUiActive"));
			oRm.addStyle("background-color", sap.ui.core.theming.Parameters.get("sapUiActive"));
			oRm.addStyle("color", sap.ui.core.theming.Parameters.get("sapUiContentContrastTextColor"));
		} else {
			oRm.addStyle("border-color", sap.ui.core.theming.Parameters.get("sapUiListBorderColor"));
			oRm.addStyle("background-color", sap.ui.core.theming.Parameters.get("sapUiListBackground"));
			oRm.addStyle("color", sap.ui.core.theming.Parameters.get("sapUiPageHeaderTextColor"));
		}
		oRm.writeStyles();
		oRm.addClass("TecIconSwitch");
		if (disabled) {
			oRm.addClass("TecIconSwitchDisabled");
		}
		oRm.writeClasses();
		oRm.write(">"); // first level div

		// Image
		if (oControl.getIcon()) {
			var sTooltip = oControl.getAggregation("tooltip") || "";
			var sSwitchStatusTooltip = state === bActiveState ? oControl.getModel("i18n").getResourceBundle().getText("ICON_SWITCH_IS_ON") :
				oControl.getModel("i18n").getResourceBundle().getText("ICON_SWITCH_IS_OFF");
			var sDisabledTooltip = disabled ? oControl.getModel("i18n").getResourceBundle().getText("ICON_SWITCH_IS_DISABLED") : "";

			var sFinalTooltip = sTooltip + " " + sSwitchStatusTooltip;
			if (disabled) {
				//indicate that switch is disabled, even if switch status is ON
				sFinalTooltip = sFinalTooltip + ", " + sDisabledTooltip;
			}

			oControl._oImage.setAlt(sFinalTooltip);
			oControl._oImage.setTooltip(sFinalTooltip);
			oRm.renderControl(oControl._oImage);
		}
		oRm.write("</div>");

	};
}; // end of sap/fin/travel/lib/reuse/controls/IconSwitchRenderer.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controls.IconWithNumber')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.controls.IconWithNumber'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
	jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/controls/IconWithNumber", [
		"sap/ui/core/Control",
		"sap/ui/core/Icon",
		"sap/m/Label"
	], function(Control, Icon, Label) {
		"use strict";
		return Control.extend("mytravelandexpense.uilib.control.IconWithNumber", {
			metadata: {
				properties: {
					count: {
						type: "string",
						defaultValue: 0
					}
				},
				aggregations: {
					_icon: {
						type: "sap.ui.core.Icon",
						multiple: false,
						visibility: "hidden"
					},
					_label: {
						type: "sap.m.Label",
						multiple: false,
						visibility: "hidden"
					}
				},
				events: {
					/**
					 * Fired when the user clicks or taps on the control.
					 */
					press: {}
				}
			},
			init: function() {

				var sTooltip = this.getAggregation("tooltip");

				this.setAggregation("_icon", new Icon({
					src: "sap-icon://attachment",
					decorative: true,
					width: "40%"
				}));

				this.setAggregation("_label", new Label());
			},
			renderer: function(oRM, oControl) {
				var sTooltip = oControl.getAggregation("tooltip");

				oRM.write("<div");
				oRM.writeControlData(oControl);
				oRM.addStyle("color", sap.ui.core.theming.Parameters.get("sapUiBrand"));
				oRM.writeStyles();
				oRM.addClass("TecIconWithNumber");
				oRM.writeClasses();
				oRM.write(">");

				var oIcon = oControl.getAggregation("_icon");
				var oLabel = oControl.getAggregation("_label");

				oIcon.setAlt(sTooltip);
				oIcon.setTooltip(sTooltip);
				oLabel.setTooltip(sTooltip);
				oLabel.setText([oControl.getProperty("count")]);

				oRM.renderControl(oControl.getAggregation("_icon"));
				oRM.renderControl(oControl.getAggregation("_label"));
				oRM.write("</div>");
			},
			/**
			 * Function is called when tap occurs on the control.
			 * @param {jQuery.Event} oEvent - the touch event.
			 * @private
			 */
			ontap: function(oEvent) {

				// mark the event for components that needs to know if the event was handled by the button
				oEvent.setMarked();

				// fire tap event
				if (this.getVisible()) {
					// note: on mobile, the press event should be fired after the focus is on the button
					if ((oEvent.originalEvent && oEvent.originalEvent.type === "touchend")) {
						this.focus();
					}

					this.firePress({ /* no parameters */ });
				}
			},
			/**
			 * Handle the key up event for SPACE and ENTER.
			 *
			 * @param {jQuery.Event} oEvent - the keyboard event.
			 * @private
			 */
			onkeyup: function(oEvent) {

				if (oEvent.which === jQuery.sap.KeyCodes.SPACE || oEvent.which === jQuery.sap.KeyCodes.ENTER) {

					// mark the event for components that needs to know if the event was handled by the button
					oEvent.setMarked();

					this.firePress({ /* no parameters */ });
				}
			}
		});
	});
}; // end of sap/fin/travel/lib/reuse/controls/IconWithNumber.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.library')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	/**
	 * Initialization Code and shared classes of library sap.fin.travel.lib.reuse.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/library", ["jquery.sap.global",
			"sap/ui/core/library",
			"sap/ui/core/IconPool"
		], // library dependency
		function(jQuery, library, iconPool) {

			"use strict";

			/**
			 * Reuse components for Travel apps
			 *
			 * @namespace
			 * @name sap.fin.travel.lib.reuse
			 * @author SAP SE
			 * @version 2.0.49
			 * @public
			 */

			// delegate further initialization of this library to the Core
			sap.ui.getCore().initLibrary({
				name: "sap.fin.travel.lib.reuse",
				version: "2.0.49",
				dependencies: ["sap.ui.core"],
				types: [],
				interfaces: [],
				controls: [
					"sap.fin.travel.lib.reuse.controls.Attachments",
					"sap.fin.travel.lib.reuse.controls.UploadCollectionExtension",
					"sap.fin.travel.lib.reuse.util.formatters"
				],
				elements: []
			});

			// Add library CSS
			this.sStyleSheetId = "TravelLibReuseStyleSheet";
			jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.fin.travel.lib.reuse.css.travellibreuse", ".css"), this.sStyleSheetId);

			// Add custom icons for attachments
			iconPool.addIcon("custom-add-attachment", "customIcons", "custom-icons", "0061");
			iconPool.addIcon("custom-add-link", "customIcons", "custom-icons", "0062");
			iconPool.addIcon("custom-add-note", "customIcons", "custom-icons", "0063");

			//Polyfill for compatibility cross-browsers
			if (!String.prototype.startsWith) {
				Object.defineProperty(String.prototype, 'startsWith', {
					value: function(search, pos) {
						return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
					}
				});
			}

			//Polyfill for compatibility cross-browsers
			if (!String.prototype.endsWith) {
				String.prototype.endsWith = function(search, this_len) {
					if (this_len === undefined || this_len > this.length) {
						this_len = this.length;
					}
					return this.substring(this_len - search.length, this_len) === search;
				};
			}

			//Polyfill for compatibility cross-browsers
			// Production steps of ECMA-262, Edition 6, 22.1.2.1
			if (!Array.from) {
				Array.from = (function() {
					var toStr = Object.prototype.toString;
					var isCallable = function(fn) {
						return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
					};
					var toInteger = function(value) {
						var number = Number(value);
						if (isNaN(number)) {
							return 0;
						}
						if (number === 0 || !isFinite(number)) {
							return number;
						}
						return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
					};
					var maxSafeInteger = Math.pow(2, 53) - 1;
					var toLength = function(value) {
						var len = toInteger(value);
						return Math.min(Math.max(len, 0), maxSafeInteger);
					};

					// The length property of the from method is 1.
					return function from(arrayLike /*, mapFn, thisArg */ ) {
						// 1. Let C be the this value.
						var C = this;

						// 2. Let items be ToObject(arrayLike).
						var items = Object(arrayLike);

						// 3. ReturnIfAbrupt(items).
						if (arrayLike == null) {
							throw new TypeError('Array.from requires an array-like object - not null or undefined');
						}

						// 4. If mapfn is undefined, then let mapping be false.
						var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
						var T;
						if (typeof mapFn !== 'undefined') {
							// 5. else
							// 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
							if (!isCallable(mapFn)) {
								throw new TypeError('Array.from: when provided, the second argument must be a function');
							}

							// 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
							if (arguments.length > 2) {
								T = arguments[2];
							}
						}

						// 10. Let lenValue be Get(items, "length").
						// 11. Let len be ToLength(lenValue).
						var len = toLength(items.length);

						// 13. If IsConstructor(C) is true, then
						// 13. a. Let A be the result of calling the [[Construct]] internal method
						// of C with an argument list containing the single item len.
						// 14. a. Else, Let A be ArrayCreate(len).
						var A = isCallable(C) ? Object(new C(len)) : new Array(len);

						// 16. Let k be 0.
						var k = 0;
						// 17. Repeat, while k < len (also steps a - h)
						var kValue;
						while (k < len) {
							kValue = items[k];
							if (mapFn) {
								A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
							} else {
								A[k] = kValue;
							}
							k += 1;
						}
						// 18. Let putStatus be Put(A, "length", len, true).
						A.length = len;
						// 20. Return A.
						return A;
					};
				}());
			}

			//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
			if (!Array.prototype.find) {
				Object.defineProperty(Array.prototype, 'find', {
					value: function(predicate) {
						// 1. Let O be ? ToObject(this value).
						if (this == null) {
							throw new TypeError('"this" is null or not defined');
						}

						var o = Object(this);

						// 2. Let len be ? ToLength(? Get(O, "length")).
						var len = o.length >>> 0;

						// 3. If IsCallable(predicate) is false, throw a TypeError exception.
						if (typeof predicate !== 'function') {
							throw new TypeError('predicate must be a function');
						}

						// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
						var thisArg = arguments[1];

						// 5. Let k be 0.
						var k = 0;

						// 6. Repeat, while k < len
						while (k < len) {
							// a. Let Pk be ! ToString(k).
							// b. Let kValue be ? Get(O, Pk).
							// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
							// d. If testResult is true, return kValue.
							var kValue = o[k];
							if (predicate.call(thisArg, kValue, k, o)) {
								return kValue;
							}
							// e. Increase k by 1.
							k++;
						}

						// 7. Return undefined.
						return undefined;
					},
					configurable: true,
					writable: true
				});
			}

			return sap.fin.travel.lib.reuse;

		}, /* bExport= */ false);

}; // end of sap/fin/travel/lib/reuse/library.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.model.models')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.model.models'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
	jQuery.sap.require('sap.m.DraftIndicatorState'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/model/models", [
		"sap/ui/model/json/JSONModel",
		"sap/ui/Device",
		"sap/m/DraftIndicatorState"
	], function(JSONModel, Device, DraftIndicatorState) {
		"use strict";

		return {

			createDeviceModel: function() {
				var oModel = new JSONModel(Device);
				oModel.setDefaultBindingMode("OneWay");
				return oModel;
			},

			createGlobalModel: function(oComponent) {
				var oModel = {
					draft: DraftIndicatorState.Clear,
					fcl: {},
					fclSettings: oComponent.getManifestEntry("/sap.ui.generic.app/settings/flexibleColumnLayout"),
					paginator: {
						navUpEnabled: false,
						navDownEnabled: false
					},
					share: {
						appTitle: oComponent.getManifestEntry("/sap.app/title"),
						title: oComponent.getManifestEntry("/sap.app/title"),
						subTitle: oComponent.getManifestEntry("/sap.app/description"),
						icon: oComponent.getManifestEntry("/sap.ui/icons/favIcon"),
						customUrl: ""
					},
					hierarchy: {
						app: {
							title: oComponent.getManifestEntry("/sap.app/title"),
							icon: oComponent.getManifestEntry("/sap.ui/icons/icon"),
							intent: location.hash
						},
						main: []
					},
					userprofile: {},
					detailPage: {
						multipleViews: {
							selectedKey: {}
						}
					},
					app: {
						level: 0
					}
				};
				var oJSONModel = new JSONModel(oModel);
				oJSONModel.setDefaultBindingMode("OneWay");
				return oJSONModel;
			}

		};
	});
}; // end of sap/fin/travel/lib/reuse/model/models.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.BusyHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.BusyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.BusyIndicator'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/BusyHelper", [
		"sap/ui/core/BusyIndicator"
	], function(BusyIndicator) {
		"use strict";

		var DEFAULT_DELAY = 0;

		function fnShow(oControl, iDelay) {
			if (oControl) {
				oControl.setBusyIndicatorDelay(iDelay ? iDelay : DEFAULT_DELAY);
				oControl.setBusy(true);
			} else {
				BusyIndicator.show(iDelay ? iDelay : DEFAULT_DELAY);
			}
		}

		function fnHide(oControl) {
			if (oControl) {
				oControl.setBusy(false);
			} else {
				BusyIndicator.hide();
			}
		}

		return {
			show: fnShow,
			hide: fnHide
		};

	});
}; // end of sap/fin/travel/lib/reuse/util/BusyHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.ConfigurationUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.ConfigurationUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/ConfigurationUtil", [], function() {
		"use strict";

		function getMethods() {
			var oGlobal = {
				objectPageDynamicHeader: "1.54.3",
				smartFieldCheckValuesValidity: "1.64",
				commandExecution: "1.70",
				isTransient: "1.94",
				smartFilterBarFilterData: "1.99"
			};

			/**
			 * Retunrs true if oVersionToCompare is equals and above of oSAPUIVersion.
			 **/
			function fnCompareVersion(oVersionToCompare, oSAPUIVersion) {
				var iSAPVersion, iVersionToCompare;
				var aSAPversions = oSAPUIVersion.split(".");
				var aVersionsToCompare = oVersionToCompare.split(".");
				if (aSAPversions.length < 3) {
					jQuery.sap.log.error("SAP UI5 version cannot be found!");
					return false;
				}
				for (var i = 0; i < aSAPversions.length; i++) {
					if (aVersionsToCompare.length >= i + 1) {
						iSAPVersion = parseInt(aSAPversions[i], 10);
						iVersionToCompare = parseInt(aVersionsToCompare[i], 10);
						if (iSAPVersion > iVersionToCompare) {
							return true;
						} else if (iSAPVersion < iVersionToCompare) {
							return false;
						}
					}
				}
				return true;
			}

			/**
			 * Check all oGlobal property version againts current SAP UI5 version.
			 **/
			function fnCheckVersion() {
				var oVersionCheck = {
					sapUIVersion: sap.ui.version
				};
				for (var property in oGlobal) {
					oVersionCheck[property] = fnCompareVersion(oGlobal[property], oVersionCheck.sapUIVersion);
				}
				return oVersionCheck;
			}

			return {
				global: oGlobal,
				checkVersion: fnCheckVersion,
				compareVersion: fnCompareVersion
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/ConfigurationUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.ControlUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.ControlUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/ControlUtil", [
		"sap/m/Table"
	], function(ResponsiveTable) {
		"use strict";

		function getMethods() {

			/*
			 * Returns an ancestoral SmartTable of the given element or null
			 *
			 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a ancestoral SmartTable
			 * @returns {sap.ui.comp.smarttable.SmartTable} The ancestoral SmartTable or null
			 * @public
			 */
			function fnGetSmartTable(oSourceControl) {
				var oCurrentControl = oSourceControl;
				while (oCurrentControl) {
					if (fnIsSmartTable(oCurrentControl)) {
						return oCurrentControl;
					}
					oCurrentControl = oCurrentControl.getParent && oCurrentControl.getParent();
				}
				return null;
			}

			/*
			 * Returns an ancestoral table of the given element or null
			 *
			 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a ancestoral table
			 * @returns {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} The ancestoral table or null
			 * @public
			 */
			function fnGetOwnerControl(oSourceControl) {
				var oCurrentControl = oSourceControl;
				while (oCurrentControl) {
					if (oCurrentControl instanceof ResponsiveTable || fnIsUiTable(oCurrentControl) || fnIsSmartTable(oCurrentControl)) {
						return oCurrentControl;
					}
					oCurrentControl = oCurrentControl.getParent && oCurrentControl.getParent();
				}
				return null;
			}

			/*
			 * Returns an ancestoral class of the given element or null
			 *
			 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a ancestoral class
			 * @param {String} sClass The class of the oSourceControl requested parent
			 * @returns {sap.ui.core.Element} The ancestoral class or null
			 * @public
			 */
			function fnGetOwnerControlByClass(oSourceControl, sClass) {
				var oCurrentControl = oSourceControl;
				while (oCurrentControl) {
					if (fnIsControlOfType(oCurrentControl, sClass)) {
						return oCurrentControl;
					}
					oCurrentControl = oCurrentControl.getParent && oCurrentControl.getParent();
				}
				return null;
			}

			/*
			 * Returns an ancestoral dialog/popover of the given element or null
			 *
			 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a ancestoral dialog/popover
			 * @returns {sap.m.MessagePopover|sap.m.Popover|sap.m.ResponsivePopover|sap.m.Dialog|sap.m.SelectDialog} The ancestoral dialog/popover or null
			 * @public
			 */
			function fnGetDialogPopup(oSourceControl) {
				var oCurrentControl = oSourceControl;
				while (oCurrentControl) {
					if (fnIsDialogPopover(oCurrentControl)) {
						return oCurrentControl;
					}
					oCurrentControl = oCurrentControl.getParent && oCurrentControl.getParent();
				}
				return null;
			}

			function fnIsSmartTable(oControl) {
				return fnIsControlOfType(oControl, "sap/ui/comp/smarttable/SmartTable");
			}

			function fnIsUiTable(oControl) {
				return fnIsControlOfType(oControl, "sap/ui/table/Table");
			}

			function fnIsDialogPopover(oControl) {
				return fnIsControlOfType(oControl, "sap/m/MessagePopover") || fnIsControlOfType(oControl, "sap/m/Popover") || fnIsControlOfType(
					oControl, "sap/m/ResponsivePopover") || fnIsControlOfType(oControl, "sap/m/Dialog") || fnIsControlOfType(oControl,
					"sap/m/SelectDialog");
			}

			function fnIsControlOfType(oControl, sPathToType) {
				var FNClass = sap.ui.require(sPathToType);
				return typeof FNClass === "function" && (oControl instanceof FNClass);
			}

			return {
				getSmartTable: fnGetSmartTable,
				getOwnerControl: fnGetOwnerControl,
				getDialogPopup: fnGetDialogPopup,
				getOwnerControlByClass: fnGetOwnerControlByClass
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/ControlUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.CustomDataUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.CustomDataUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/CustomDataUtil", [], function() {
		"use strict";

		function getMethods() {

			function fnGetCustomData(oObject, sKey) {
				if (oObject && oObject.getCustomData() && oObject.getCustomData().length > 0) {
					for (var i = 0; i < oObject.getCustomData().length; i++) {
						if (oObject.getCustomData()[i] && sKey === oObject.getCustomData()[i].getKey()) {
							return oObject.getCustomData()[i].getValue();
						}
					}
				}
				$.sap.log.warning("Custom Data not defined: " + sKey);
				return "";
			}

			function fnGetObjectCustomData(oElement) {
				var oCustomData = {};
				if (oElement instanceof sap.ui.core.Element) {
					oElement.getCustomData().forEach(function(oCustomDataElement) {
						oCustomData[oCustomDataElement.getKey()] = oCustomDataElement.getValue();
					});
				}
				return oCustomData;
			}

			return {
				getCustomData: fnGetCustomData,
				getObjectCustomData: fnGetObjectCustomData
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/CustomDataUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.DateFormatter')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.DateFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/DateFormatter", [], function() {
		"use strict";

		return {
			/**
			 * Use the result of this method to update a property value in the model
			 * on a change event when a date is changed
			 * @param {Date} oDate : Date date to convert to UTC
			 * @return {*}
			 */
			toUTC: function(oDate) {
				var oNewDate = null;
				if (oDate) {
					oNewDate = new Date(oDate);
					oNewDate = new Date(oNewDate.getTime() - oNewDate.getTimezoneOffset() * 60000);
				}
				return oNewDate;
			},

			/**
			 * Utility function that returns a Date object brought by a DatePicker or DateTimePicker event
			 * @param {Event} oEvent Date or Datetime picker event
			 * @returns {Date} the new date object brought by the event
			 */
			retrieveUTCDateFromPickerEvent: function(oEvent) {
				//if the event comes from a datetime picker
				var oDate, oUTCDate;
				oDate = oEvent.getSource().getDateValue();

				//if the event comes from a date picker
				if (typeof oDate === "undefined") {
					oDate = oEvent.getParameter("newValue");
				}
				oUTCDate = this.toUTC(oDate);
				return oUTCDate;
			}

		};

	});
}; // end of sap/fin/travel/lib/reuse/util/DateFormatter.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.MessageParser')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.MessageParser'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/MessageParser", [], function() {
		"use strict";

		function getMethods() {
			var ErrorType = {
				Error: "error",
				Info: "info",
				Success: "success",
				Warning: "warning",

				/**
				 * Converts error type from OData to Message Model
				 * 
				 * @param {Object} sErrorType	error type to be converted.
				 * @returns {sap.ui.core.MessageType}	converted error type.
				 */
				toMessageType: function(sErrorType) {
					switch (sErrorType) {
						case ErrorType.Info:
						case sap.ui.core.MessageType.Information:
							return sap.ui.core.MessageType.Information;
						case ErrorType.Success:
						case sap.ui.core.MessageType.Success:
							return sap.ui.core.MessageType.Success;
						case ErrorType.Warning:
						case sap.ui.core.MessageType.Warning:
							return sap.ui.core.MessageType.Warning;
						default:
							return sap.ui.core.MessageType.Error;
					}
				}
			};

			/**
			 * Extract an intellegible error message from the parameter if the content is a JSON object. 
			 * 
			 * @param {object} oErrorMessage
			 * @param {boolean} bWithErrorCode
			 * 
			 * @return a tuple containing {error: string containing error msg, type: errorCode, such as error, warning, etc.} if the error message is parsable. Otherwise, returns undefined.
			 * 
			 */
			function fnParseErrorMessage(oErrorMessage, bWithErrorCode) {
				var oError;
				try {
					oError = jQuery.parseJSON(oErrorMessage);
					if (oError && oError.error && oError.error.code && oError.error.code === "SY/530") {
						oError = oError.error.innererror.errordetails[0];
						if (bWithErrorCode) {
							return {
								error: oError.message,
								type: oError.severity
							};
						} else {
							return {
								error: oError.message
							};
						}
					}
					var sType = (oError.error && oError.error.innererror && oError.error.innererror.errordetails) ? oError.error.innererror.errordetails[
						0].severity : ErrorType.Error;
					if (oError && oError.error && oError.error.message) {
						if (bWithErrorCode) {
							return {
								error: oError.error.message.value,
								type: sType
							};
						} else {
							return {
								error: oError.error.message.value
							};
						}
					} else {
						return oError;
					}
				} catch (error) {
					//No valid JSON, try HTML
					var fakeElement = $('<div></div>');
					fakeElement.html(oErrorMessage);
					if (fakeElement && fakeElement.length > 0) {
						if (bWithErrorCode) {
							return {
								error: fakeElement[0].outerText,
								type: ErrorType.Error
							};
						} else {
							return {
								error: fakeElement[0].outerText
							};
						}
					}
				}
			}

			/**
			 * Parses messages from response headers.
			 * 
			 * @param {Object} oResponse	OData response containing messages.
			 * @param {Array} aMessages	Array if message extract from OData response.
			 */
			function fnParseMessageResponseHeader(oResponse, aMessages) {
				var sSapMessage, oSapMessage;
				if (oResponse && oResponse.headers) {
					if (oResponse.headers["sap-message"]) {
						sSapMessage = oResponse.headers["sap-message"];
						try {
							oSapMessage = JSON.parse(sSapMessage);
							if (oSapMessage && oSapMessage.hasOwnProperty("error")) {
								oSapMessage = oSapMessage.error;
							}
						} catch (sError) {
							jQuery.sap.log.error("sap-message json parse error: " + sError);
						}
						if (oSapMessage && oSapMessage.message) {
							aMessages.push(new sap.ui.core.message.Message({
								message: oSapMessage.message,
								type: ErrorType.toMessageType(oSapMessage.severity),
								code: oSapMessage.code
							}));
						}
						if (oSapMessage && oSapMessage.details && oSapMessage.details.length > 0) {
							for (var i = 0, iEnd = oSapMessage.details.length; i < iEnd; i++) {
								aMessages.push(new sap.ui.core.message.Message({
									message: oSapMessage.details[i].message,
									type: ErrorType.toMessageType(oSapMessage.details[i].severity),
									code: oSapMessage.details[i].code
								}));
							}
						}
					} else if (oResponse.hasOwnProperty("responseText")) {
						aMessages.push(fnParseErrorMessage(oResponse.responseText, true));
					}
				}
			}

			/**
			 * Parses messages from response body.
			 * 
			 * @param {Object} oResponse	OData response containing messages.
			 * @param {Array} aMessages	Array if message extract from OData response.
			 */
			function fnParseMessageResponseBatch(oResponse, aMessages) {
				if (oResponse) {
					var oBatchResponse = oResponse.__batchResponses ? oResponse.__batchResponses : oResponse.data ? oResponse.data.__batchResponses :
						undefined;
					if (oBatchResponse && oBatchResponse.length > 0) {
						for (var i = 0; i < oBatchResponse.length; i++) {
							if (oBatchResponse[i].hasOwnProperty("response")) {
								_fnParseMessageResponse(oBatchResponse[i].response, aMessages);
							} else if (oBatchResponse[i].hasOwnProperty("__changeResponses")) {
								_fnParseMessageChangeResponse(oBatchResponse[i].__changeResponses, aMessages);
							} else {
								fnParseMessageResponseHeader(oBatchResponse[i], aMessages);
							}
						}
					}
				}
			}

			/**
			 * Parses a message from response body.
			 * 
			 * @param {Object} oResponse	OData response containing messages.
			 * @param {Array} aMessages	Array if message extract from OData response.
			 */
			function _fnParseMessageResponse(oResponse, aMessages) {
				var sSapMessage;
				sSapMessage = oResponse.body;
				if (sSapMessage) {
					_fnParseMessage(sSapMessage, aMessages);
				}
			}

			/**
			 * Parses a message from response headers.
			 * 
			 * @param {Object} oResponse	OData response containing messages.
			 * @param {Array} aMessages	Array if message extract from OData response.
			 */
			function _fnParseMessageChangeResponse(oResponse, aMessages) {
				for (var i = 0; i < oResponse.length; i++) {
					fnParseMessageResponseHeader(oResponse[i], aMessages);
				}
			}

			/**
			 * Parses a message.
			 * 
			 * @param {Object} oResponse	OData response containing messages.
			 * @param {Array} aMessages	Array if message extract from OData response.
			 */
			function _fnParseMessage(oSAPMessage, aMessages) {
				var oSapMessage, oSapMessageDetail = {};
				try {
					oSapMessage = JSON.parse(oSAPMessage);
				} catch (sError) {
					jQuery.sap.log.error("sap-message json parse error: " + sError);
				}
				if (oSapMessage && oSapMessage.error) {
					oSapMessageDetail.code = oSapMessage.error.code;
					oSapMessageDetail.message = oSapMessage.error.message.value;
					oSapMessageDetail.type = ErrorType.toMessageType(ErrorType.Error);
					if (oSapMessage.error.innererror && oSapMessage.error.innererror.errordetails) {
						oSapMessageDetail = oSapMessage.error.innererror.errordetails;
						for (var j = 0; j < oSapMessageDetail.length; j++) {
							aMessages.push(new sap.ui.core.message.Message({
								message: oSapMessageDetail[j].hasOwnProperty("message") ? oSapMessageDetail[j].message : oSapMessageDetail[j].text,
								type: ErrorType.toMessageType(oSapMessageDetail[j].severity),
								code: oSapMessageDetail[j].code
							}));
						}
					} else {
						aMessages.push(new sap.ui.core.message.Message({
							message: oSapMessageDetail.hasOwnProperty("message") ? oSapMessageDetail.message : oSapMessageDetail.text,
							type: ErrorType.toMessageType(oSapMessageDetail.severity),
							code: oSapMessageDetail.code
						}));
					}
				}
			}

			return {
				ErrorType: ErrorType,
				parseErrorMessage: fnParseErrorMessage,
				parseMessageResponseHeader: fnParseMessageResponseHeader,
				parseMessageResponseBatch: fnParseMessageResponseBatch
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/MessageParser.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.PaginatorHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.PaginatorHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/PaginatorHelper", [
		"sap/ui/model/Context"
	], function(Context) {
		"use strict";

		var _oInstance;

		function createInstance(oAppComponent) {

			var mPaginator = new Map();

			/**
			 * Get the binding with the given index if exists
			 * @param oPaginator map of binding.
			 * @param idx index.
			 * @retruns the binding with the given index if exists.
			 **/
			function fnGetById(oPaginator, idx) {
				if (oPaginator && oPaginator.has(idx)) {
					return oPaginator.get(idx);
				}
				throw new Error("No entry found for index " + idx + " in Paginator map");
			}

			/** 
			 * Get the index the corresponding binding.
			 * @param iViewLevel view level.
			 * @param sBindingPath binding to found
			 * @returns the index the corresponding binding.
			 */
			function fnGetEntryIndex(iViewLevel, sBindingPath) {
				if (mPaginator.has(iViewLevel)) {
					var oPaginator = mPaginator.get(iViewLevel);
					var idx = 1;
					while (idx < oPaginator.size && fnGetById(oPaginator, idx) !== sBindingPath) {
						idx++;
					}
					return idx;
				}
				throw new Error("No entry found for view level " + iViewLevel + " in Paginator map");
			}

			/** 
			 * Determines if the given binding of the view level has a previous entry.
			 * @param iViewLevel view level.
			 * @param sBindingPath binding to found.
			 * @returns <code>true</code> if the given binding of the view level has a previous entry. Otherwise returns <code>false</code>.
			 */
			function fnHasPrevEntry(iViewLevel, sBindingPath) {
				return fnGetEntryIndex(iViewLevel, sBindingPath) > 1;
			}

			/** 
			 * Determines if the given binding of the view level has a next entry.
			 * @param iViewLevel view level.
			 * @param sBindingPath binding to found.
			 * @returns <code>true</code> if the given binding of the view level has a next entry. Otherwise returns <code>false</code>.
			 */
			function fnHasNextEntry(iViewLevel, sBindingPath) {
				return fnGetEntryIndex(iViewLevel, sBindingPath) < mPaginator.get(iViewLevel).size;
			}

			/** 
			 * Get the next entry of a given binding.
			 * @param iViewLevel view level.
			 * @param sBindingPath binding to found.
			 * @returns the next entry of a given binding.
			 */
			function fnGetNextEntry(iViewLevel, sBindingPath) {
				if (fnHasNextEntry(iViewLevel, sBindingPath)) {
					var oPaginator = mPaginator.get(iViewLevel);
					return fnGetById(oPaginator, fnGetEntryIndex(iViewLevel, sBindingPath) + 1);
				}
				throw new Error("No next entry found for view level " + iViewLevel + "and binding path " + sBindingPath + " in Paginator map");
			}

			/** 
			 * Get the previous entry of a given binding.
			 * @param iViewLevel view level.
			 * @param sBindingPath binding to found.
			 * @returns the previous entry of a given binding.
			 */
			function fnGetPrevEntry(iViewLevel, sBindingPath) {
				if (fnHasPrevEntry(iViewLevel, sBindingPath)) {
					var oPaginator = mPaginator.get(iViewLevel);
					return fnGetById(oPaginator, fnGetEntryIndex(iViewLevel, sBindingPath) - 1);
				}
				throw new Error("No previous entry found for view level " + iViewLevel + "and binding path " + sBindingPath + " in Paginator map");
			}

			/** 
			 * Create a binding Map based on the given binding list
			 * @param aBingingPath binding array
			 * @returns a binding Map based on the given binding list
			 */
			function fnCreateEntryForBindingPath(aBingingPath) {
				var mBindingPath = new Map();
				var idx = 1;
				aBingingPath.forEach(function(sBindingPath) {
					mBindingPath.set(idx++, "/" + sBindingPath);
				});
				return mBindingPath;
			}

			/** 
			 * Update the paginator property of the global model based on the given binding.
			 * @param iViewLevel view level.
			 * @param sBindingPath binding path.
			 */
			function fnUpdatePaginatorModel(iViewLevel, sBindingPath) {
				oAppComponent.updateGlobalModel("/paginator/navUpEnabled", fnHasPrevEntry(iViewLevel, sBindingPath));
				oAppComponent.updateGlobalModel("/paginator/navDownEnabled", fnHasNextEntry(iViewLevel, sBindingPath));
			}

			/** 
			 * Update the view level map of binding if the binding list is provided. Create a new one if not already defined.
			 * Update the global model.
			 * @param iViewLevel view level
			 * @param sBindingPath binding path.
			 * @param aBingingPath binding array
			 */
			function fnUpdateEntry(iViewLevel, sBindingPath, aBingingPath) {
				if (aBingingPath) {
					if (mPaginator.has(iViewLevel)) {
						mPaginator.delete(iViewLevel);
					}
					mPaginator.set(iViewLevel, fnCreateEntryForBindingPath(aBingingPath));
				}
				fnUpdatePaginatorModel(iViewLevel, sBindingPath);
			}

			return {
				// methods
				hasNextEntry: fnHasNextEntry,
				hasPrevEntry: fnHasPrevEntry,
				getNextEntry: fnGetNextEntry,
				getPrevEntry: fnGetPrevEntry,
				updatePaginatorModel: fnUpdatePaginatorModel,
				updateEntry: fnUpdateEntry
			};
		}

		return {
			get: function() {
				if (!_oInstance) {
					throw new Error("Paginator has not been initialized yet.");
				}
				return _oInstance;
			},

			/*
			 * One and only one instance shall be created.
			 */
			init: function(oAppComponent) {
				if (_oInstance) {
					this.destroy();
				}
				_oInstance = createInstance(oAppComponent);
			},

			destroy: function() {
				_oInstance = null;
			}

		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/PaginatorHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.StableIdDefinition')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.StableIdDefinition'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/StableIdDefinition", [], function() {
		"use strict";

		return {
			parameters: ["sSmartTableId", "sProperty", "sQuickVariantKey", "sEntityName"],
			types: {
				TableColumn: {
					DataField: {
						parameters: ["sSmartTableId", "sProperty", "sQuickVariantKey"],
						value: function(oParams) {
							return oParams.sSmartTableId + "-TableColumn-DataField-" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key :
								"NoVariant") + "-" + oParams.sProperty.replace("/", "_");
						}
					},
					ColumnListItem: {
						parameters: ["sSmartTableId", "sProperty", "sQuickVariantKey"],
						value: function(oParams) {
							return oParams.sSmartTableId + "-TableColumn-ColumnListItem-" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key :
								"NoVariant") + "-" + oParams.sProperty.replace("/", "_");
						}
					}
				},
				ListPageTable: {
					ColumnListItem: {
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::ListPageTable:::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key : "NoVariant") +
								":::ColumnListItem";
						}
					},
					VBox: {
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::ListPageTable:::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key : "NoVariant") + ":::VBox";
						}
					},
					Label: {
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::ListPageTable:::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key : "NoVariant") + ":::Label";
						}
					},
					ObjectMarker: {
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::ListPageTable:::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key : "NoVariant") + ":::ObjectMarker";
						}
					}
				},
				DetailPageTable: {
					ColumnListItem: {
						parameters: ["sEntityName"],
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::DetailPageTable:::" + oParams.sEntityName + ":::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key :
								"NoVariant") + ":::ColumnListItem";
						}
					},
					VBox: {
						parameters: ["sEntityName"],
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::DetailPageTable:::" + oParams.sEntityName + ":::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key :
								"NoVariant") + ":::VBox";
						}
					},
					Label: {
						parameters: ["sEntityName"],
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::DetailPageTable:::" + oParams.sEntityName + ":::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key :
								"NoVariant") + ":::Label";
						}
					},
					ObjectMarker: {
						parameters: ["sEntityName"],
						optionalParameters: ["sQuickVariantKey"],
						value: function(oParams) {
							return "travel:::DetailPageTable:::" + oParams.sEntityName + ":::" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key :
								"NoVariant") + ":::ObjectMarker";
						}
					}
				},
				DataField: {
					Text: {
						parameters: ["sSmartTableId", "sProperty", "sQuickVariantKey"],
						value: function(oParams) {
							return oParams.sSmartTableId + "-DataField-Text-" + (oParams.sQuickVariantKey ? oParams.sQuickVariantKey.key : "NoVariant") + "-" +
								oParams.sProperty.replace("/", "_") + "-Text";
						}
					}
				}
			}
		};
	});
}; // end of sap/fin/travel/lib/reuse/util/StableIdDefinition.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.StateUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.StateUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/StateUtil", [], function() {
		"use strict";

		var mStates = new Map();

		/**
		 * 
		 */
		return {
			getState: function(id) {
				return mStates.get(id);
			},
			setState: function(id, val) {
				mStates.set(id, val);
			},
			hasState: function(id) {
				return mStates.has(id);
			},
			resetState: function(id) {
				return mStates.delete(id);
			},
			SUBMIT_ON_SIDEFFECT: "SIDEEFFECT"
		};

	}, true);
}; // end of sap/fin/travel/lib/reuse/util/StateUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.TravelUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.TravelUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/TravelUtil", [], function() {
		"use strict";

		/**
		 * Return various value related to a Travel Request entity and its associated entities. 
		 */
		return {
			TripNumber: {
				Initial: "0000000000",
				Mask: "9999999999"
			},
			Destination: {
				Main: "M",
				Additional: "N",
				TripBreak: "D"
			},
			PersistenceStatus: {
				New: 0,
				Save: 2
			},
			UserAction: {
				AutoSave: 1,
				Save: 2,
				Submit: 3,
				Draft: 4
			},
			TravelServices: {
				Flight: "OF",
				Hotel: " H",
				Car: "CE",
				Train: "OT"
			},
			DefaultButtons: {
				"AddListPage": "AddButtonListPageID",
				"AddExtendedListPage": "AddExtendedButtonListPageID",
				"CopyListPage": "CopyButtonListPageID",
				"DeleteListPage": "DeleteEntryButtonListPageID",
				"ExportListPage": "ExportButtonListPageID",
				"EditDetailPage": "EditButtonDetailPageID",
				"CopyDetailPage": "CopyButtonDetailPageID",
				"DeleteDetailPage": "DeleteButtonDetailPageID",
				"ExportDetailPage": "ExportButtonDetailPageID",
				"ShareDetailPage": "ShareButtonDetailPageID",
				"SaveAndSubmitFooterBar": "SaveAndSubmitFooterBarID",
				"ApplyFooterBar": "ApplyFooterBarID",
				"SaveFooterBar": "SaveFooterBarID",
				"SaveDraftFooterBar": "SaveDraftFooterBarID",
				"CancelFooterBar": "CancelFooterBarID"
			},
			Features: {
				"CheckMandatoryField": "checkMandatoryField"
			}
		};

	}, true);
}; // end of sap/fin/travel/lib/reuse/util/TravelUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.Utils')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.Utils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/Utils", [], function() {
		"use strict";

		var TYPES_UTIL = {
			OBJECT: "object",
			DATE: "date",
			STRING: "string",
			BOOLEAN: "boolean",
			NUMBER: "number"
		};

		function getMethods() {

			function _isObject(obj) {
				return obj && typeof obj === 'object';
			}

			/**
			 * The jQuery isEmptyObject is not consistent across browsers. This ensures that
			 * an empty string is also considered as "empty"
			 * 
			 * @return: true if the plain object or the string is empty. Null, undefined, empty array, number, etc. also return false
			 */
			function fnIsEmptyObjectOrString(value) {
				if ("string" === typeof value) {
					return value.length === 0;
				}
				return jQuery.isEmptyObject(value);
			}

			/**
			 * Check is "DateObject" is empty.
			 * Chekc if value is not a string and not a valid date.
			 * 
			 * @return: true if value is not a string and not a valid date. also return false
			 */
			function fnIsEmptyDateOrString(value) {
				if ("string" === typeof value) {
					return value.length === 0;
				}
				return !value || (typeof value.getTime !== "function" || !(value.getTime() > 0));
			}

			function fnGetPropertyOrSubPropery(obj, property) {
				if (obj && typeof obj === 'object') {
					if (obj.hasOwnProperty(property)) {
						return obj[property];
					} else {
						for (var prop in obj) {
							return fnGetPropertyOrSubPropery(obj[prop], property);
						}
					}
				}
				return undefined;
			}

			/**
			 * Check if a list of objects is from one the type provided in parameter
			 * If no types speficied checking into the default type list.
			 **/
			function fnIsOfTypes(aObjs, aTypes) {
				var bResult = false;
				if (aObjs) {
					aObjs.forEach(function(obj) {
						bResult = bResult || _fnIsOfTypes(obj, aTypes);
					});
				}
				return bResult;
			};

			/**
			 * Check if an object is from one the type provided in parameter
			 * If no types speficied checking into the default type list.
			 **/
			function _fnIsOfTypes(obj, aTypes) {
				var bResult = false;
				if (aTypes && aTypes.length > 0) {
					// check if type of obj is one of specified in parameter
					aTypes.forEach(function(type) {
						if (_fnIsObjectDate(obj) || _fnIsObjectTime(obj)) {
							bResult = bResult || type === TYPES_UTIL.DATE;
						} else {
							bResult = bResult || typeof obj === type;
						}
					});
				} else {
					// check if type of obj is one of default list
					for (var type in TYPES_UTIL) {
						if (_fnIsObjectDate(obj) || _fnIsObjectTime(obj)) {
							bResult = bResult || type === TYPES_UTIL.DATE;
						} else {
							bResult = bResult || typeof obj === TYPES_UTIL[type];
						}
					}
				}
				return bResult;
			};

			function _fnIsObjectDate(obj) {
				return obj && typeof obj.getMonth === 'function';
			}

			function _fnIsObjectTime(obj) {
				return obj && obj.hasOwnProperty("ms");
			}

			/**
			 * Retrun a list of origin's object property names of all property when value is different in target object.
			 **/
			function fnGetObjectChanges(origin, target, aObjectChanges) {
				for (var property in origin) {
					if (fnIsOfTypes([origin[property]], [TYPES_UTIL.STRING, TYPES_UTIL.BOOLEAN, TYPES_UTIL.DATE, TYPES_UTIL.NUMBER])) {
						if (target.hasOwnProperty(property)) {
							if (_fnIsObjectDate(origin[property])) {
								if (origin[property].getTime() !== target[property].getTime()) {
									aObjectChanges.push(property);
								}
							} else if (_fnIsObjectTime(origin[property])) {
								if (origin[property].ms !== target[property].ms) {
									aObjectChanges.push(property);
								}
							} else if (origin[property] !== target[property]) {
								aObjectChanges.push(property);
							}
						}
					}
				}
			}

			/**
			 * Determines if on of the emement contained in aArray is one of the element from aObjs
			 **/
			function fnIncludes(aArray, aObjs) {
				var i = aArray.length;
				while (i--) {
					if (Array.isArray(aObjs)) {
						var j = aObjs.length;
						while (j--) {
							if (aArray[i] === aObjs[j]) {
								return true;
							}
						}
					} else if (aArray[i] === aObjs) {
						return true;
					}
				}
				return false;
			}

			return {
				TypesUtil: TYPES_UTIL,
				isEmptyObjectOrString: fnIsEmptyObjectOrString,
				isEmptyDateOrString: fnIsEmptyDateOrString,
				getPropertyOrSubPropery: fnGetPropertyOrSubPropery,
				isOfTypes: fnIsOfTypes,
				getObjectChanges: fnGetObjectChanges,
				includes: fnIncludes
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/Utils.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.formatters')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare("sap.fin.travel.lib.reuse.util.formatters");

	sap.fin.travel.lib.reuse.util.formatters = {
		/**
		 * If the provided {url} parameter is a url string, we try to get the relative path out of it.
		 * Otherwise we return the provided {url} parameter.
		 * @param {string} url URL to get the relative path
		 * @param {string} directLink URL for links attachment
		 * @returns {string} URL to the attachment
		 */
		/*eslint-disable sap-no-hardcoded-url*/
		getRelativeUrl: function(url, directLink) {
			if (directLink) {
				if (!/^https?:\/\//i.test(directLink)) {
					return "http://" + directLink;
				} else {
					return directLink;
				}
			}

			var sUrl = url;

			if (sUrl && typeof sUrl === "string") {
				/* eslint-disable sap-browser-api-error */
				var oLink = document.createElement("a");
				/* eslint-enable sap-browser-api-error */
				oLink.href = sUrl;
				sUrl = (oLink.pathname.charAt(0) === "/") ? oLink.pathname : "/" + oLink.pathname;
			}
			return sUrl;
		},
		/*eslint-enable sap-no-hardcoded-url*/

		/** 
		 * Generate the attachment ID
		 * Example: Pernr='00230690',Tripno='0000018727',AttachmentId='FOL29000000000004EXT43000000000001',Attachmenttype='BO'
		 * @param {string} sPernr Personal Number
		 * @param {string} sTripno Trip Number
		 * @param {string} sAttachmentId Attachment ID
		 * @param {string} sAttachmenttype Attachment Type
		 * @returns {string} Complete Attachment ID
		 */
		getAttachmentId: function(sPernr, sTripno, sAttachmentId, sAttachmenttype) {
			return "Pernr='" + sPernr + "',Tripno='" + sTripno + "',AttachmentId='" + sAttachmentId + "',Attachmenttype='" + sAttachmenttype + "'";
		},

		/**
		 * At the moment used for Attachment's UploadCollectionItem.visibleDelete property.
		 * Default for attachment editable is FALSE for display mode and TRUE for edit mode, unless stated otherwise (receipt has no property attachmenteditable for example and should not allow deletion in display mode)
		 */
		getAttachmentEditable: function() {
			var bAttachmentEditable = this.getParent().getBindingContext().getProperty("Attachmenteditable");
			var bDisplayMode = this.getParent().getBindingContext().getProperty("DisplayMode");
			return bAttachmentEditable === undefined ? !bDisplayMode : bAttachmentEditable;
		},

		getDescription: function(sAttachmentType, sDescription) {
			return sAttachmentType && sAttachmentType === "AL" ? sDescription : null;
		},

		insertSpaces: function(sMessage) {
			sMessage = sMessage.replace(/([a-z])([A-Z])/g, "$1 $2");
			sMessage = sMessage.replace(/([A-Z])([A-Z][a-z])/g, "$1 $2");
			return sMessage;
		},

		formatDateTimeMedium: function(oDate) {
			var oFormatter = sap.ui.core.format.DateFormat.getDateTimeInstance({
				style: "medium"
			});
			return oFormatter.format(new Date(oDate));
		},

		formatDateTimeMediumUTC: function(oDate) {
			var oFormatter = sap.ui.core.format.DateFormat.getDateTimeInstance({
				style: "medium",
				UTC: true
			});
			return oFormatter.format(new Date(oDate));
		}
	};
}; // end of sap/fin/travel/lib/reuse/util/formatters.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.i18n')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.i18n'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/i18n", [
		"sap/ui/base/Object",
		"sap/ui/model/resource/ResourceModel"
	], function(BaseObject, ResourceModel) {
		"use strict";

		var _oInstance;

		function createInstance(oAppComponent) {

			var _resourceModel;

			function fnGetResourceModel() {
				if (!_resourceModel) {
					_resourceModel = new ResourceModel({
						bundleName: "sap.fin.travel.lib.reuse.i18n.i18n",
						locale: sap.ui.getCore().getConfiguration().getLanguage()
					});
				}
				return _resourceModel;
			}

			function fnResolveText() {
				// First we are looking into the extended projet resource bundle
				if (oAppComponent.getResourceBundle() && oAppComponent.getResourceBundle().hasText(arguments[0])) {
					return oAppComponent.getResourceBundle().getText.apply(oAppComponent.getResourceBundle(), arguments);
				}
				// Finaly we are looking into the parent resource bundle
				var oParentResourceBundle = fnGetResourceModel().getResourceBundle();
				return oParentResourceBundle.getText.apply(oParentResourceBundle, arguments);
			}

			function fnGetText(oController) {
				// Check if oController context is provided.
				if (oController && typeof oController === "object") {
					var aArgs = Array.prototype.slice.call(arguments, 1);
					// First we are looking into the extended projet resource bundle
					if (oAppComponent.getResourceBundle() && oAppComponent.getResourceBundle().hasText(aArgs[0])) {
						return oAppComponent.getResourceBundle().getText.apply(oAppComponent.getResourceBundle(), aArgs);
					}
					// Finaly we are looking into the parent resource bundle
					var oResourceBundle = oController.getOwnerComponent().getModel("i18n").getResourceBundle();
					if (oResourceBundle && oResourceBundle.hasText(aArgs[0])) {
						return oResourceBundle.getText.apply(oResourceBundle, aArgs);
					}
					return jQuery.sap.formatMessage(aArgs[0], aArgs.slice(1));
				} else {
					// First we are looking into the extended projet resource bundle
					if (oAppComponent.getResourceBundle() && oAppComponent.getResourceBundle().hasText(arguments[0])) {
						return oAppComponent.getResourceBundle().getText.apply(oAppComponent.getResourceBundle(), arguments);
					}
					// Finaly we are looking into the parent resource bundle
					var oParentResourceBundle = fnGetResourceModel().getResourceBundle();
					return oParentResourceBundle.getText.apply(oParentResourceBundle, arguments);
				}
			}

			function fnHasText(oController) {
				// Check if oController context is provided.
				if (oController && typeof oController === "object") {
					var aArgs = Array.prototype.slice.call(arguments, 1);
					// First we are looking into the extended projet resource bundle
					if (oAppComponent.getResourceBundle() && oAppComponent.getResourceBundle().hasText(aArgs[0])) {
						return true;
					}
					// Finaly we are looking into the parent resource bundle
					var oResourceBundle = oController.getOwnerComponent().getModel("i18n").getResourceBundle();
					if (oResourceBundle && oResourceBundle.hasText(aArgs[0])) {
						return true;
					}
				} else {
					// First we are looking into the extended projet resource bundle
					if (oAppComponent.getResourceBundle() && oAppComponent.getResourceBundle().hasText(arguments[0])) {
						return true;
					}
					// Finaly we are looking into the parent resource bundle
					var oParentResourceBundle = fnGetResourceModel().getResourceBundle();
					if (oParentResourceBundle && oParentResourceBundle.hasText(arguments[0])) {
						return true;
					}
				}
				return false;
			}

			function fnGetModel() {
				return oAppComponent.getResourceModel();
			}

			return {
				getText: fnGetText,
				resolveText: fnResolveText,
				getModel: fnGetModel,
				hasText: fnHasText
			};
		}

		return {
			get: function() {
				if (!_oInstance) {
					throw new Error("I18n has not been initialized yet.");
				}
				return _oInstance;
			},

			init: function(oAppComponent) {
				_oInstance = _oInstance || createInstance(oAppComponent);
			},

			destroy: function() {
				_oInstance = null;
			}

		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/i18n.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.view.fragments.DummyBlock')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.view.fragments.DummyBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/view/fragments/DummyBlock", ['sap/uxap/BlockBase'],
		function(BlockBase) {
			"use strict";

			var DummyBlock = BlockBase.extend("sap.fin.travel.lib.reuse.view.fragments.DummyBlock", {
				metadata: {
					views: {
						Collapsed: {
							viewName: "sap.fin.travel.lib.reuse.view.fragments.DummyBlock",
							type: "XML"
						},
						Expanded: {
							viewName: "sap.fin.travel.lib.reuse.view.fragments.DummyBlock",
							type: "XML"
						}
					}
				}.fragments
			});

			return DummyBlock;

		});
}; // end of sap/fin/travel/lib/reuse/view/fragments/DummyBlock.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.AnnotationHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/AnnotationHelper", [
		"sap/ui/base/Object",
		"sap/fin/travel/lib/reuse/util/i18n",
		"sap/fin/travel/lib/reuse/util/Utils"
	], function(BaseObject, I18n, Utils) {
		"use strict";

		var AnnotationHelper = BaseObject.extend("AnnotationHelper");

		AnnotationHelper.debugArgs = function() {
			var d = 1;
			var error = new Error();
			var firefoxMatch = (error.stack.split('\n')[0 + d].match(/^.*(?=@)/) || [])[0];
			var chromeMatch = ((((error.stack.split('at ') || [])[1 + d] || '').match(/(^|\.| <| )(.*[^(<])( \()/) || [])[2] || '').split('.').pop();
			var safariMatch = error.stack.split('\n')[0 + d];

			// firefoxMatch ? console.log('firefoxMatch', firefoxMatch) : void 0;
			// chromeMatch ? console.log('chromeMatch', chromeMatch) : void 0;
			// safariMatch ? console.log('safariMatch', safariMatch) : void 0;

			var sLocation = firefoxMatch || chromeMatch || safariMatch;
			var sCurrentLevel = jQuery.sap.log.getLevel();
			jQuery.sap.log.setLevel(jQuery.sap.log.Level.INFO);
			jQuery.sap.log.info("From function=" + sLocation + ", arguments=");
			//console.log(arguments);
			jQuery.sap.log.setLevel(sCurrentLevel);
		};

		AnnotationHelper.test = function(RecordType, Value, target) {
			AnnotationHelper.debugArgs(arguments);
			// console.error(RecordType, Value, target);
			return true;
		};

		AnnotationHelper.resolvePriority = function(Importance) {
			return Importance ? Importance.split('/')[Importance.split('/').length - 1] : "Medium";
		};

		AnnotationHelper.resolveCriticalityRepresentation = function(oDataField) {
			return (oDataField.CriticalityRepresentation && oDataField.CriticalityRepresentation.EnumMember ===
				"com.sap.vocabularies.UI.v1.CriticalityRepresentationType/WithoutIcon") ? "WithoutIcon" : "WithIcon";
		};

		AnnotationHelper.resolveMetaModelPath = function(oContext) {
			var sPath = oContext.getObject();
			var oModel = oContext.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			return oMetaModel.createBindingContext(sPath);
		};

		AnnotationHelper.getEntityTitle = function(oModel, oEntityType) {
			var oMetaModel = oModel.getMetaModel();
			return oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].Title.Value;
		};

		AnnotationHelper.getEntityContext = function(oContext) {
			var oParameter = oContext.getObject(),
				oModel = oContext.getModel(),
				oMetaModel = oModel.getProperty("/metaModel"),
				oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType),
				sAnnotationPath = "",
				oWorkingContext = {};
			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}
			if (!oWorkingContext.selectionItem) {
				oWorkingContext.selectionItem = [];
				oWorkingContext.selectionItemPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.SelectionFields";
				var oSelectionFields = oMetaModel.getObject(oWorkingContext.selectionItemPath);
				var aSelectionField = [];
				oSelectionFields.forEach(function(oSelectionField) {
					var aFields = jQuery.grep(oEntityType.property, function(oField) {
						return oField.name === oSelectionField.PropertyPath && (oField.type === "Edm.DateTime" || oField.type === "Edm.Date");
					});
					if (aFields.length == 1) {
						oWorkingContext.selectionItem.push(oSelectionField);
					}
				});
			}

			oModel.setProperty("/workingContext", oWorkingContext);
			return "/workingContext";
		};

		AnnotationHelper.getSubEntityContext = function(oContext) {
			var oParameter = oContext.getObject(),
				oModel = oContext.getModel(),
				oMetaModel = oModel.getProperty("/metaModel"),
				oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType),
				sAnnotationPath = "",
				oWorkingContext = {};
			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}

			oModel.setProperty("/detailContext", oWorkingContext);
			return "/detailContext";
		};

		AnnotationHelper.updateEntityContext = function(oContext, oEntity, oVariant) {
			var oMetaModel = oContext.metaModel,
				sAnnotationPath = "";
			/* Fall back to defaults without qualifier */
			if (oVariant) {
				var oPresentationVariant = oEntity[oVariant.annotationPath];
				if (oPresentationVariant) {
					oContext.detailContext.lineItemQualifier = oEntity.$path + "/" + oPresentationVariant.Visualizations[0].AnnotationPath.replace(/@/g,
						'');
				}
			} else {
				oContext.detailContext.lineItemQualifier = "";
			}
			return true;
		};

		AnnotationHelper.getObjectPageSectionAnchorButtonIconPath = function(oCriticalityPath) {
			if (!Utils.isEmptyObjectOrString(oCriticalityPath) && !Utils.isEmptyObjectOrString(oCriticalityPath.Path)) {
				//Criticality domain is 0 for None, 1 for Error, 2 for Warning, 3 for Success
				return "{= ${" + oCriticalityPath.Path + "} === 1 ? 'sap-icon://message-error' : (${" + oCriticalityPath.Path +
					"} === 2 ? 'sap-icon://message-warning' : '') }";
			}
			return "";
		};

		AnnotationHelper.getObjectPageSectionAnchorButtonTypePath = function(oCriticalityPath) {
			if (!Utils.isEmptyObjectOrString(oCriticalityPath) && !Utils.isEmptyObjectOrString(oCriticalityPath.Path)) {
				//Criticality domain is 0 for None, 1 for Error, 2 for Warning, 3 for Success
				return "{= ${" + oCriticalityPath.Path + "} === 1 ? 'error' : (${" + oCriticalityPath.Path + "} === 2 ? 'warning' : '') }";
			}
			return "";
		};

		AnnotationHelper.shouldDisplaySection = function(sHiddenPath) {
			if (sHiddenPath) {
				return "{= !$" + AnnotationHelper.getBindingForPath(sHiddenPath) + "}";
			}
			return true;
		};

		AnnotationHelper.sectionVisible = function(bHidden, bDisplayMode, aEntityset) {
			return !bHidden && (!bDisplayMode || (aEntityset && aEntityset.length > 0));
		};

		AnnotationHelper.getBindingForAnnotationPath = function(sAnnotationPath) {
			return sAnnotationPath.substring(0, sAnnotationPath.indexOf("/"));
		};

		AnnotationHelper.getBindingForPath = function(sPath) {
			return "{" + sPath + "}";
		};

		AnnotationHelper.isDeepFacetHierarch = function(oFacet) {
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
						return true;
					}
				}
			}
			return false;
		};

		AnnotationHelper.doesFieldGroupContainOnlyOneMultiLineDataField = function(oFieldGroup, oFirstDataFieldProperties) {
			if (oFieldGroup.Data.length !== 1) {
				return false;
			}
			if ((oFirstDataFieldProperties['com.sap.vocabularies.UI.v1.MultiLineText'] === undefined) || (oFieldGroup.Data[0].RecordType !==
					"com.sap.vocabularies.UI.v1.DataField")) {
				return false;
			}
			return true;
		};

		AnnotationHelper.replaceSpecialCharsInId = function(sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error(
					"Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		};

		AnnotationHelper.getStableIdPartFromDataPoint = function(oDataPoint) {
			var sPathConcat = "";
			if (oDataPoint.Value && oDataPoint.Value.Path) {
				return AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Path);
			} else if (oDataPoint.Value && oDataPoint.Value.Apply && oDataPoint.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataPoint.Value.Apply.Parameters.length; i++) {
					if (oDataPoint.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Apply.Parameters[
							i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create stable ID derived from annotations.");
			}
		};

		AnnotationHelper.formatDateTimeOffset = function(oDataField) {
			return "{path: '" + oDataField.Value.Path +
				"', type: 'sap.ui.model.odata.type.DateTime', formatOptions: { 'UTC': true, style: 'medium' } }";
		};

		AnnotationHelper.formatWithExpand = function(oInterface, oDataField, oEntitySet) {
			var oModel = oInterface.getInterface(0).getModel();
			var oEntityType = oModel.getODataEntityType(oEntitySet.entityType);
			var oProperty = oModel.getODataEntityType(oEntitySet.entityType).property.find(function(elem) {
				return elem.name === oDataField.Path;
			});
			var isEDMDateTime = oProperty.type === "Edm.DateTimeOffset";

			if (isEDMDateTime) {
				return "{path:'" + oDataField.Path + "',type:'sap.ui.model.odata.type.DateTime',formatOptions:{UTC:true}}";
			}

			AnnotationHelper.getNavigationPathWithExpand(oInterface, oDataField, oEntitySet);
			oInterface = oInterface.getInterface(0);
			AnnotationHelper.formatWithExpandSimple(oInterface, oDataField, oEntitySet);
			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		};

		AnnotationHelper.formatWithExpandSimple = function(oInterface, oDataField, oEntitySet) {
			var aExpand = [],
				sExpand, oEntityType;
			var oMetaModel = oInterface && oInterface.getModel && oInterface.getModel();
			if (!oMetaModel) {
				// called with entity set therefore use the correct interface
				oInterface = oInterface.getInterface(0);
				oMetaModel = oInterface.getModel();
			}

			if (oEntitySet) {
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			} else {
				// TODO: check with UI2 if helper to get entity type can be used, avoid using this path
				var aMatches = /^(\/dataServices\/schema\/\d+\/entityType\/\d+)(?:\/|$)/.exec(oInterface.getPath());
				if (aMatches && aMatches.length && aMatches[0]) {
					var oEntityTypeContext = oMetaModel.getProperty(aMatches[0]);
					var sNamespace = oMetaModel.getODataEntityContainer().namespace;
					oEntityType = oMetaModel.getODataEntityType(sNamespace + '.' + oEntityTypeContext.name);
				}
			}

			if (oEntityType) {
				// check if expand is needed
				if (oDataField && oDataField.Path) {
					sExpand = AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Path);
					if (sExpand) {
						aExpand.push(sExpand);
					}

				} else if (oDataField && oDataField.Apply && oDataField.Apply.Name === "odata.concat") {
					oDataField.Apply.Parameters.forEach(function(oParameter) {
						if (oParameter.Type === "Path") {
							sExpand = AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oParameter.Value);
							if (sExpand) {
								if (aExpand.indexOf(sExpand) === -1) {
									aExpand.push(sExpand);
								}
							}
						}
					});
				}

				if (aExpand.length > 0) {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}

				}
			}

			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		};

		AnnotationHelper.formatWithExpandSimpleWithDefault = function(oInterface, oDataField, oEntityType) {
			var aExpand = [],
				sExpand;
			var oMetaModel = oInterface && oInterface.getModel && oInterface.getModel();
			if (!oMetaModel) {
				// called with entity set therefore use the correct interface
				oInterface = oInterface.getInterface(0);
				oMetaModel = oInterface.getModel();
			}

			if (oEntityType) {
				// check if expand is needed
				if (oDataField && oDataField.Path) {
					sExpand = AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Path);
					if (sExpand) {
						aExpand.push(sExpand);
					}

				} else if (oDataField && oDataField.Apply && oDataField.Apply.Name === "odata.concat") {
					oDataField.Apply.Parameters.forEach(function(oParameter) {
						if (oParameter.Type === "Path") {
							sExpand = AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oParameter.Value);
							if (sExpand) {
								if (aExpand.indexOf(sExpand) === -1) {
									aExpand.push(sExpand);
								}
							}
						}
					});
				}

				if (aExpand.length > 0) {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}

				}
			}

			return "{= $" + sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField) + " === '' ? '" + AnnotationHelper.getDefaultEntityTitle(
				oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] ? oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String :
				oEntityType.name) + "' : $" + sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField) + "}";
		};

		AnnotationHelper.getDefaultEntityTitle = function(sEntity) {
			return AnnotationHelper.resolveI18n("NEW") + " " + sEntity;
		};

		AnnotationHelper.getNavigationPathWithExpand = function(oInterface, oContext, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aExpand = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));

			var sNavigationPath = sap.ui.model.odata.AnnotationHelper.getNavigationPath(oInterface, oContext);
			var sNavigationProperty = sNavigationPath.replace("{", "").replace("}", "");
			var oEntityType;
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
				}
			} else {
				oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);
			}

			aExpand = AnnotationHelper.getFacetExpand(sResolvedPath, oMetaModel, oEntityType, oEntitySet);

			if (aExpand.length > 0) {
				if (sNavigationProperty === "") {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}
				} else {
					// add expand to navigation path
					sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
				}
			}
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}") {
				sNavigationPath = "";
			}
			return sNavigationPath;
		};

		AnnotationHelper.getFacetExpand = function(sResolvedPath, oMetaModel, oEntityType, oEntitySet) {
			var aDependents = [],
				aExpand = [],
				oFacetContent, aFacetContent = [];

			if (sResolvedPath) {
				aFacetContent = oMetaModel.getObject(sResolvedPath) || [];
			}

			aFacetContent = aFacetContent.Data || aFacetContent;

			var fnGetDependents = function(sProperty, bIsValue) {
				var sExpand = AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sProperty);
				if (sExpand) {
					// check if already in expand array - if not yet add it
					if (aExpand.indexOf(sExpand) === -1) {
						aExpand.push(sExpand);
					}
				}
				if (bIsValue) {
					try {
						aDependents = sap.ui.comp.smartfield.SmartField.getSupportedAnnotationPaths(oMetaModel, oEntitySet, sProperty, true) || [];
					} catch (e) {
						aDependents = [];
					}
					for (var i = 0; i < aDependents.length; i++) {
						if (aExpand.indexOf(aDependents[i]) === -1) {
							aExpand.push(aDependents[i]);
						}
					}
				}
			};

			var fnAnalyzeApplyFunctions = function(oParameter) {
				if (oParameter.Type === "LabeledElement") {
					fnGetDependents(oParameter.Value.Path);
				} else if (oParameter.Type === "Path") {
					fnGetDependents(oParameter.Value);
				}
			};

			for (var i = 0; i < aFacetContent.length; i++) {
				oFacetContent = aFacetContent[i];

				if (oFacetContent.Value && oFacetContent.Value.Path) {
					fnGetDependents(oFacetContent.Value.Path, true);
				}

				if (oFacetContent.Value && oFacetContent.Value.Apply && oFacetContent.Value.Apply.Name === "odata.concat") {
					oFacetContent.Value.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}

				if (oFacetContent.Action && oFacetContent.Action.Path) {
					fnGetDependents(oFacetContent.Action.Path);
				}

				if (oFacetContent.Target) {
					if (oFacetContent.Target.Path) {
						fnGetDependents(oFacetContent.Target.Path);
					}
					if (oFacetContent.Target.AnnotationPath) {
						fnGetDependents(oFacetContent.Target.AnnotationPath);
					}
				}

				if (oFacetContent.SemanticObject && oFacetContent.SemanticObject.Path) {
					fnGetDependents(oFacetContent.SemanticObject.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Path) {
					fnGetDependents(oFacetContent.Url.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Apply && oFacetContent.Url.Apply.Parameters) {
					oFacetContent.Url.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}

				if (oFacetContent.UrlContentType && oFacetContent.UrlContentType.Path) {
					fnGetDependents(oFacetContent.UrlContentType.Path);
				}

			}

			if (aFacetContent.name) {
				fnGetDependents(aFacetContent.name, true);
			}

			return aExpand;
		};

		AnnotationHelper._getNavigationPrefix = function(oMetaModel, oEntityType, sProperty) {
			var sExpand = "";
			var aParts = sProperty.split("/");

			if (aParts.length > 1) {
				for (var i = 0; i < (aParts.length - 1); i++) {
					var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
					if (oAssociationEnd) {
						oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
						if (sExpand) {
							sExpand = sExpand + "/";
						}
						sExpand = sExpand + aParts[i];
					} else {
						return sExpand;
					}
				}
			}

			return sExpand;
		};

		AnnotationHelper.getStableIdPartFromDataField = function(oDataField) {
			var sPathConcat = "",
				sIdPart = "";
			if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				return AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
			} else if (oDataField.RecordType && (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" ||
					oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation")) {
				if (oDataField.SemanticObject.String) {
					sIdPart = AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.String);
				} else if (oDataField.SemanticObject.Path) {
					sIdPart = AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.Path);
				}
				if (oDataField.Action && oDataField.Action.String) {
					sIdPart = sIdPart + "::" + AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
				} else if (oDataField.Action && oDataField.Action.Path) {
					sIdPart = sIdPart + "::" + AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.Path);
				}
				return sIdPart;
			} else if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				return AnnotationHelper.replaceSpecialCharsInId(oDataField.Target.AnnotationPath);
			} else if (oDataField.Value && oDataField.Value.Path) {
				return AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Path);
			} else if (oDataField.Value && oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataField.Value.Apply.Parameters.length; i++) {
					if (oDataField.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Apply.Parameters[
							i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the annotations.");
			}
		};

		AnnotationHelper.replaceSpecialCharsInId = function(sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error(
					"Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		};

		AnnotationHelper.checkMoreBlockContent = function(oFacetContext) {
			return AnnotationHelper.checkFacetContent(oFacetContext, false);
		};

		AnnotationHelper.checkBlockContent = function(oFacetContext) {
			return AnnotationHelper.checkFacetContent(oFacetContext, true);
		};

		AnnotationHelper.checkFacetContent = function(oFacetContext, bBlock) {
			var sPath;
			var oInterface = oFacetContext.getInterface(0);
			var aFacets = oFacetContext.getModel().getProperty("", oFacetContext);

			//for Reference Facets directly under UI-Facets we need to check facets one level higher - by removing the last part of the path
			var aForPathOfFacetOneLevelHigher = oFacetContext.getPath().split("/Facets");
			var sContextOfFacetOneLevelHigher = oInterface.getModel().getContext(aForPathOfFacetOneLevelHigher[0]);
			if (oInterface.getModel().getProperty('', sContextOfFacetOneLevelHigher).RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				return sContextOfFacetOneLevelHigher.getPath();
			} else {
				if (!aFacets) {
					return undefined;
				}

				for (var iFacet = 0; iFacet < aFacets.length; iFacet++) {
					if (!bBlock) {
						if (aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"] && aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool ===
							"false") {
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					} else {
						if (aFacets[iFacet].RecordType !== "com.sap.vocabularies.UI.v1.ReferenceFacet" || (!aFacets[iFacet][
								"com.sap.vocabularies.UI.v1.PartOfPreview"
							] || aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "true")) {
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					}
				}
			}

			return sPath;
		};

		AnnotationHelper.isDeepFacetHierarchy = function(oFacet) {
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
						return true;
					}
				}
			}
			return false;
		};

		AnnotationHelper.doesCollectionFacetOnlyContainForms = function(oFacet) {
			var bReturn = true;
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].Target && oFacet.Facets[i].Target.AnnotationPath) {
						if ((oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") < 0) && (oFacet.Facets[i].Target.AnnotationPath
								.indexOf("com.sap.vocabularies.UI.v1.Identification") < 0) && (oFacet.Facets[i].Target.AnnotationPath.indexOf(
								"com.sap.vocabularies.UI.v1.DataPoint") < 0)) {
							bReturn = false;
						}
					}
				}
			} else {
				bReturn = false;
			}
			return bReturn;
		};

		AnnotationHelper.showFullScreenButton = function(oRouteConfig, oFacet) {
			if (oRouteConfig && oFacet) {
				var sFacetId = AnnotationHelper.getStableIdPartFromFacet(oFacet);
				if (oRouteConfig.component && oRouteConfig.component.settings && oRouteConfig.component.settings.sections && oRouteConfig.component.settings
					.sections[sFacetId] && oRouteConfig.component.settings.sections[sFacetId].tableMode === "FullScreenTable") {
					return true;
				}
			}
			return false;
		};

		AnnotationHelper.getSortOrder = function(Par) {
			var str = '';
			for (var i = 0; i < Par.length; i++) {
				if (!str) {
					str = Par[i].Property.PropertyPath;
				} else {
					str = str + ', ' + Par[i].Property.PropertyPath;
				}
				if (Par[i].Descending) {
					str = str + ' ' + Par[i].Descending.Bool;
				}
			}
			return str;
		};

		AnnotationHelper.getSelectionModeResponsiveTable = function(aEntities, oEntitySet, oEnabledPath) {
			//Check for selection mode of the table
			var oEnabledResolvedPath;
			if (AnnotationHelper.hasActions(aEntities)) {
				if (oEnabledPath != undefined) {
					if (typeof oEnabledPath === "boolean") {
						return oEnabledPath ? "SingleSelectLeft" : 'None';
					} else {
						if (oEnabledPath && oEnabledPath.charAt(0) === '!') {
							oEnabledPath = oEnabledPath.slice(1);
							oEnabledResolvedPath = "!${" + oEnabledPath + "}";
						} else {
							oEnabledResolvedPath = "${" + oEnabledPath + "}";;
						}
						return "{= " + oEnabledResolvedPath + " ? 'SingleSelectLeft' : 'None' }";
					}
				} else {
					return "SingleSelectLeft";
				}
			}
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			if ((oDeleteRestrictions && oDeleteRestrictions.Deletable && ((oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !==
					"false") || oDeleteRestrictions.Deletable.Path)) || !oDeleteRestrictions) {
				if (oEnabledPath != undefined) {
					if (typeof oEnabledPath === "boolean") {
						return oEnabledPath ? "{= !${DisplayMode} ? 'SingleSelectLeft' : 'None' }" : "None";
					} else {
						if (oEnabledPath && oEnabledPath.charAt(0) === '!') {
							oEnabledPath = oEnabledPath.slice(1);
							oEnabledResolvedPath = "!${" + oEnabledPath + "}";
						} else {
							oEnabledResolvedPath = "${" + oEnabledPath + "}";;
						}
						return "{= !${DisplayMode} ? ( " + oEnabledResolvedPath + " ? 'SingleSelectLeft' : 'None' ) : 'None' }";
					}
				} else {
					return "{= !${DisplayMode} ? 'SingleSelectLeft' : 'None' }";
				}
			}

			return "None";
		};

		AnnotationHelper.editable = function(Par) {
			//Check for selection mode of the table
			if (Par && Par.Bool === "true") {
				return "{= !${DisplayMode} }";
			}
			return false;
		};
		// AnnotationHelper.editable = function (Par, oEditablePath) {
		// 	var sEditableResolvedPath;
		// 	if (oEditablePath) {
		// 		if (oEditablePath && oEditablePath.charAt(0) === '!') {
		// 			oEditablePath = oEditablePath.slice(1);
		// 			sEditableResolvedPath = "!${" + oEditablePath + "}";
		// 		} else {
		// 			sEditableResolvedPath = "${" + oEditablePath + "}";;
		// 		}
		// 	}
		// 	//Check for selection mode of the table
		// 	if (Par && Par.Bool === "true") {
		// 		return oEditablePath ? "{= !${DisplayMode} ? " + sEditableResolvedPath + " : false }" : "{= !${DisplayMode} }";
		// 	}
		// 	return false;
		// };

		AnnotationHelper.hasActions = function(Par) {
			//Adding Inline check as selection mode should be enabled if DataFieldForAction and DataFieldForIntentBasedNavigation are not inline(in line item) - BCP 1770035232, 1770097243
			for (var i = 0; i < Par.length; i++) {
				if ((!Par[i].Inline || Par[i].Inline.Bool !== "true") && (Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" ||
						Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")) {
					return true;
				}
			}
			return false;
		};

		AnnotationHelper.createP13NColumnForAction = function(iContext, oDataField) {
			//used by DataFieldForAction, DataFieldWithIntentBasedNavigation, DataFieldForIntentBasedNavigation
			var iColumnIndex = AnnotationHelper._determineColumnIndex(iContext);
			var sColumnKey = AnnotationHelper.createP13NColumnKey(oDataField);
			var sP13N;
			if (oDataField && oDataField.Value && oDataField.Value.Path) {
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "sortProperty":"' + oDataField.Value.Path + '", "filterProperty":"' + oDataField.Value
					.Path + '", "columnIndex":"' + iColumnIndex + '", "actionButton":"true" \\}';
			} else {
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "columnIndex":"' + iColumnIndex + '", "actionButton":"true" \\}';
			}
			return sP13N;
		};

		AnnotationHelper.getStableIdPartForDatafieldActionButton = function(oDatafield, oFacet, oTabItem, oChartItem) {
			var sStableId = "";
			var sDatafieldStableId = "";
			var sFacetStableId = "";
			if (oFacet) {
				sFacetStableId = AnnotationHelper.getStableIdPartFromFacet(oFacet);
			}
			if (oDatafield) {
				sDatafieldStableId = AnnotationHelper.getStableIdPartFromDataField(oDatafield);
			}
			sStableId = (sFacetStableId !== "" ? sFacetStableId + "::" : "") + "action::" + sDatafieldStableId;
			var sSuffix = AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			if (sSuffix) {
				sStableId = sStableId.concat(sSuffix);
			}
			if (oChartItem) {
				sStableId = sStableId + "::chart";
			}
			return sStableId;
		};
		AnnotationHelper.getIconTabFilterKey = function(oTabItem) {
			if (oTabItem) {
				if (oTabItem.key) {
					return oTabItem.key;
				} else {
					return AnnotationHelper.replaceSpecialCharsInId(oTabItem.annotationPath);
				}
			}
		};
		AnnotationHelper.getSuffixFromIconTabFilterKey = function(oTabItem) {
			var sKey = AnnotationHelper.getIconTabFilterKey(oTabItem);
			if (sKey) {
				return "-".concat(sKey);
			} else {
				return "";
			}
		};

		AnnotationHelper.createP13N = function(oInterface, oContextSet, oContextProp, oDataField, oWorkingContext) {
			var sP13N = "",
				aAdditionalProperties = [],
				sNavigation = "";

			if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataField" || oDataField.RecordType ===
				"com.sap.vocabularies.UI.v1.DataFieldForAnnotation" ||
				oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {

				if (oDataField.Value.Path) {
					var sColumnKey = AnnotationHelper.createP13NColumnKey(oDataField, oContextProp);
					sP13N = '\\{"columnKey":"' + sColumnKey + '", "leadingProperty":"' + oDataField.Value.Path;
					// get Navigation Prefix
					var oMetaModel = oInterface.getInterface(0).getModel();
					if (oMetaModel) {
						var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
						if (oEntityType) {
							sNavigation = AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Value.Path);
							if (sNavigation) {
								sNavigation = sNavigation + "/";
							}
						}
					}
				} else if (oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
					oDataField.Value.Apply.Parameters.forEach(function(oParameter) {
						if (oParameter.Type === "Path") {
							if (!sP13N) {
								sP13N = '\\{"columnKey":"' + oParameter.Value + '", "leadingProperty":"' + oParameter.Value;
							} else {
								aAdditionalProperties.push(oParameter.Value);
							}
						}
					});
				}
				//$select for ListPage - additional properties are required
				if (oWorkingContext) {
					aAdditionalProperties.push("Pernr");
					aAdditionalProperties.push("Deletable");
					aAdditionalProperties.push("DraftLinkVisible");
					aAdditionalProperties.push("DraftLinkType");
					aAdditionalProperties.push("DraftUserId");
					aAdditionalProperties.push("Persistencestatus");
					aAdditionalProperties.push("TripChange");
					aAdditionalProperties.push("Datecha");
					aAdditionalProperties.push("Timecha");
				}
				//$select for Advances - AdvCurrFc and PayCurrFc are needed
				if (oContextSet.name === "Advances") {
					aAdditionalProperties.push("Pernr");
					aAdditionalProperties.push("Tripno");
					aAdditionalProperties.push("AdvCurrFc");
					aAdditionalProperties.push("PayCurrFc");
					aAdditionalProperties.push("Deletable");
				}

				//Criticality for sub-sections - Specific for Travel Request Apps
				if (oContextSet.name === "Advances" || oContextSet.name === "CostAssignments" || oContextSet.name === "EstimatedCostCats" ||
					oContextSet.name === "Destinations" || oContextSet.name === "TravelServices") {
					aAdditionalProperties.push("Criticality");
				}
				// $Select field ReturnPossible for button Add Return - For Visibility
				if (oContextSet.name === "TravelServices") {
					aAdditionalProperties.push("ReturnPossible");

					//Workaround - Keys are missing !
					aAdditionalProperties.push("Tripno");
					aAdditionalProperties.push("Pernr");
					aAdditionalProperties.push("Request");
				}

				if ((oContextProp.type === "Edm.DateTime") && (oContextProp["sap:display-format"] === "Date")) {
					sP13N += '", "type":"date';
				}
				if ((oContextProp.type === "Edm.DateTimeOffset")) {
					sP13N += '", "type":"datetime';
				}
				if (oDataField.Criticality && oDataField.Criticality.Path) {
					aAdditionalProperties.push(oDataField.Criticality.Path);
				}
				if (oContextProp["com.sap.vocabularies.Common.v1.Text"] && oContextProp["com.sap.vocabularies.Common.v1.Text"].Path) {
					aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.Text"].Path);
				}
				if (oContextProp["Org.OData.Measures.V1.ISOCurrency"] && oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path) {
					aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path);
				}
				if (oContextProp["Org.OData.Measures.V1.Unit"] && oContextProp["Org.OData.Measures.V1.Unit"].Path) {
					aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.Unit"].Path);
				}
				if (oContextProp["com.sap.vocabularies.Common.v1.FieldControl"] && oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path) {
					aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path);
				}

				if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Apply &&
					oDataField.Url.Apply.Parameters) {
					oDataField.Url.Apply.Parameters.forEach(function(oParameter) {
						if (oParameter.Type === "LabeledElement") {
							aAdditionalProperties.push(oParameter.Value.Path);
						}
					});
				}
				if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Path) {
					aAdditionalProperties.push(oDataField.Url.Path);
				}
				if (aAdditionalProperties.length > 0) {
					var sAdditionalProperties = "";
					aAdditionalProperties.forEach(function(oProperty) {
						if (sAdditionalProperties) {
							sAdditionalProperties = sAdditionalProperties + ",";
						}
						sAdditionalProperties = sAdditionalProperties + oProperty;
					});
					sP13N += '", "additionalProperty":"' + sAdditionalProperties;
				}
				var bNotSortable = false;
				if (oContextSet["Org.OData.Capabilities.V1.SortRestrictions"] && oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties) {
					var aNonSortableProperties = oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties;
					for (var i = aNonSortableProperties.length - 1; i >= 0; i--) {
						if (aNonSortableProperties[i].PropertyPath === oDataField.Value.Path) {
							bNotSortable = true;
							break;
						}
					}
				}
				if (!bNotSortable) {
					if (sNavigation) {
						sP13N += '", "sortProperty":"' + sNavigation + oContextProp.name;
					} else {
						sP13N += '", "sortProperty":"' + oContextProp.name;
					}
				}
				var bNotFilterable = false;
				if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"]) {
					if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].Filterable !== 'false') {
						if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties) {
							var aNonFilterableProperties = oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties;
							for (var j = aNonFilterableProperties.length - 1; j >= 0; j--) {
								if (aNonFilterableProperties[j].PropertyPath === oDataField.Value.Path) {
									bNotFilterable = true;
									break;
								}
							}
						}
					} else {
						bNotFilterable = true;
					}
				}
				if (!bNotFilterable) {
					sP13N += '", "filterProperty":"' + oContextProp.name;
				}
				var oContext = oInterface.getInterface(2);
				var iColumnIndex = AnnotationHelper._determineColumnIndex(oContext);
				if (iColumnIndex >= 0) {
					sP13N += '", "columnIndex":"' + iColumnIndex;
				}
			}
			return sP13N + '" \\}';
		};

		AnnotationHelper.createP13NColumnKey = function(oDataField, oContextProp) {
			var sColumnKey = "";
			var sFioriTemplatePrefix = "template";
			var sSeperator = "::";
			if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataField") {
				sColumnKey = oDataField.Value.Path;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation") {
				sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldWithIntentBasedNavigation" + sSeperator + oDataField.SemanticObject.String +
					sSeperator + oDataField.Action.String + sSeperator + oDataField.Value.Path;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath") {
				sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldWithNavigationPath" + sSeperator + oDataField.Target.String;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
				sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldForIntentBasedNavigation" + sSeperator + oDataField.SemanticObject.String +
					sSeperator + oDataField.Action.String;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldForAction" + sSeperator + oDataField.Action.String;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				if (oDataField.Target.AnnotationPath.indexOf('@com.sap.vocabularies.Communication.v1.Contact') >= 0 ||
					oDataField.Target.AnnotationPath.indexOf('@com.sap.vocabularies.UI.v1.DataPoint') >= 0 ||
					oDataField.Target.AnnotationPath.indexOf('@com.sap.vocabularies.UI.v1.Chart') >= 0) {
					sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldForAnnotation" + sSeperator + oDataField.Target.AnnotationPath;
					sColumnKey = sColumnKey.replace('@', '');
				}
			}
			return sColumnKey;
		};

		AnnotationHelper._determineColumnIndex = function(oContext) {
			var sColumn = oContext.getPath();
			var iColumnIndex = Number(sColumn.slice(sColumn.lastIndexOf("/") + 1));
			var sLineItem = sColumn.slice(0, sColumn.lastIndexOf("/"));
			var oLineItem = oContext.getModel().getObject(sLineItem);
			var index = 0;
			for (var iRecord = 0; iRecord < iColumnIndex; iRecord++) {
				if ((oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" ||
						oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
					(!oLineItem[iRecord].Inline || oLineItem[iRecord].Inline.Bool === "false")) {
					continue;
				} else {
					index++;
				}
			}
			return index;
		};

		AnnotationHelper.getColumnToolTip = function(oDataFieldValue, oDataField) {
			var sResult;
			if (oDataField.Label) {
				return oDataField.Label.String;
			} else {
				sResult = oDataFieldValue["sap:quickinfo"] || (oDataFieldValue["com.sap.vocabularies.Common.v1.QuickInfo"] || "").String ||
					oDataFieldValue["sap:label"] || (oDataFieldValue["com.sap.vocabularies.Common.v1.Label"] || "").String || "";
				return sResult;
			}
		};

		AnnotationHelper.getColumnHeaderText = function(oDataFieldValue, oDataField) {
			var sResult;
			if (oDataField.Label) {
				return oDataField.Label.String;
			} else {
				sResult = oDataFieldValue["sap:label"] || (oDataFieldValue["com.sap.vocabularies.Common.v1.Label"] || "").String || "";
				return sResult;
			}
		};

		AnnotationHelper.getSubDetailPageIntent = function(sListEntitySet, aSubPages, sAnnotationPath, sMode, hideChevronForUnauthorizedExtNav) {
			// if variable hideChevronForUnauthorizedExtNav is true, then sub object outbound target is returned only if hideChevronForUnauthorizedExtNav (manifest flag) is set to true for the corresponding table.
			var sNavigationProperty;
			if (sAnnotationPath) {
				//AnnotationPath is only filled on Object Page which contains facets->annotationPath
				sNavigationProperty = sAnnotationPath.split("/")[0];
			}
			if (sListEntitySet && aSubPages && aSubPages.length > 0) {
				var i;
				if (sNavigationProperty) {
					for (i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && sNavigationProperty === aSubPages[i].navigationProperty && aSubPages[i].navigation &&
							aSubPages[i].navigation[sMode]) {
							if (hideChevronForUnauthorizedExtNav) {
								if (aSubPages[i].component && aSubPages[i].component.settings && aSubPages[i].component.settings.hideChevronForUnauthorizedExtNav) {
									return aSubPages[i].navigation[sMode].target;
								}
							} else {
								return aSubPages[i].navigation[sMode].target;
							}
						}
					}
				} else {
					for (i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && aSubPages[i].navigation && aSubPages[i].navigation[sMode]) {
							if (hideChevronForUnauthorizedExtNav) {
								if (aSubPages[i].component && aSubPages[i].component.settings && aSubPages[i].component.settings.hideChevronForUnauthorizedExtNav) {
									return aSubPages[i].navigation[sMode].target;
								}
							} else {
								return aSubPages[i].navigation[sMode].target;
							}
						}
					}
				}
			}
		};

		AnnotationHelper.getDataFieldTarget = function(oDataField) {
			var sResult;
			if (oDataField.Target) {
				return "{ path: '" + oDataField.Target.AnnotationPath + "' }";
			} else {
				return sResult;
			}
		};

		AnnotationHelper.getKeyItem = function(oInterface, sEntitySet) {
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet.Target.AnnotationPath || '');
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var key = oEntityType.key.propertyRef[0].name;
			return "{" + key + "}";
		};
		AnnotationHelper.getDescriptionItem = function(oInterface, sEntitySet) {
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet.Target.AnnotationPath || '');
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var key = oEntityType.key.propertyRef[0].name;
			for (var i = 0; i < oEntityType.property.length; i++) {
				if (oEntityType.property[i].name === key) {
					var description = oEntityType.property[i]["sap:text"];
					return "{" + description + "}";
				}
			}
		};

		AnnotationHelper.getColumnListItemType = function(aPages, sListEntitySet) {
			var bPageFound = false;
			var i = 0;
			if (aPages) {
				while (!bPageFound && i < aPages.length) {
					bPageFound |= AnnotationHelper.hasNavigationByName(aPages[i++], sListEntitySet);
				}
			}
			return bPageFound ? "Navigation" : "Inactive";
		};

		// AnnotationHelper.getColumnListItemType = function (aPages, sListEntitySet, oEditablePath) {
		// 	var oEditableResolvedPath;
		// 	var bPageFound = false;
		// 	var i = 0;
		// 	if (aPages) {
		// 		while (!bPageFound && i < aPages.length) {
		// 			bPageFound |= AnnotationHelper.hasNavigationByName(aPages[i++], sListEntitySet);
		// 		}
		// 	}
		// 	if (oEditablePath != undefined) {
		// 		if (typeof oEditablePath === "boolean") {
		// 			return oEditablePath && bPageFound ? "Navigation" : "Inactive";
		// 		} else {
		// 			if (oEditablePath && oEditablePath.charAt(0) === '!') {
		// 				oEditablePath = oEditablePath.slice(1);
		// 				oEditableResolvedPath = "!${" + oEditablePath + "}";
		// 			} else {
		// 				oEditableResolvedPath = "${" + oEditablePath + "}";;
		// 			}
		// 			return bPageFound ? "{= " + oEditableResolvedPath + " ? 'Navigation' : 'Inactive' }" : "Inactive";
		// 		}
		// 	} else {
		// 		return bPageFound ? "Navigation" : "Inactive";
		// 	}
		// };

		AnnotationHelper.hasNavigationByName = function(aPages, sListEntitySet) {
			if (aPages) {
				for (var i = 0; i < aPages.length; i++) {
					if (aPages[i].split("|").slice(-1).pop() === sListEntitySet.name) {
						return true;
					}
				}
			}
			return false;
		};

		AnnotationHelper.listAppPages = function(oManifestExtract, result) {
			for (var property in oManifestExtract) {
				if (oManifestExtract.hasOwnProperty(property)) {
					if (property === "pages") {
						result.pages.push(Object.keys(oManifestExtract[property]));
						for (var pageProperty in oManifestExtract[property]) {
							if (oManifestExtract[property].hasOwnProperty(pageProperty)) {
								result.settings.push(oManifestExtract[property][pageProperty].component.settings);
							}
						}
					}
					if (typeof oManifestExtract[property] === "object") {
						AnnotationHelper.listAppPages(oManifestExtract[property], result);
					}
				}
			}
			return result;
		};

		AnnotationHelper.getDisplayNavigationIntent = function(sListEntitySet, aSubPages, sAnnotationPath) {
			return AnnotationHelper.getSubDetailPageIntent(sListEntitySet, aSubPages, sAnnotationPath, 'display');
		};

		AnnotationHelper.getColumnCellFirstText = function(oDataFieldValue, oDataField, oEntityType, bCheckVisibility) {
			var sResult;
			sResult = AnnotationHelper.getTextForDataField(oDataFieldValue);
			if (!sResult) {
				sResult = oDataField.Value.Path;
			}
			if (sResult) {
				if (bCheckVisibility) {
					return true;
				} else {
					if (oDataFieldValue.type === "Edm.DateTimeOffset" || oDataFieldValue.type === "Edm.DateTime" || oDataFieldValue.type === "Edm.Time") {
						var sFormattedDateTime = AnnotationHelper.formatDateTimeForCustomColumn(oDataFieldValue.type,
							sResult);
						return sFormattedDateTime;
					} else {
						return "{" + sResult + "}";
					}
				}
			}
		};

		AnnotationHelper.getTextForDataField = function(oDataFieldValue) {
			var sValue = oDataFieldValue["com.sap.vocabularies.Common.v1.Text"] && oDataFieldValue["com.sap.vocabularies.Common.v1.Text"].Path;
			return sValue;
		};

		AnnotationHelper.formatDateTimeForCustomColumn = function(oDataFieldValueType, sResult) {
			if (oDataFieldValueType === "Edm.DateTimeOffset") {
				return "{ path: '" + sResult +
					"', type: 'sap.ui.model.odata.type.DateTimeOffset', formatOptions: { style: 'medium'}, constraints: {displayFormat: 'Date'}}";
			} else if (oDataFieldValueType === "Edm.DateTime") {
				return "{ path: '" + sResult +
					"', type: 'sap.ui.model.odata.type.DateTime', formatOptions: { style: 'medium'}, constraints: {displayFormat: 'Date'}}";
			} else {
				return "{ path: '" + sResult + "', type: 'sap.ui.model.odata.type.Time', formatOptions: { style: 'medium'}}";
			}
		};

		AnnotationHelper.getColumnCellFirstTextVisibility = function(oDataFieldValue, oDataField, oEntityType) {
			var bCheckVisibility = true;
			var bVisible = !!AnnotationHelper.getColumnCellFirstText(oDataFieldValue, oDataField, oEntityType,
				bCheckVisibility);
			return bVisible;
		};

		AnnotationHelper.getIdForMoreBlockContent = function(oFacet) {
			if (oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"] && oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "false") {
				return "::MoreContent";
			}
		};

		AnnotationHelper.getEntityTypesForFormPersonalization = function(oInterface, oFacet, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aEntityTypes = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var aFacets = [];
			if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet" && oFacet.Facets) {
				aFacets = oFacet.Facets;
			} else if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				aFacets.push(oFacet);
			}
			aFacets.forEach(function(oFacet) {
				var sNavigationProperty;
				if (oFacet.Target && oFacet.Target.AnnotationPath && oFacet.Target.AnnotationPath.indexOf("/") > 0) {
					sNavigationProperty = oFacet.Target.AnnotationPath.split("/")[0];
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
					if (oAssociationEnd && oAssociationEnd.entitySet) {
						oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
						if (aEntityTypes.indexOf(oEntitySet.entityType.split(".")[1]) === -1) {
							aEntityTypes.push(oEntitySet.entityType.split(".")[1]);
						}
					}
				} else {
					if (aEntityTypes.indexOf(oEntitySetContext.entityType.split(".")[1]) === -1) {
						aEntityTypes.push(oEntitySetContext.entityType.split(".")[1]);
					}
				}
			});
			return aEntityTypes.join(", ");
		};

		AnnotationHelper.getDataFieldLabel = function(oDataFieldValue, oDataField) {
			var sResult;
			if (oDataField.Label) {
				return oDataField.Label.String;
			} else {
				sResult = oDataFieldValue["sap:label"] || (oDataFieldValue["com.sap.vocabularies.Common.v1.Label"] || "").String || "";
				if (sResult === "") {
					var labelFromExtension = (oDataFieldValue.extensions) ? oDataFieldValue.extensions.find(function(extension) {
						return extension.name === "label";
					}) : null;
					if (labelFromExtension !== undefined && labelFromExtension !== null) {
						if (labelFromExtension.length !== undefined && labelFromExtension.length > 0) {
							sResult = labelFromExtension[0].value;
						} else {
							sResult = labelFromExtension.value;
						}
					} else {
						sResult = "";
					}
				}
				return sResult;
			}
		};

		AnnotationHelper.searchForFirstSemKeyTitleDescription = function(oEntityType) {
			var bTitle, bDescr, iDescIndex, iTitleIndex, oEntityTypeAnnotations, sFirstSemKeyPropPath, aLineItemAnnotations,
				oHeaderInfoAnnotations, sHeaderTitle, sHeaderDescription, iLineItemsNumber, i;
			var sEntityTypePath = oEntityType.getPath();
			var sTargetString = sEntityTypePath + '/' + "com.sap.vocabularies.UI.v1.LineItem" + '/';
			if (oEntityType) {
				oEntityTypeAnnotations = oEntityType.getObject();
				// we consider the first field of the semantic key only, the same way SmartTable does
				sFirstSemKeyPropPath = oEntityTypeAnnotations["com.sap.vocabularies.Common.v1.SemanticKey"] && oEntityTypeAnnotations[
					"com.sap.vocabularies.Common.v1.SemanticKey"][0] && oEntityTypeAnnotations["com.sap.vocabularies.Common.v1.SemanticKey"][0].PropertyPath;
				aLineItemAnnotations = oEntityTypeAnnotations["com.sap.vocabularies.UI.v1.LineItem"];
				oHeaderInfoAnnotations = oEntityTypeAnnotations["com.sap.vocabularies.UI.v1.HeaderInfo"];
				sHeaderTitle = "";
				sHeaderDescription = "";
				if (oHeaderInfoAnnotations) {
					sHeaderTitle = oHeaderInfoAnnotations && oHeaderInfoAnnotations["Title"] && oHeaderInfoAnnotations["Title"].Value &&
						oHeaderInfoAnnotations["Title"].Value.Path;
					sHeaderDescription = oHeaderInfoAnnotations && oHeaderInfoAnnotations["Description"] && oHeaderInfoAnnotations["Description"].Value &&
						oHeaderInfoAnnotations["Description"].Value.Path;
				}
				iLineItemsNumber = aLineItemAnnotations && aLineItemAnnotations.length;
				for (i = 0; i < iLineItemsNumber; i++) {
					if (aLineItemAnnotations[i].RecordType === "com.sap.vocabularies.UI.v1.DataField" && aLineItemAnnotations[i].Value.Path ===
						sFirstSemKeyPropPath) {
						if (AnnotationHelper.isPropertyHidden(aLineItemAnnotations[i])) {
							continue;
						}
						sTargetString = sTargetString + i + '/Value/Path';
						return sTargetString;
					}
					if (aLineItemAnnotations[i].RecordType === "com.sap.vocabularies.UI.v1.DataField" && aLineItemAnnotations[i].Value.Path ===
						sHeaderTitle) {
						if (AnnotationHelper.isPropertyHidden(aLineItemAnnotations[i])) {
							continue;
						}
						bTitle = true;
						iTitleIndex = i;
					}
					if (aLineItemAnnotations[i].RecordType === "com.sap.vocabularies.UI.v1.DataField" && aLineItemAnnotations[i].Value.Path ===
						sHeaderDescription) {
						if (AnnotationHelper.isPropertyHidden(aLineItemAnnotations[i])) {
							continue;
						}
						bDescr = true;
						iDescIndex = i;
					}
				}
				if (bTitle) {
					sTargetString = sTargetString + iTitleIndex + '/Value/Path';
					return sTargetString;
				} else if (bDescr) {
					sTargetString = sTargetString + iDescIndex + '/Value/Path';
					return sTargetString;
				}
			} else { // Cannot do anything
				jQuery.sap.log.warning("No entity type provided");
			}
		};

		AnnotationHelper.isPropertyHidden = function(oLineItemAnnotations) {
			//AnnotationHelper.debugArgs(arguments);
			var bHidden = false;
			// "com.sap.vocabularies.Common.v1.FieldControl" annotation is deprecated but we check it here for compatibility reasons
			if (oLineItemAnnotations["com.sap.vocabularies.UI.v1.Hidden"] || (oLineItemAnnotations["com.sap.vocabularies.Common.v1.FieldControl"] &&
					oLineItemAnnotations["com.sap.vocabularies.Common.v1.FieldControl"].EnumMember &&
					oLineItemAnnotations["com.sap.vocabularies.Common.v1.FieldControl"].EnumMember ===
					"com.sap.vocabularies.Common.v1.FieldControlType/Hidden")) {
				bHidden = true;
			}
			return bHidden;
		};

		AnnotationHelper.isCurrentEntity = function(oEntitySet, sSectionId) {
			return oEntitySet.name === sSectionId;
		};

		AnnotationHelper.isCurrentFacet = function(oFacet, sFragmentId) {
			var sId = AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (sId === sFragmentId) {
				return true;
			} else {
				return false;
			}
		};

		AnnotationHelper.extensionPointBeforeFacetExists = function(sEntitySet, oFacet, oManifestExtend) {
			//AnnotationHelper.debugArgs(arguments);
			if (oManifestExtend) {
				var sExtensionPointId = getBeforeExtensionPointId(sEntitySet, oFacet);
				return oManifestExtend[sExtensionPointId];
			}
			return false;
		};

		AnnotationHelper.extensionPointAfterFacetExists = function(sEntitySet, oFacet, oManifestExtend) {
			//AnnotationHelper.debugArgs(arguments);
			var bExists = false;
			if (oManifestExtend) {
				var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + AnnotationHelper.getStableIdPartFromFacet(oFacet);
				Object.keys(oManifestExtend).forEach(function(sKey) {
					if (sKey.startsWith(sExtensionPointId)) {
						bExists = true;
						return;
					}
				});
			}
			return bExists;
		};

		AnnotationHelper.extensionPointAfterFacetCheckExistence = function(sEntitySet, oFacet, oManifestExtend, sAfterFacetName) {
			//AnnotationHelper.debugArgs(arguments);
			if (oManifestExtend[sAfterFacetName]) {
				var aAfterFacetName = sAfterFacetName.split('|');
				aAfterFacetName.pop(); // poping name
				var oExtFacetId = aAfterFacetName.pop(); // poping facet id
				return AnnotationHelper.getStableIdPartFromFacet(oFacet) === oExtFacetId;
			}
			return false;
		};

		function getBeforeExtensionPointId(sEntitySet, oFacet) {
			var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + AnnotationHelper.getStableIdPartFromFacet(oFacet);
			return sExtensionPointId;
		}

		AnnotationHelper.getStableIdPartFromBeforeFacet = function(sEntitySet, oFacet, oManifestExtend) {
			//default to getStableIdPartFromFacet from oFacet if needed
			var sExtensionPointId = getBeforeExtensionPointId(sEntitySet, oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension["sap.fin.travel.lib.reuse"] && oExtension["sap.fin.travel.lib.reuse"].sectionId) {
				return oExtension["sap.fin.travel.lib.reuse"].sectionId;
			}
			return AnnotationHelper.getStableIdPartFromFacet(oFacet);
		};

		/**
		 * Return the formula to decide whether to display the before facet extension section or not.
		 * It looks at manifest configuration for the "hiddenProperty" property in the "sap.fin.travel.lib.reuse" section of the extension manifest
		 * Default is to return true (section visible)
		 *
		 */
		AnnotationHelper.shouldDisplayBeforeFacetSection = function(sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = getBeforeExtensionPointId(sEntitySet, oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension["sap.fin.travel.lib.reuse"] && oExtension["sap.fin.travel.lib.reuse"].hiddenProperty) {
				return AnnotationHelper.shouldDisplaySection(oExtension["sap.fin.travel.lib.reuse"].hiddenProperty);
			}
			return true;
		};
		AnnotationHelper.shouldDisplayAfterFacetSection = function(sEntitySet, oFacet, oManifestExtend, sAfterFacetName) {
			//AnnotationHelper.debugArgs(arguments);
			var oExtension = oManifestExtend[sAfterFacetName];
			if (oExtension && oExtension["sap.fin.travel.lib.reuse"] && oExtension["sap.fin.travel.lib.reuse"].hiddenProperty) {
				return AnnotationHelper.shouldDisplaySection(oExtension["sap.fin.travel.lib.reuse"].hiddenProperty);
			}
			return true;
		};

		AnnotationHelper.getExtensionPointBeforeFacetTitle = function(sEntitySet, oFacet, oManifestExtend) {
			//AnnotationHelper.debugArgs(arguments);
			var sExtensionPointId = getBeforeExtensionPointId(sEntitySet, oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension["sap.fin.travel.lib.reuse"] && oExtension["sap.fin.travel.lib.reuse"].title) {
				return oExtension["sap.fin.travel.lib.reuse"].title;
			}
		};

		AnnotationHelper.getExtensionPointAfterFacetTitle = function(sEntitySet, oFacet, oManifestExtend, sAfterFacetName) {
			//AnnotationHelper.debugArgs(arguments);
			var oExtension = oManifestExtend[sAfterFacetName];
			if (oExtension && oExtension["sap.fin.travel.lib.reuse"] && oExtension["sap.fin.travel.lib.reuse"].title) {
				return oExtension["sap.fin.travel.lib.reuse"].title;
			}
		};

		AnnotationHelper.getNavigationPropertyByName = function(oSourceEntitySet, sNavigationProperty) {
			if (oSourceEntitySet && oSourceEntitySet.navigationProperty) {
				for (var i = 0; i < oSourceEntitySet.navigationProperty.length; i++) {
					if (oSourceEntitySet.navigationProperty[i].name === sNavigationProperty) {
						return oSourceEntitySet.navigationProperty[i];
					}
				}
			}
			return undefined;
		};

		AnnotationHelper.isSourceEntityNavigationCreatable = function(oInterface, oSourceEntitySet) {
			var oModel = oInterface.getModel();
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
			var oInsertRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.InsertRestrictions"] || undefined;
			var oSearchRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.SearchRestrictions"] || undefined;

			if (oInsertRestrictions && oInsertRestrictions.Insertable && !oSearchRestrictions) {
				if (AnnotationHelper.isSourceEntityNavigationEntitySet(oModel,
						oInsertRestrictions.Insertable.Path)) {
					return true;
				}
			}

			return false;
		};

		AnnotationHelper.getSourceEntityNavigationCreatableVisibility = function(oInterface, sAnnotationPath, oSourceEntitySet,
			oParentEntityType) {
			var oModel = oInterface.getInterface(0).getModel();
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
			var sCreatablePath, sCreatablePathResolved;

			// Look into annotation path
			if (sAnnotationPath) {
				var sNavigationProperty = sAnnotationPath.split("/")[0];
				var oNavigationProperty = AnnotationHelper.getNavigationPropertyByName(oParentEntityType, sNavigationProperty);
				if (oNavigationProperty && oNavigationProperty.hasOwnProperty("sap:creatable-path")) {
					//AnnotationPath is only filled on Object Page which contains facets->annotationPath
					if (oNavigationProperty["sap:creatable-path"] == "false") {
						return false;
					} else if (!(oNavigationProperty["sap:creatable-path"] == "true")) {
						sCreatablePath = oNavigationProperty["sap:creatable-path"] == "true" ? undefined : oNavigationProperty["sap:creatable-path"];
						if (sCreatablePath && sCreatablePath.charAt(0) === '!') {
							sCreatablePath = sCreatablePath.slice(1);
							sCreatablePathResolved = "!${" + sCreatablePath + "}";
						} else {
							sCreatablePathResolved = "${" + sCreatablePath + "}";;
						}
					}
				}
			}

			// Look into InsertRestrictions
			var oInsertRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.InsertRestrictions"] || undefined;
			var oSearchRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.SearchRestrictions"] || undefined;
			if (oInsertRestrictions && oInsertRestrictions.Insertable && !oSearchRestrictions) {
				if (AnnotationHelper.isSourceEntityNavigationEntitySet(oModel,
						oInsertRestrictions.Insertable.Path)) {
					return sCreatablePath ? "{= !${DisplayMode} ? " + sCreatablePathResolved + " : false }" : "{= !${DisplayMode} }";
				}
			}

			return false;
		};

		AnnotationHelper.isSourceEntitySearchNavigationCreatable = function(oInterface, oSourceEntitySet) {
			var oModel = oInterface.getModel();
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
			var oInsertRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.InsertRestrictions"] || undefined;
			var oSearchRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.SearchRestrictions"] || undefined;

			if (oInsertRestrictions && oInsertRestrictions.Insertable && oSearchRestrictions && oSearchRestrictions.Searchable) {
				if (AnnotationHelper.isSourceEntityNavigationEntitySet(oModel,
						oInsertRestrictions.Insertable.Path)) {
					return true;
				}
			}
			return false;
		};

		AnnotationHelper.getSourceEntitySearchNavigationCreatableVisibility = function(oInterface, sAnnotationPath, oSourceEntitySet,
			oParentEntityType) {
			var oModel = oInterface.getInterface(0).getModel();
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
			var sCreatablePath, sCreatablePathResolved;

			// Look into annotation path
			if (sAnnotationPath) {
				var sNavigationProperty = sAnnotationPath.split("/")[0];
				var oNavigationProperty = AnnotationHelper.getNavigationPropertyByName(oParentEntityType, sNavigationProperty);
				if (oNavigationProperty && oNavigationProperty.hasOwnProperty("sap:creatable-path")) {
					//AnnotationPath is only filled on Object Page which contains facets->annotationPath
					if (oNavigationProperty["sap:creatable-path"] == "false") {
						return false;
					} else if (!(oNavigationProperty["sap:creatable-path"] == "true")) {
						sCreatablePath = oNavigationProperty["sap:creatable-path"] == "true" ? undefined : oNavigationProperty["sap:creatable-path"];
						if (sCreatablePath && sCreatablePath.charAt(0) === '!') {
							sCreatablePath = sCreatablePath.slice(1);
							sCreatablePathResolved = "!${" + sCreatablePath + "}";
						} else {
							sCreatablePathResolved = "${" + sCreatablePath + "}";;
						}
					}
				}
			}

			// Look into InsertRestrictions
			var oInsertRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.InsertRestrictions"] || undefined;
			var oSearchRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.SearchRestrictions"] || undefined;
			if (oInsertRestrictions && oInsertRestrictions.Insertable && oSearchRestrictions && oSearchRestrictions.Searchable) {
				if (AnnotationHelper.isSourceEntityNavigationEntitySet(oModel,
						oInsertRestrictions.Insertable.Path)) {
					return sCreatablePath ? "{= !${DisplayMode} ? " + sCreatablePathResolved + " : false }" : "{= !${DisplayMode} }";
				}
			}
			return false;
		};

		AnnotationHelper.isSourceEntityNavigationEntitySet = function(oModel, sPropertyPath) {
			var oEntitySet = oModel.getODataEntitySet(sPropertyPath);
			return (oEntitySet && oEntitySet.entityType);
		};

		AnnotationHelper.getSourceEntityCreatableVisibility = function(oInterface, sAnnotationPath, oSourceEntitySet, oParentEntityType) {
			var result = "{= !${DisplayMode} }";
			var oModel = oInterface.getInterface(0).getModel();
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
			var sCreatablePath, sCreatablePathResolved;

			// Look into annotation path
			if (sAnnotationPath) {
				var sNavigationProperty = sAnnotationPath.split("/")[0];
				var oNavigationProperty = AnnotationHelper.getNavigationPropertyByName(oParentEntityType, sNavigationProperty);
				if (oNavigationProperty && oNavigationProperty.hasOwnProperty("sap:creatable-path")) {
					//AnnotationPath is only filled on Object Page which contains facets->annotationPath
					if (oNavigationProperty["sap:creatable-path"] == "false") {
						return false;
					} else {
						sCreatablePath = oNavigationProperty["sap:creatable-path"] == "true" ? undefined : oNavigationProperty["sap:creatable-path"];
						if (sCreatablePath && sCreatablePath.charAt(0) === '!') {
							sCreatablePath = sCreatablePath.slice(1);
							sCreatablePathResolved = "!${" + sCreatablePath + "}";
						} else {
							sCreatablePathResolved = "${" + sCreatablePath + "}";;
						}
					}
				}
			}

			// Look into InsertRestrictions
			var oInsertRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.InsertRestrictions"] || [];

			if (oInsertRestrictions && oInsertRestrictions.Insertable) {
				if (AnnotationHelper.isSourceEntityPropertyBoolean(oModel, oSourceEntitySet.entityType,
						oInsertRestrictions.Insertable.Path)) {
					return sCreatablePath ? "{= !${DisplayMode} ? (" + sCreatablePathResolved + " ? ${" + oInsertRestrictions.Insertable.Path +
						"} : false) : false }" : "{= !${DisplayMode} ? " + oInsertRestrictions.Insertable.Path + " : false }";
				} else {
					return false;
				}
			}
			return sCreatablePath ? "{= !${DisplayMode} ? " + sCreatablePathResolved + " : false }" : "{= !${DisplayMode} }";
		};

		AnnotationHelper.isSourceEntityPropertyBoolean = function(oModel, sEntityTypeName, sPropertyPath) {
			var sProperty = sPropertyPath;
			var oPathEntityType = oModel.getODataEntityType(sEntityTypeName);
			if (sProperty.indexOf("/") > -1) { // if it's a navigation path, we have to expand to find the right entity type
				var aPathParts = sProperty.split("/");
				for (var j = 0; j < aPathParts.length - 1; j++) { // go through the parts finding the last entity type;
					var oAssociationEnd = oModel.getODataAssociationEnd(oPathEntityType, aPathParts[j]);
					oPathEntityType = oModel.getODataEntityType(oAssociationEnd.type);
				}
				sProperty = aPathParts[aPathParts.length - 1]; // last entry in array is a property
			}

			var oODataProperty = oModel.getODataProperty(oPathEntityType, sProperty);
			return (oODataProperty && oODataProperty.type === "Edm.Boolean");
		};

		AnnotationHelper.getTargetEntitySettings = function(oInterface, oSourceEntitySet) {
			var aSettings = [];
			var oModel = oInterface.getModel();
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
			var oInsertRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.InsertRestrictions"] || [];

			if (oInsertRestrictions && oInsertRestrictions.Insertable) {
				if (AnnotationHelper.isSourceEntityNavigationEntitySet(oModel,
						oInsertRestrictions.Insertable.Path)) {
					// Target entity name.
					aSettings.push(oInsertRestrictions.Insertable.Path);
					// Main property name of the target entity.
					var oRelatedEntitySet = oModel.getODataEntitySet(oInsertRestrictions.Insertable.Path);
					var oRelatedEntityType = oModel.getODataEntityType(oRelatedEntitySet.entityType);
					var oRelatedEntityHeaderInfo = oRelatedEntityType ? oRelatedEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] : undefined;
					aSettings.push(oRelatedEntityHeaderInfo ? oRelatedEntityHeaderInfo.Title.Value.Path : "");
				}
			}
			return JSON.stringify(aSettings);
		};

		AnnotationHelper.getTargetEntityProperties = function(oInterface, oSourceEntitySet) {
			var aProperties = [];
			var oModel = oInterface.getModel();
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
			var oInsertRestrictions = oSourceEntityType["Org.OData.Capabilities.V1.InsertRestrictions"] || [];

			if (oInsertRestrictions && oInsertRestrictions.NonInsertableNavigationProperties) {
				for (var i = 0; i < oInsertRestrictions.NonInsertableNavigationProperties.length; i++) {
					aProperties.push(oInsertRestrictions.NonInsertableNavigationProperties[i].NavigationPropertyPath);
				}
			}
			return JSON.stringify(aProperties);
		};

		AnnotationHelper.matchesBreadCrumb = function(oInterface, oCandidate, sPath) {
			if (sPath) {
				var aSections = sPath.split("/");
				var oEntitySet, oEntityType, oAssociationEnd;

				if (aSections.length > 0) {
					// there's at least one section left - crate breadcrumbs
					var oMetaModel = oInterface.getInterface(0).getModel();
					var sEntitySet = aSections[0];

					for (var i = 0; i < aSections.length; i++) {
						if (i > 0) {
							oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
							oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
							oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, aSections[i]);
							sEntitySet = oAssociationEnd.entitySet;
						}

						if ((i + 1) === aSections.length) {
							if (sEntitySet === oCandidate.name) {
								return true;
							} else {
								return false;
							}
						}
					}
				}
			}
		};

		// build expression binding for bread crumbs
		AnnotationHelper.buildBreadCrumbExpression = function(oContext, oTitle, oTypeName) {
			var sBinding,
				sBindingTitle = sap.ui.model.odata.AnnotationHelper.format(oContext, oTitle);

			if (oTitle && oTitle.Path && oTypeName && oTypeName.String) {
				var sTypeNameEscaped = oTypeName.String.replace(/'/g, "\\'");
				sBinding = "{= $" + sBindingTitle + " ? $" + sBindingTitle + " : '" + sTypeNameEscaped + "' }";
				return sBinding;
			} else {
				// in case of a complex binding of the title we do not introduce our default text fallback
				if (!sBindingTitle) {
					// string "[[no title]]" should never been shown in UI therefore no transaltion needed
					return oTypeName && oTypeName.String || "[[no title]]";
				}
				return sBindingTitle;
			}
		};

		AnnotationHelper.resolveI18n = function(sText) {
			if (Utils.isEmptyObjectOrString(sText)) {
				return sText;
			}
			var sKey = sText.replace(/[{}\\]/g, "").split(">");
			if (sKey.length > 0 && sKey[0] === "i18n") {
				return I18n.get().resolveText(sKey[1]);
			}
			return I18n.get().resolveText(sText);
		};

		AnnotationHelper.isEntityDeletable = function(oInterface, oEntitySet) {
			var result = "{= ${view>/level} === 1 ? true : !${DisplayMode}}";
			var oModel = oInterface.getModel();
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"] || [];

			if (oDeleteRestrictions && oDeleteRestrictions.Deletable) {
				var oODataProperty = oModel.getODataProperty(oEntitySet, oDeleteRestrictions.Deletable.Path);
				if (oODataProperty && oODataProperty.type === "Edm.Boolean") {
					result = "{= ${view>/level} === 1 ? ${" + oDeleteRestrictions.Deletable.Path + "} : (!${DisplayMode} ? ${" + oDeleteRestrictions.Deletable
						.Path + "} : false) }";
				} else {
					result = "false";
				}
			}
			return result;
		};

		AnnotationHelper.actionControlInline = function(sActionApplicablePath) {
			var oPropertyResolvedPath;
			if (sActionApplicablePath) {
				if (typeof sActionApplicablePath === "boolean") {
					return "{= !${DisplayMode} ? " + sActionApplicablePath + " : false }";
				} else {
					if (sActionApplicablePath && sActionApplicablePath.charAt(0) === '!') {
						sActionApplicablePath = sActionApplicablePath.slice(1);
						oPropertyResolvedPath = "!${" + sActionApplicablePath + "}";
					} else {
						oPropertyResolvedPath = "${" + sActionApplicablePath + "}";
					}
					return "{= !${DisplayMode} ? " + oPropertyResolvedPath + " : false }";
				}
			}
			return "{= !${DisplayMode} }";
		};

		AnnotationHelper.actionControlNotInline = function(sActionApplicablePath) {
			var oPropertyResolvedPath;
			if (sActionApplicablePath) {
				if (typeof sActionApplicablePath === "boolean") {
					return "{= !${DisplayMode} ? " + sActionApplicablePath + " : false }";
				} else {
					if (sActionApplicablePath && sActionApplicablePath.charAt(0) === '!') {
						sActionApplicablePath = sActionApplicablePath.slice(1);
						oPropertyResolvedPath = "!${" + sActionApplicablePath + "}";
					} else {
						oPropertyResolvedPath = "${" + sActionApplicablePath + "}";
					}
					return "{= " + oPropertyResolvedPath + " }";
				}
			}
			return "{= !${DisplayMode} }";
		};

		AnnotationHelper.actionHeaderControl = function(sActionApplicablePath) {
			var oPropertyResolvedPath;
			if (sActionApplicablePath) {
				if (typeof sActionApplicablePath === "boolean") {
					return "{= " + sActionApplicablePath + " }";
				} else {
					if (sActionApplicablePath && sActionApplicablePath.charAt(0) === '!') {
						sActionApplicablePath = sActionApplicablePath.slice(1);
						oPropertyResolvedPath = "!${" + sActionApplicablePath + "}";
					} else {
						oPropertyResolvedPath = "${" + sActionApplicablePath + "}";
					}
					return "{= " + oPropertyResolvedPath + " }";
				}
			}
			return true;
		};

		AnnotationHelper.actionEnabled = function(sActionApplicablePath, sTarget) {
			if (!sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sTarget.AnnotationPath.split("/")[0] + "/" + sActionApplicablePath + "'}";
			}
		};

		AnnotationHelper.toolbarButtonEnabled = function(sActionApplicablePath, sActionActionFor) {
			if (sActionActionFor) {
				return false;
			} else if (!sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sActionApplicablePath + "'}";
			}
		};

		AnnotationHelper.actionLabel = function(oLabel, sTarget) {
			if (oLabel.String) {
				return oLabel.String;
			} else {
				return "{path: '" + sTarget.AnnotationPath.split("/")[0] + "/" + oLabel.Path + "'}";
			}
		};

		AnnotationHelper.actionLabelForText = function(oLabel, sTarget, oUrlIcon) {
			if (oUrlIcon) {
				return "";
			} else if (oLabel.String) {
				return oLabel.String;
			} else {
				return "{path: '" + sTarget.AnnotationPath.split("/")[0] + "/" + oLabel.Path + "'}";
			}
		};

		AnnotationHelper.actionIcon = function(oIconUrl, sTarget) {
			if (oIconUrl && oIconUrl.Path) {
				return oIconUrl.Path;
			} else if (!Utils.isEmptyObjectOrString(sTarget)) {
				return "{path: '" + sTarget.AnnotationPath.split("/")[0] + "/" + oIconUrl.Path + "'}";
			}
		};

		AnnotationHelper.resolveIdentification = function(oInterface, oTarget) {
			var sPath = oInterface.getPath(); // Current path
			var oMetaData = oInterface.getModel();
			var aParentPath = sPath.split('/');
			aParentPath.pop();
			var sParentPath = aParentPath.join('/');
			// oMetaData.getProperty(sParentPath)["com.sap.vocabularies.UI.v1.Identification"];
			return oMetaData.createBindingContext(sParentPath);
		};

		AnnotationHelper.getVisibilityByPropertyPath = function(oProperty, oBindingExpression) {
			if (typeof oProperty === "boolean") {
				return oProperty;
			}
			var sBindingExpResolved = oBindingExpression ? oBindingExpression : "true";
			if (oProperty) {
				// determine if property path a relative (not starting by '/') or absolute (starting by '/')
				if (oProperty.startsWith('/')) {
					// We look into global model property
					return "{= !${DisplayMode} ? (!!${_global>" + oProperty + "} ? " + sBindingExpResolved + " : false) : false }";
				} else {
					// We look into relative binding context
					return "{= !${DisplayMode} ? (${" + oProperty + "} ? " + sBindingExpResolved + " : false) : false }";
				}
			}
			return "{= !${DisplayMode} ? " + sBindingExpResolved + " : false }";
		};

		AnnotationHelper.getStableIdPartFromFacet = function(oFacet) {
			if (oFacet.RecordType && (oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet" || oFacet.RecordType ===
					"com.sap.vocabularies.UI.v1.ReferenceFacet")) {
				if (oFacet.ID && oFacet.ID.String) {
					return oFacet.ID.String;
				} else {
					jQuery.sap.log.error("Annotation Helper: Unable to get stable ID. Please check the facet annotations.");
					return Math.floor((Math.random() * 99999) + 1).toString();
				}
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to get stable ID. Please check the facet annotations.");
				return Math.floor((Math.random() * 99999) + 1).toString();
			}
		};

		AnnotationHelper.containsFormWithBreakoutAction = function(oFacetCandidate, sIdCriterion) {
			var sCandidateId = AnnotationHelper.getStableIdPartFromFacet(oFacetCandidate);
			if (sCandidateId === sIdCriterion) {
				if (oFacetCandidate.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet" &&
					oFacetCandidate.Target &&
					oFacetCandidate.Target.AnnotationPath &&
					oFacetCandidate.Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") != -1) {
					return true;
				}
			}
			return false;
		};

		AnnotationHelper.getEntityCreatable = function(oInsertRestrictions) {
			return oInsertRestrictions === undefined || oInsertRestrictions.Insertable === undefined || oInsertRestrictions.Insertable.Bool;
		};

		AnnotationHelper.getDataFieldForActionId = function(oAction, oCriticality, oVariant) {
			if (oVariant) {
				return "Variant::" + oVariant.key + "ToolBarButton::" + oAction.name + "::" + oAction.entitySet + "::" + (oCriticality ?
					oCriticality
					.EnumMember.split('/').pop() :
					'Default') + "::" + (oAction["sap:action-for"] ? 'DataFieldForActionButton' : 'DataFieldActionButton');
			} else {
				return "ToolBarButton::" + oAction.name + "::" + oAction.entitySet + "::" + (oCriticality ? oCriticality.EnumMember.split('/').pop() :
					'Default') + "::" + (oAction["sap:action-for"] ? 'DataFieldForActionButton' : 'DataFieldActionButton');
			}
		};

		AnnotationHelper.getOverrideButtonVisibility = function(sId, oOverrideButtons) {
			if (oOverrideButtons) {
				for (var oButton in oOverrideButtons) {
					if (oOverrideButtons.hasOwnProperty(oButton)) {
						if (oOverrideButtons[oButton].id === sId) {
							return oOverrideButtons[oButton].visible;
						}
					}
				}

			}
			return true;
		};

		AnnotationHelper.getVariantKey = function(oVariant) {
			if (oVariant) {
				return oVariant.key;
			}
			return "NoVariant";
		};

		AnnotationHelper.getPresentationVariantVisualisation = function(oEntityType, sVariantAnnotationPath, oFacetAnnotationPath) {
			if (sVariantAnnotationPath) {
				var oVariant = oEntityType[sVariantAnnotationPath];
				if (oVariant) {
					if (oVariant.Visualizations) {
						return oVariant.Visualizations[0].AnnotationPath.split('#')[1];
					}
				}
			}
			return oFacetAnnotationPath.split('#')[1];
		};

		AnnotationHelper.getSegmentedId = function(oSetting) {
			return "detailPage::multipleViews::" + oSetting.referenceFacetId;
		};

		AnnotationHelper.getIconTabBarSelectedKey = function(oSetting) {
			if (oSetting && oSetting.quickVariantSelection && oSetting.quickVariantSelection.selectField) {
				var sSelectField = oSetting.quickVariantSelection.selectField;
				var aFormulas = [];
				for (var i in oSetting.quickVariantSelection.variants) {
					var oVariant = oSetting.quickVariantSelection.variants[i];

					aFormulas.push("${" + sSelectField + "} === '" + oVariant.selectValue + "' ? '" + oVariant.key + "' : ");

				}

				var sFormula = "{= " + aFormulas.join("") + " '' }";
				return sFormula;
			}
		};

		AnnotationHelper.hasQuickSelectionVariant = function(oFacet, oSettings) {
			if (oSettings) {
				var facetId = (oFacet.ID && oFacet.ID.String) ? oFacet.ID.String : undefined;
				for (var i = 0; i < oSettings.length; i++) {
					if (facetId && oSettings[i].referenceFacetId && oSettings[i].referenceFacetId === facetId) {
						return true;
					}
				}
			}
			return false;
		};

		AnnotationHelper.isCurrentSection = function(oFacet, oSetting) {
			if (oSetting) {
				var facetId = (oFacet.ID && oFacet.ID.String) ? oFacet.ID.String : undefined;
				if (facetId && oSetting.referenceFacetId) {
					return oSetting.referenceFacetId === facetId;
				}
			}
			return false;
		};

		AnnotationHelper.hasLineItemQualifier = function(oFacetAnnotationPath, sVariantAnnotationPath) {
			return sVariantAnnotationPath || oFacetAnnotationPath.split('#')[1];
		};

		AnnotationHelper.getEnabledIconTab = function(oPropertyPath) {
			if (oPropertyPath != undefined) {
				var oPropertyResolvedPath;
				if (typeof oEnabledPath === "boolean") {
					return "{= !${DisplayMode} ? " + oPropertyPath + " : false }";
				} else {
					if (oPropertyPath && oPropertyPath.charAt(0) === '!') {
						oPropertyPath = oPropertyPath.slice(1);
						oPropertyResolvedPath = "!${" + oPropertyPath + "}";
					} else {
						oPropertyResolvedPath = "${" + oPropertyPath + "}";
					}
					return "{= !${DisplayMode} ? " + oPropertyResolvedPath + " : false }";
				}
			} else {
				return "{= !${DisplayMode} }";
			}
		};

		AnnotationHelper.getEnabledMode = function(oEntityType, oDataField) {
			var sDataFieldFc;
			var sDataField = oDataField.Value.Path;
			oEntityType.property.forEach(function(oProperty) {
				if (oProperty.name == sDataField) {
					sDataFieldFc = oProperty["com.sap.vocabularies.Common.v1.FieldControl"].Path;
				}
			});

			return "{= !${DisplayMode} ? ${" + sDataFieldFc + "} > 1 : false }";
		};

		AnnotationHelper.getNoDataText = function(oEntitySet) {
			if (oEntitySet && oEntitySet["sap:searchable"]) {
				// You can add here your custom label for filterable entities
			} else {
				return AnnotationHelper.resolveI18n("NO_ITEMS_FOUND");
			}
		};

		AnnotationHelper.resolveBoolean = function(oProperty) {
			var bValue = false; // default is false
			if (typeof oProperty === "boolean") { // oProperty is boolean
				bValue = oProperty;
			} else if (typeof oProperty === "string") { // oProperty is string
				if (oProperty === "X" || oProperty === "") { // oProperty value 'X' or ''
					bValue = oProperty === "X";
				} else if (oProperty.toLowerCase() === "true" || oProperty.toLowerCase() === "false") { // oProperty value 'true' or 'false'
					bValue = oProperty.toLowerCase() === "true";
				} else { // oProperty is considered as a property
					bValue = "{= ${" + oProperty + "} }";
				}
			}
			return bValue;
		};

		AnnotationHelper.isSelectionFieldCandidate = function(oContext, oDataField) {
			if (oContext && oContext.length > 0) {
				for (var i = 0; i < oContext.length; i++) {
					if (oContext[i] && oContext[i].PropertyPath === oDataField.PropertyPath) {
						return true;
					}
				}
			}
			return false;
		};

		AnnotationHelper.getColumnListItemStableId = function(oEntityType, oDataField) {
			return oEntityType.name + "::ColumnListItem::" + oDataField.Value.Path;
		};

		AnnotationHelper.isContactJobTitleAvailable = function(oInterface, oEntitySet) {
			var oEntityType;
			var oMetaModel = oInterface && oInterface.getModel && oInterface.getModel();
			if (!oMetaModel) {
				// called with entity set therefore use the correct interface
				oInterface = oInterface.getInterface(0);
				oMetaModel = oInterface.getModel();
			}
			// We have to keep model name space to get contact entity type name.
			var aEntityType = oEntitySet.entityType.split('.');
			aEntityType.pop();
			aEntityType.push("Contact");
			var sEntityTypeName = aEntityType.join('.');
			oEntityType = oMetaModel.getODataEntityType(sEntityTypeName);
			if (oEntityType) {
				var aTitleProp = jQuery.grep(oEntityType.property, function(oField) {
					return oField.name === "Title";
				});
				return aTitleProp.length == 1;
			}
			return false;
		};

		AnnotationHelper.isContactJobTitleAvailable.requiresIContext = true;
		AnnotationHelper.matchesBreadCrumb.requiresIContext = true;
		AnnotationHelper.buildBreadCrumbExpression.requiresIContext = true;
		AnnotationHelper
			.getEntityTypesForFormPersonalization.requiresIContext = true;
		AnnotationHelper.formatWithExpand.requiresIContext = true;
		AnnotationHelper
			.formatWithExpandSimpleWithDefault.requiresIContext = true;
		AnnotationHelper.getNavigationPathWithExpand.requiresIContext = true;
		AnnotationHelper
			.formatWithExpandSimple.requiresIContext = true;
		AnnotationHelper.getSourceEntitySearchNavigationCreatableVisibility.requiresIContext =
			true;
		AnnotationHelper.getSourceEntityNavigationCreatableVisibility.requiresIContext = true;
		AnnotationHelper.isSourceEntitySearchNavigationCreatable
			.requiresIContext = true;
		AnnotationHelper.isSourceEntityNavigationCreatable.requiresIContext = true;
		AnnotationHelper.getSourceEntityCreatableVisibility
			.requiresIContext = true;
		AnnotationHelper.getTargetEntitySettings.requiresIContext = true;
		AnnotationHelper.getTargetEntityProperties.requiresIContext =
			true;
		AnnotationHelper.createP13NColumnForAction.requiresIContext = true;
		AnnotationHelper.createP13N.requiresIContext = true;
		AnnotationHelper
			.isEntityDeletable.requiresIContext = true;
		AnnotationHelper.getKeyItem.requiresIContext = true;
		AnnotationHelper.getDescriptionItem.requiresIContext =
			true;
		AnnotationHelper.resolveIdentification.requiresIContext = true;

		return AnnotationHelper;
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/AnnotationHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.AppDescriptorUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.AppDescriptorUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/AppDescriptorUtil", [
		"sap/fin/travel/lib/reuse/util/Utils"
	], function(Utils) {
		"use strict";

		function getMethods() {

			/**
			 * Deeply merge (recurisively and property by property) a list of JSON format object into one single object and return it .
			 * This method is used to merge parent application descriptors file with the extended one.
			 * 
			 * @param {Array} Args array of descritor file (JSON format) to be merge.
			 * @return {object} prev an object in JSON format.
			 **/
			function fnMergeDescriptors() {
				var aArgs = Array.prototype.slice.call(arguments, 0);

				return aArgs.reduce(function(prev, obj) {
					if (prev == undefined) {
						return obj;
					}
					if (obj == undefined) {
						return prev;
					}
					Object.keys(obj).forEach(function(key) {
						var pVal = prev[key];
						var oVal = obj[key];

						if (Utils.isOfTypes([pVal, oVal], [Utils.TypesUtil.OBJECT])) {
							prev[key] = fnMergeDescriptors(pVal, oVal);
						} else {
							prev[key] = oVal;
						}
					});
					return prev;
				});
			}

			/**
			 * Override parent application descriptor controller entries with value of extended application descriptor file.
			 * 
			 * @param {object} oAppDescriptor application descriptor file of the extended application
			 * @return {object} new application descriptor file.
			 **/
			function fnOverrideControllers(oAppDescriptor) {
				var sListPage, oListPage, sDetailPage, oDetailPage;
				Object.keys(oAppDescriptor).forEach(function(key) {
					var oVal = oAppDescriptor[key];
					if (key.indexOf("controller.ListPageExtension") != -1) {
						sListPage = key;
						oListPage = oAppDescriptor[key];
					}
					if (key.indexOf("controller.DetailPageExtension") != -1) {
						sDetailPage = key;
						oDetailPage = oAppDescriptor[key];
					}
					if (Utils.isOfTypes([oVal], [Utils.TypesUtil.OBJECT])) {
						fnOverrideControllers(oVal);
					}
				});

				if (sListPage != undefined && !Utils.isEmptyObjectOrString(sListPage)) {
					if (sListPage !== oListPage.controllerName) {
						// Controller has been overrided. Overrided controller name has to be propagated to ensure multiple controler extension
						oListPage.controllerNames = [sListPage];
					}
					oAppDescriptor["sap.fin.travel.lib.reuse.ListPage.controller.ListPage"] = oListPage;
					delete oAppDescriptor[sListPage];
				}
				if (sDetailPage != undefined && !Utils.isEmptyObjectOrString(sDetailPage)) {
					if (sDetailPage !== oDetailPage.controllerName) {
						// Controller has been overrided. Overrided controller name has to be propagated to ensure multiple controler extension
						oDetailPage.controllerNames = [sDetailPage];
					}
					oAppDescriptor["sap.fin.travel.lib.reuse.DetailPage.controller.DetailPage"] = oDetailPage;
					delete oAppDescriptor[sDetailPage];
				}
			}

			function fnGetFeature(oAppDescriptor, sFeatureName) {
				var oFeature;
				if (oAppDescriptor && oAppDescriptor.hasOwnProperty("settings") && oAppDescriptor.settings.hasOwnProperty("fin.travel.lib.reuse")) {
					oFeature = oAppDescriptor.settings["fin.travel.lib.reuse"][sFeatureName];
				}
				return oFeature;
			}

			function fnPrepareExtensionAfterFacets(oExtensions) {
				var oExtensionAfterFacets = [];
				if (oExtensions && oExtensions.hasOwnProperty("sap.ui5") && oExtensions["sap.ui5"].hasOwnProperty("extends") && oExtensions["sap.ui5"]
					["extends"].hasOwnProperty("extensions") && oExtensions["sap.ui5"]["extends"]["extensions"].hasOwnProperty("sap.ui.viewExtensions") &&
					oExtensions["sap.ui5"]["extends"]["extensions"]["sap.ui.viewExtensions"].hasOwnProperty(
						"sap.fin.travel.lib.reuse.DetailPage.view.fragments.Sections")) {
					var oSectionExtensions = oExtensions["sap.ui5"]["extends"]["extensions"]["sap.ui.viewExtensions"][
						"sap.fin.travel.lib.reuse.DetailPage.view.fragments.Sections"
					];
					for (var extension in oSectionExtensions) {
						if (extension.startsWith("AfterFacet")) {
							oExtensionAfterFacets.push({
								name: extension,
								facet: oSectionExtensions[extension],
								stableId: extension.replace(/\|/g, '::')
							});
						}
					}
				}
				return oExtensionAfterFacets;
			}

			return {
				mergeDescriptors: fnMergeDescriptors,
				overrideControllers: fnOverrideControllers,
				getFeature: fnGetFeature,
				prepareAfterFacet: fnPrepareExtensionAfterFacets
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/AppDescriptorUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.FormatHandler')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.FormatHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/FormatHandler", [
			"sap/ui/base/Object",
			"sap/fin/travel/lib/reuse/util/i18n",
			"sap/ui/core/MessageType",
			"sap/fin/travel/lib/reuse/util/Utils"
		],
		function(BaseObject, I18n, MessageType, Utils) {
			"use strict";

			function formatCriticality(iCiticality) {
				if (iCiticality) {
					switch (iCiticality) {
						case 1:
							return MessageType.Error;
						case 2:
							return MessageType.Warning;
						default:
							return MessageType.None;
					}
				}
				return MessageType.None;
			}

			function formatDraftLinkType(DraftLinkType) {
				if (DraftLinkType && !Utils.isEmptyObjectOrString(DraftLinkType)) {
					return DraftLinkType;
				} else {
					return "Draft"; // Default value - cannot be initial
				}
			}

			function getMethods(oController) {
				function formatText() {
					var aArgs = Array.prototype.slice.call(arguments, 1);
					var sKey = arguments[0];
					if (!sKey) {
						return "";
					} else {
						return I18n.get().getText(oController, sKey, aArgs[0]);
					}
				}

				function formatDraftLockText(DraftLinkType) {
					if (DraftLinkType === "Draft") {
						return I18n.get().getText(oController, "DRAFT_OBJECT");
					} else {
						return I18n.get().getText(oController, "UNSAVED_CHANGES");
					}
				}

				return {
					formatDraftLinkType: formatDraftLinkType,
					formatText: formatText,
					formatDraftLockText: formatDraftLockText,
					formatCriticality: formatCriticality
				};
			}

			return BaseObject.extend("sap.fin.travel.lib.reuse.util.FormatHandler", {
				constructor: function(oController) {
					jQuery.extend(this, getMethods(oController));
				}
			});

		});
}; // end of sap/fin/travel/lib/reuse/util/FormatHandler.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.FragmentHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.FragmentHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
	jQuery.sap.require('sap.m.MessageStrip'); // unlisted dependency retained
	jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
	jQuery.sap.require('sap.m.DialogType'); // unlisted dependency retained
	jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
	jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
	jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
	jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
	jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
	jQuery.sap.require('sap.m.List'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.Fragment'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/FragmentHelper", [
		"sap/fin/travel/lib/reuse/util/i18n",
		"sap/ui/model/json/JSONModel",
		"sap/ui/layout/VerticalLayout",
		"sap/m/MessageStrip",
		"sap/m/Dialog",
		"sap/m/DialogType",
		"sap/m/Text",
		"sap/m/Button",
		"sap/ui/core/MessageType",
		"sap/m/VBox",
		"sap/m/MessageBox",
		"sap/m/FlexBox",
		"sap/fin/travel/lib/reuse/util/TravelUtil",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/m/List",
		"sap/ui/core/Fragment"
	], function(I18n, JSONModel, VerticalLayout, MessageStrip, Dialog, DialogType, Text, Button, MessageType, VBox, MessageBox, FlexBox,
		TravelUtil, Utils, List, Fragment) {
		"use strict";

		var _oInstance;
		var mFragments;

		function createInstance() {
			mFragments = new Map([]);

			function _getCompactModeStyleClass(oController) {
				if (oController.getView().$().closest(".sapUiSizeCompact").length) {
					return "sapUiSizeCompact";
				}
				return "";
			}

			function fnGetFunctionImportDialog(oContext, mSettings) {
				var oVerticalLayout = {};
				var oDraftMessage;
				var oMessageModel = {
					message: []
				};
				var oDialogController = oContext.controller;
				if (!Utils.isEmptyObjectOrString(mSettings.draftTripNo)) {
					oDraftMessage = {
						text: mSettings.draftTripNo ? (TravelUtil.TripNumber.Initial === mSettings.draftTripNo ? I18n.get().getText(
							"DRAFT_WARNING_UNKNOWN", mSettings.draftTripNo) : I18n.get().getText("DRAFT_WARNING", mSettings.draftTripNo)) : "",
						type: mSettings.draftTripNo ? MessageType.Warning : MessageType.None,
						showCloseButton: false
					};
					oMessageModel.message.push(oDraftMessage);
				}
				var oMessageList = new List({});
				oMessageList.bindItems({
					path: "MessageModel>/message",
					template: new sap.m.CustomListItem({
						content: new sap.m.MessageStrip({
							type: "{MessageModel>type}",
							text: "{MessageModel>text}",
							showCloseButton: "{MessageModel>showCloseButton}",
							showIcon: true
						})
					})
				});
				oVerticalLayout = new VerticalLayout({
					width: "100%",
					visible: "{= ${MessageModel>/message}.length > 0}",
					content: [
						oMessageList
					]
				}).addStyleClass("sapUiContentPadding");
				var oParameterDialog = new Dialog({
					contentWidth: "25rem",
					title: mSettings.label,
					content: [
						oVerticalLayout,
						mSettings.parameter.form
					],
					beginButton: new Button({
						text: mSettings.label,
						type: "Emphasized",
						press: function(oEvent) {
							if (mSettings.parameter.getEmptyMandatoryFields().length == 0 && mSettings.parameter.getEmptyMandatoryValueHelpFields().length ==
								0 && mSettings.parameter.checkValuesValidityFields() == 0) {
								mSettings.success.apply(oParameterDialog, [mSettings.successArg]);
							} else {
								var aFieldAlreadyHandled = [];
								var aMessage = [];
								var sRootMessage = I18n.get().getText("MANDATORY_FIELD_ERROR");
								var sValueListMessage = I18n.get().getText("MANDATORY_VALUE_LIST_FIELD_ERROR");
								oParameterDialog.getModel("MessageModel").setProperty("/message", []);
								if (oDraftMessage) {
									aMessage.push(oDraftMessage);
								}

								for (var i = 0; i < mSettings.parameter.getEmptyMandatoryFields().length; i++) {
									var oField = mSettings.parameter.getEmptyMandatoryFields()[i];
									var sText = jQuery.sap.formatMessage(sRootMessage, oField.getTextLabel());
									aMessage.push({
										text: sText,
										type: MessageType.Error,
										showCloseButton: true
									});
									aFieldAlreadyHandled.push(oField.getTextLabel());
								}

								for (var i = 0; i < mSettings.parameter.getEmptyMandatoryValueHelpFields().length; i++) {
									var oField = mSettings.parameter.getEmptyMandatoryValueHelpFields()[i];
									if (aFieldAlreadyHandled.indexOf(oField.getTextLabel()) === -1) {
										var sText = jQuery.sap.formatMessage(sValueListMessage, oField.getTextLabel());
										aMessage.push({
											text: sText,
											type: MessageType.Error,
											showCloseButton: true
										});
										aFieldAlreadyHandled.push(oField.getTextLabel());
									}
								}

								for (var i = 0; i < mSettings.parameter.checkValuesValidityFields().length; i++) {
									var sFieldId = mSettings.parameter.checkValuesValidityFields()[i];
									var oField = sap.ui.getCore().byId(sFieldId);
									if (oField) {
										if (aFieldAlreadyHandled.indexOf(oField.getTextLabel()) === -1) {
											var sText = jQuery.sap.formatMessage(sValueListMessage, oField.getTextLabel());
											aMessage.push({
												text: sText,
												type: MessageType.Error,
												showCloseButton: true
											});
											aFieldAlreadyHandled.push(oField.getTextLabel());
										}
									}
								}

								if (aMessage.length > 0) {
									oParameterDialog.getModel("MessageModel").setProperty("/message", aMessage);
								}
							}
						}
					}),
					endButton: new Button({
						text: I18n.get().getText("CANCEL_BUTTON"),
						press: function() {
							oParameterDialog.close();
							mSettings.close.apply(null);
						}
					}),
					afterClose: function(oControlEvent) {
						oParameterDialog.destroy();
					}
				}).addStyleClass("sapUiNoContentPadding").addStyleClass(_getCompactModeStyleClass(oDialogController));
				oParameterDialog.setModel(new JSONModel(oMessageModel), "MessageModel");
				return oParameterDialog;
			}

			function fnGetUnsavedDialog(oController, sFragmentID, sTripNo, sPernr) {
				if (!oController.oDiscardUnSavedDialog) {
					oController.oDiscardUnSavedDialog = this.getFragment({
						id: sFragmentID,
						name: "sap.fin.travel.lib.reuse.view.fragments.UnsavedChangesDialog",
						controller: oController,
						models: {
							i18n: oController.getView().getModel("i18n")
						}
					});

					oController.oDiscardUnSavedDialog.setModel(oController.getView().getModel());
				}

				return new Promise(function(resolve) {
					sap.ui.core.Fragment.byId(sFragmentID, "unsavedChangesEditButton").attachPress(function() {
						oController.oDiscardUnSavedDialog.close();
						resolve();
					});
					sap.ui.core.Fragment.byId(sFragmentID, "unsavedChangesCancelButton").attachPress(function() {
						oController.oDiscardUnSavedDialog.close();
					});

					oController.oDiscardUnSavedDialog.setModel(new JSONModel({
						"unsavedChangesQuestion": I18n.get().getText(oController, "DRAFT_LOCKED_BY_USER", [sTripNo, sPernr])
					}), "Dialog");

					oController.oDiscardUnSavedDialog.open();
				});
			}

			/**
			 * Get Fragment
			 *
			 * @parameter{object} mSettings: map of {name, id, controller, models }. If the name is not provided, we return undefined
			 * @deprecated since 1.58, use {@link sap.ui.core.Fragment.load} instead
			 * @return undefined if mSettings.name is not provided.
			 */
			function fnGetFragment(sId) {
				if (typeof sId !== "string") {
					jQuery.sap.log.info("@deprecated since 1.58, use {@link sap.fin.travel.lib.reuse.util.Fragment.loadFragment} instead");
					var mSettings = sId;
					if (!mFragments.has(mSettings.id)) {
						if (mSettings && mSettings.hasOwnProperty("name")) {
							var oFragment = sap.ui.xmlfragment(mSettings.id, mSettings.name, mSettings.controller);
							if (mSettings.hasOwnProperty("models")) {
								for (var model in mSettings.models) {
									oFragment.setModel(mSettings.models[model], model.toString());
								}
							}
							mFragments.set(mSettings.id, oFragment);
						} else {
							return undefined;
						}
					}
					return mFragments.get(mSettings.id);
				}
				return mFragments.get(sId);
			}

			/**
			 * Get Fragment
			 *
			 * @parameter{object} mSettings: map of {name, id, controller, models }. If the name is not provided, we return undefined
			 * @return undefined if mSettings.name is not provided.
			 */
			function fnLoadFragment(mSettings) {
				return new Promise(function(resolve) {
					var fnAddAndReturn = function(fragmentMap, fragment, settings) {
						if (settings && settings.hasOwnProperty("models")) {
							for (var model in settings.models) {
								fragment.setModel(settings.models[model], model.toString());
							}
						}
						fragmentMap.set(settings.id, fragment);
						// Fragment loaded, resolve
						resolve(fragmentMap.get(mSettings.id));
					};
					if (mSettings && mSettings.hasOwnProperty("name") && !mFragments.has(mSettings.id)) {
						var oNewFragment;
						// @deprecated since 1.58, use {@link sap.ui.core.Fragment.load} instead
						if (Fragment && typeof Fragment.load === "function") {
							Fragment.load(mSettings).then(function(oFrament) {
								fnAddAndReturn(mFragments, oFrament, mSettings);
							});
						} else {
							fnAddAndReturn(mFragments, sap.ui.xmlfragment(mSettings.id, mSettings.name, mSettings.controller), mSettings);
						}
					} else {
						// Fragment already loaded, resolve
						resolve(mFragments.get(mSettings.id));
					}
				});
			}

			function fnDestroyAll() {
				mFragments.forEach(function(value, key, map) {
					if (value.destroy) {
						value.destroy();
					}
				});
			}

			function fnDestroy(sFragmentId) {
				mFragments.forEach(function(value, key, map) {
					if (key === sFragmentId && value.destroy) {
						value.destroy();
					}
				});
				mFragments.delete(sFragmentId);
			}

			function fnConfirmationDialog(mSettings) {
				var sCustomMessageKey = "ACTION_CONFIRM|" + mSettings.name; // Key for i18n in application for custom message
				var sMsgBoxText = I18n.get().hasText(mSettings.controller, sCustomMessageKey) ? I18n.get().getText(mSettings.controller,
						sCustomMessageKey) :
					I18n.get().getText(mSettings.controller, "ACTION_CONFIRM", [mSettings.label]);

				MessageBox.confirm(sMsgBoxText, {
					title: mSettings.label,
					onClose: function(oAction) {
						if (oAction === "OK") {
							if (mSettings.success && typeof mSettings.success === "function") {
								mSettings.success.apply(null, arguments);
							}
						} else if (oAction === "CANCEL") {
							if (mSettings.error && typeof mSettings.error === "function") {
								mSettings.error.apply(null, arguments);
							}
						}
					}
				});
			}

			return {
				getFunctionImportDialog: fnGetFunctionImportDialog,
				getUnsavedDialog: fnGetUnsavedDialog,
				getFragment: fnGetFragment,
				loadFragment: fnLoadFragment,
				destroyAll: fnDestroyAll,
				destroy: fnDestroy,
				confirmationDialog: fnConfirmationDialog
			};
		}

		return {
			get: function() {
				if (!_oInstance) {
					_oInstance = createInstance();
				}
				return _oInstance;
			},

			destroy: function() {
				if (_oInstance) {
					_oInstance.destroyAll();
					_oInstance = null;
				}
			}

		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/FragmentHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.ShellUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.ShellUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/ShellUtil", [
		"sap/fin/travel/lib/reuse/util/formatters",
		"sap/fin/travel/lib/reuse/util/i18n"
	], function(Formatters, I18n) {
		"use strict";

		var _oInstance;

		function createInstance(oAppComponent) {

			function fnSetHierarchy(oComponent) {
				var sLocation = location.hash;
				var currentHierarchy = oAppComponent.getGlobalModel().getProperty("/hierarchy/main").reverse();
				var oHierarchy = {
					title: oComponent.oComponentData.oShell && I18n.get().resolveText(oComponent.oComponentData.oShell.headerTitle),
					icon: oComponent.oComponentData.oShell && oComponent.oComponentData.oShell.typeImageUrl,
					subtitle: "",
					intent: sLocation
				};

				if (oComponent.getModel("view").getProperty("/level") > currentHierarchy.length) {
					currentHierarchy.push(oHierarchy);
				} else if (oComponent.getModel("view").getProperty("/level") < currentHierarchy.length) {
					currentHierarchy.pop();
				} else {
					currentHierarchy.pop();
					currentHierarchy.push(oHierarchy);
				}
				for (var i = 0; i < currentHierarchy.length; i++) {
					var aLocation = sLocation.split("/");
					var aIntent = aLocation.slice(0, aLocation.length - (oComponent.getModel("view").getProperty("/level") - (i + 1)));
					currentHierarchy[i].intent = decodeURI(aIntent.join("/"));
				}
				currentHierarchy = currentHierarchy.reverse();
				oAppComponent.getShellService().then(function(oService) {
					if (oService) {
						oService.setHierarchy(oAppComponent.getGlobalModel().getProperty("/hierarchy/main").concat(oAppComponent.getGlobalModel().getProperty(
							"/hierarchy/app")));
					}
				});
			}

			function fnClearHierarchy() {
				oAppComponent.getGlobalModel().setProperty("/hierarchy/main", []);
				oAppComponent.getShellService().then(function(oService) {
					if (oService) {
						oService.setHierarchy([]);
						oService.setTitle(I18n.get().resolveText(oAppComponent.getGlobalModel().getProperty("/share/appTitle")));
					}
				});
			}

			function fnSetTitle(oComponent, bIsFullScreen) {
				oAppComponent.getShellService().then(function(oService) {
					if (oService) {
						oService.setTitle(bIsFullScreen ? I18n.get().resolveText(oComponent.oComponentData.oShell.headerTitle) : I18n.get().resolveText(
							oAppComponent.getGlobalModel()
							.getProperty("/share/appTitle")));
					}
				});
			}

			function fnClearShell() {
				fnClearHierarchy();
			}

			return {
				setHierarchy: fnSetHierarchy,
				clearHierarchy: fnClearHierarchy,
				clearShell: fnClearShell,
				setTitle: fnSetTitle
			};
		}

		return {
			// variables
			get: function() {
				if (!_oInstance) {
					throw new Error("ShellUtil has not been initialized yet.");
				}
				return _oInstance;
			},

			/*
			 * Init the ShellUtil according to the giving AppComponent.
			 * One and only one instance shall be created.
			 */
			init: function(oAppComponent) {
				if (_oInstance) {
					this.destroy();
				}
				_oInstance = createInstance(oAppComponent);
			},

			destroy: function() {
				_oInstance = null;
			}

		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/ShellUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.StableIdHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.StableIdHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/StableIdHelper", [
		"sap/fin/travel/lib/reuse/util/StableIdDefinition",
		"sap/fin/travel/lib/reuse/util/AnnotationHelper"
	], function(StableIdDefinition, AnnotationHelper) {
		"use strict";

		function preparePathForStableId(oContext) {
			var aParameter = oContext.getProperty("/stableId/aParameter");
			var oParameter = {
				buildStableId: function(oInput) {
					oParameter.id = getStableId(oInput);
				},
				buildFacetId: function(oFacet) {
					// special logic to build id for Facet in the old way
					// preliminary - to be replaced...
					oParameter.id = AnnotationHelper.getStableIdPartFromFacet(oFacet);
				}
			};
			aParameter.push(oParameter);
			return "/stableId/aParameter/" + (aParameter.length - 1);
		}

		function replaceSpecialCharsForLegacyIds(sLegacyId) {
			return sLegacyId.replace(/@/g, "").replace(/[\/#]/g, "::");
		}

		function getLegacyStableId(oParameters) {
			// optional and mandatory parameters can be treated identical - value function has to differetiate
			if (typeof StableIdDefinition.types[oParameters.type][oParameters.subType].value !== "function") {
				return StableIdDefinition.types[oParameters.type][oParameters.subType].value;
			} else {
				var aMandatoryParameters = StableIdDefinition.types[oParameters.type][oParameters.subType].parameters || [];
				var aOptionalParameters = StableIdDefinition.types[oParameters.type][oParameters.subType].optionalParameters || [];
				var aAllParameters = aMandatoryParameters.concat(aOptionalParameters);
				var oValueFunctionParams = {};
				StableIdDefinition.parameters.forEach(function(sParameter) {
					if (aAllParameters.indexOf(sParameter) > -1) {
						oValueFunctionParams[sParameter] = oParameters[sParameter];
					}
				});
				return replaceSpecialCharsForLegacyIds(StableIdDefinition.types[oParameters.type][oParameters.subType].value(oValueFunctionParams));
			}
		}

		function escapeIdParameter(sParam) {
			/* escape all characters not allowed in stable ids with :<hexcode>
			 * as we use : as escape character, also escape :
			 */
			return sParam.replace(/[^A-Za-z0-9_.-]/g, function(c) {
				var sCode = c.charCodeAt(0).toString(16);
				return ":" + (sCode.lenght === 1 ? "0" : "") + sCode;
			});
		}

		function getStableId(oParameters) {
			if (!oParameters.type) {
				throw "error";
			}
			if (!oParameters.subType) {
				throw "error";
			}
			if (!StableIdDefinition.types[oParameters.type]) {
				throw "error";
			}
			if (!StableIdDefinition.types[oParameters.type][oParameters.subType]) {
				throw "error";
			}
			// build legacy stable id
			if (StableIdDefinition.types[oParameters.type][oParameters.subType].value) {
				return getLegacyStableId(oParameters);
			}
			// build standard stable id
			if (StableIdDefinition.types[oParameters.type][oParameters.subType].parameters) {
				StableIdDefinition.types[oParameters.type][oParameters.subType].parameters.forEach(function(sParameter) {
					if (!oParameters[sParameter]) {
						throw "error";
					} // for standard ids all parameters must be provided
				});
			}
			var sStableId = "template:::" + oParameters.type + ":::" + oParameters.subType;
			// add parameters - order is defined according to oStableIdDefinition.parameters
			var aMandatoryParameters = StableIdDefinition.types[oParameters.type][oParameters.subType].parameters || [];
			var aOptionalParameters = StableIdDefinition.types[oParameters.type][oParameters.subType].optionalParameters || [];
			var aAllParameters = aMandatoryParameters.concat(aOptionalParameters);
			StableIdDefinition.parameters.forEach(function(sParameter) {
				if (aAllParameters.indexOf(sParameter) > -1 && oParameters[sParameter]) {
					sStableId += ":::" + sParameter + "::" + escapeIdParameter(oParameters[sParameter]);
				}
			});
			return sStableId;
		}

		return {
			preparePathForStableId: preparePathForStableId,
			getStableId: getStableId
		};
	}, /* bExport= */ true);

}; // end of sap/fin/travel/lib/reuse/util/StableIdHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.FCLayoutUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.FCLayoutUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.f.FlexibleColumnLayoutSemanticHelper'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/FCLayoutUtil", [
		"sap/f/FlexibleColumnLayoutSemanticHelper",
		"sap/fin/travel/lib/reuse/util/formatters",
		"sap/fin/travel/lib/reuse/util/ShellUtil",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/CustomDataUtil"
	], function(FlexibleColumnLayoutSemanticHelper, Formatters, ShellUtil, Utils, CustomDataUtil) {
		"use strict";

		var _oInstance;

		var layout = {
			beginColumn: {
				level: 0,
				layout: "OneColumn"
			},
			midColumn: {
				level: 1,
				layout: "TwoColumnsMidExpanded",
				fullLayout: "MidColumnFullScreen"
			},
			endColumn: {
				level: 2,
				layout: "EndColumnFullScreen",
				fullLayout: "EndColumnFullScreen"
			},
			deeperColumn: {
				level: 3,
				layout: "EndColumnFullScreen"
			}
		};

		function createInstance(oFCL, oAppComponent, oAppSettings) {
			var oFCLayout = oFCL;
			layout.endColumn.layout = oAppSettings.settings.flexibleColumnLayout.defaultThreeColumnLayoutType;
			for (var listEntry in oAppSettings.pages) {
				_handleAppSettings(oAppSettings.pages[listEntry].pages, 1);
			}

			var oFCLayoutHelper = FlexibleColumnLayoutSemanticHelper.getInstanceFor(oFCLayout, {
				defaultTwoColumnLayoutType: oAppSettings.settings.flexibleColumnLayout.defaultTwoColumnLayoutType,
				defaultThreeColumnLayoutType: oAppSettings.settings.flexibleColumnLayout.defaultThreeColumnLayoutType
			});

			/**
			 * Looking into application pages settings, check if columnLayout property has been defined and create the corresponding entry in layout object.
			 * 
			 * For exemple: 
			 * In extended Travel Expense project you can define:
			 * "pages": {
			 *		"ObjectPage|CostAssignments": {
			 *			"navigationProperty": "CostAssignments",
			 *			"entitySet": "CostAssignments",
			 *			"routingSpec": {
			 *				"routeName": "#CostAssignments",
			 *				"headerTitle": "COST_ASSIGNMENT",
			 *				"typeImageUrl": "sap-icon://circle-task-2"
			 *			},
			 *			"component": {
			 *				"name": "sap.fin.travel.lib.reuse.DetailPage",
			 *				"settings": {
			 *					"allowDeepLinking": true,
			 *					"columnLayout": "ThreeColumnsMidExpanded"
			 *				}
			 *			}
			 *		}
			 *	}
			 * Then in layout, new entry will be added:
			 * TravelExpenses.CostAssignments: {
			 *		level: 2,
			 *		layout: "ThreeColumnsMidExpanded",
			 *		fullLayout: "EndColumnFullScreen"
			 * }
			 * 
			 **/
			function _handleAppSettings(oAppPagesSettings, level, sEntry) {
				for (var prop in oAppPagesSettings) {
					var sKey = prop.split("|").pop();
					var newEntry = sEntry != undefined ? sEntry + "." + sKey : sKey;
					if (oAppPagesSettings[prop].hasOwnProperty("component") && oAppPagesSettings[prop].component.hasOwnProperty("settings") &&
						oAppPagesSettings[prop].component.settings.hasOwnProperty("columnLayout") && level == layout.endColumn.level) {
						layout[newEntry] = {
							level: level,
							fullLayout: "EndColumnFullScreen",
							layout: oAppPagesSettings[prop].component.settings.columnLayout
						};
					} else {
						if (oAppPagesSettings[prop].hasOwnProperty("pages")) {
							_handleAppSettings(oAppPagesSettings[prop].pages, level + 1, newEntry);
						}
					}
				}
			}

			function _getCustomLayout(sPath, iLevel, bInPlace) {
				var aPath = sPath.split("/"),
					sKey;
				while (aPath.length > 0) {
					var sExtractPath = aPath.shift();
					if (sExtractPath != undefined && sExtractPath.length > 0) {
						sKey = sKey == undefined ? sExtractPath.split("(").shift() : sKey + "." + sExtractPath.split("(").shift();
					}
				}
				if (layout.hasOwnProperty(sKey)) {
					return layout[sKey].layout;
				}
				return undefined;
			}

			function updateFCLModel() {
				oAppComponent.updateGlobalModel("/fcl", oFCLayoutHelper.getCurrentUIState());
			}

			function setLayout(sFCLayout) {
				oFCLayout.setLayout(sFCLayout);
				updateFCLModel();
			}

			/**
			 * Provides forward layout navigation. It means that by default, it takes the iLevel and set the next known layout.
			 * For instance, mid goes to end. Begin goes to mid. And end goes to end.
			 * If there is inPlace layout boolean parameter set, the layout is set to its corresponding level (begin for begin, mid for mid, and end for end)
			 * 
			 * sPaht is used to check in for an given path a custom layout has been defined.
			 */
			function setNavigationLayout(sPath, iLevel, bInPlace) {
				var sLayout = _getCustomLayout(sPath, iLevel, bInPlace);
				if (sLayout == undefined) {
					if (iLevel === layout.beginColumn.level) {
						sLayout = bInPlace ? layout.beginColumn.layout : (oFCLayoutHelper.getCurrentUIState().isFullScreen ? layout.midColumn.fullLayout :
							layout.midColumn.layout);
					} else if (iLevel === layout.midColumn.level) {
						sLayout = bInPlace ? layout.midColumn.layout : (oFCLayoutHelper.getCurrentUIState().isFullScreen ? layout.endColumn.fullLayout :
							layout.endColumn.layout);
					} else if (iLevel === layout.endColumn.level) {
						sLayout = (oFCLayoutHelper.getCurrentUIState().isFullScreen ? layout.endColumn.fullLayout : layout.endColumn.layout);
					} else {
						//level greater than endcolumn, 
						sLayout = layout.deeperColumn.layout;
					}
				}
				if (!Utils.isEmptyObjectOrString(sLayout)) {
					oAppComponent.updateGlobalModel("/app/level", iLevel);
					setLayout(sLayout);
				}
			}

			function setNavigationBackLayout(iLevel) {
				var bFullScreen = oFCLayoutHelper.getCurrentUIState().isFullScreen;
				switch (iLevel) {
					case layout.beginColumn.level:
						break;
					case layout.midColumn.level:
						setLayout(layout.beginColumn.layout);
						break;
					case layout.endColumn.level:
						setLayout(bFullScreen ? layout.midColumn.fullLayout : layout.midColumn.layout);
						break;
					default:
						setLayout(bFullScreen ? layout.endColumn.fullLayout : layout.endColumn.layout);
						break;
				}
			}

			function setFullScreenLayout(oComponent) {
				var oCurrentState = oFCLayoutHelper.getCurrentUIState();
				if (oComponent.getModel("view").getProperty("/level") === layout.midColumn.level) {
					setLayout(oCurrentState.actionButtonsInfo.midColumn.fullScreen);
				} else if (oComponent.getModel("view").getProperty("/level") === layout.endColumn.level) {
					setLayout(oCurrentState.actionButtonsInfo.endColumn.fullScreen);
				}
				ShellUtil.get().setTitle(oComponent, fnIsFullScreen());
			}

			function setExitFullScreenLayout(oComponent) {
				var oCurrentState = oFCLayoutHelper.getCurrentUIState();
				if (oComponent.getModel("view").getProperty("/level") === layout.midColumn.level) {
					setLayout(oCurrentState.actionButtonsInfo.midColumn.exitFullScreen);
				} else if (oComponent.getModel("view").getProperty("/level") === layout.endColumn.level) {
					setLayout(oCurrentState.actionButtonsInfo.endColumn.exitFullScreen);
				}
				ShellUtil.get().setTitle(oComponent, fnIsFullScreen());
			}

			function setCloseScreenLayout(iLevel) {
				var oCurrentState = oFCLayoutHelper.getCurrentUIState();
				if (iLevel === layout.midColumn.level) {
					setLayout(oCurrentState.actionButtonsInfo.midColumn.closeColumn);
				} else if (iLevel === layout.endColumn.level) {
					setLayout(oCurrentState.actionButtonsInfo.endColumn.closeColumn);
				}
			}

			function fnIsFullScreen() {
				return oAppComponent.getGlobalModel().getProperty("/fcl").isFullScreen;
			}

			function fnGetLayout() {
				return oAppComponent.getGlobalModel().getProperty("/fcl").layout;
			}

			return {
				// methods
				setNavigationLayout: setNavigationLayout,
				setNavigationBackLayout: setNavigationBackLayout,
				setFullScreenLayout: setFullScreenLayout,
				setExitFullScreenLayout: setExitFullScreenLayout,
				setCloseScreenLayout: setCloseScreenLayout,
				setLayout: setLayout,
				updateFCLModel: updateFCLModel,
				isFullScreen: fnIsFullScreen,
				getLayout: fnGetLayout
			};
		}

		return {
			// variables
			layout: layout,
			get: function() {
				if (!_oInstance) {
					throw new Error("FCLLayout has not been initialized yet.");
				}
				return _oInstance;
			},

			/*
			 * Init the FCLayoutUtil according to the giving FCL control and AppComponent.
			 * One and only one instance shall be created.
			 */
			init: function(oFCL, oAppComponent, oAppSettings) {
				if (_oInstance) {
					this.destroy();
				}
				_oInstance = createInstance(oFCL, oAppComponent, oAppSettings);
			},

			destroy: function() {
				_oInstance = null;
			}

		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/FCLayoutUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.NavigationUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.NavigationUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/NavigationUtil", [
		"sap/fin/travel/lib/reuse/util/FCLayoutUtil",
		"sap/ui/core/routing/HashChanger",
		"sap/fin/travel/lib/reuse/util/Utils"
	], function(FCLayoutUtil, HashChanger, Utils) {
		"use strict";

		function getMethods() {

			function fnInternalSetHash(sPath) {
				var sCurrentPath = HashChanger.getInstance().getHash();

				//if current hash and destination hash are equivalent, there is no need to record history for that
				if (sCurrentPath === sPath) {
					return;
				}

				var sDestinationTripNo = sPath.match(/Tripno='(\d+)'/) && sPath.match(/Tripno='(\d+)'/)[1];
				if ("0000000000" === sDestinationTripNo) {
					HashChanger.getInstance().replaceHash(sPath);
				} else {
					HashChanger.getInstance().setHash(sPath);
				}
			}

			function _findAndReplaceOrAppend(sParentPath, sSubPath) {
				var sNavPath = [];
				sSubPath = sSubPath.substring(1);
				if (sParentPath) {
					var oParentPath = sParentPath.split("/");
					for (var i = 0; i < oParentPath.length; i++) {
						if (oParentPath[i] !== "") {
							if (sSubPath.split("(")[0] === oParentPath[i].split("(")[0]) {
								sNavPath.push(sSubPath);
								return "/" + sNavPath.join("/");
							} else {
								sNavPath.push(oParentPath[i]);
							}
						}
					}
					sNavPath.push(sSubPath);
					return "/" + sNavPath.join("/");
				}
				return "/" + sSubPath;
			};

			/**
			 * Get the returned Hash from response
			 */
			function _getHashFromResponse(oResponse) {
				var oResponseBody;
				if (oResponse) {
					var oBatchResponse, oBody;
					if (oResponse.hasOwnProperty("__batchResponses")) {
						oBatchResponse = oResponse.__batchResponses[0];
						if (oBatchResponse && oBatchResponse.__changeResponses[0]) {
							oResponseBody = oBatchResponse.__changeResponses[0].body;
							if (oResponseBody) {
								var oBody = JSON.parse(oResponseBody);
								if (oBody && oBody.d && oBody.d.__metadata) {
									var oServiceType = oBody.d.__metadata.type.split(".").shift();
									return oBody.d.__metadata.uri.split(oServiceType).pop();
								}
							}
						}
					} else if (oResponse.hasOwnProperty("data")) {
						if (oResponse.data.hasOwnProperty("__batchResponses")) {
							oBatchResponse = oResponse.data.__batchResponses[0];
							if (oBatchResponse && oBatchResponse.__changeResponses[0]) {
								oResponseBody = oBatchResponse.__changeResponses[0].body;
								if (oResponseBody) {
									var oBody = JSON.parse(oResponseBody);
									if (oBody && oBody.d && oBody.d.__metadata) {
										var oServiceType = oBody.d.__metadata.type.split(".").shift();
										return oBody.d.__metadata.uri.split(oServiceType).pop();
									}
								}
							}
						} else {
							oBody = oResponse.data;
							if (oBody && oBody.__metadata) {
								var oServiceType = oBody.__metadata.type.split(".").shift();
								return oBody.__metadata.uri.split(oServiceType).pop();
							}
						}
					}
				}
				return "";
			}

			/**
			 * Navigate to the given path, and adjust FCL Layout accordingly.
			 * Default is to go one level deeper than the provided iLevel.
			 * Otherwise, if bInPlace is true, the layout should match the given level.
			 */
			function fnNavigate(sPath, iLevel, bInPlace) {
				if (iLevel === FCLayoutUtil.layout.beginColumn.level) { // in case of first level navigation.
					// Flush messages
					sap.ui.getCore().getMessageManager().removeAllMessages();
				}
				FCLayoutUtil.get().setNavigationLayout(sPath, iLevel, bInPlace);
				fnInternalSetHash(sPath);
			}

			/**
			 * @param {integer} iLevel: provides the iLevel of the current controller. It will navigate one step back from this level. For instance, iLevel === 1, the layout and path will be set for the level 0.
			 * @side-effect: changes the hash to the required level (level 0 == "", level 1 == "/entity". level 2 == "/entity1/entity2". etc..
			 */
			function fnNavigateBack(iLevel) {
				FCLayoutUtil.get().setNavigationBackLayout(iLevel);
				var sHash = HashChanger.getInstance().getHash();
				if (0 !== sHash.indexOf("/")) {
					sHash = "/" + sHash;
				}
				//pop several elements from the hash to adjust the depth level. 
				var aHash = sHash.split("/");
				var iSliceLevel = iLevel - aHash.length;
				sHash = sHash.split("/").slice(0, iSliceLevel).join("/");
				fnInternalSetHash(sHash);
			}

			function fnNavigateToRoot() {
				FCLayoutUtil.get().setLayout(FCLayoutUtil.layout.beginColumn.layout);
				fnInternalSetHash("");
			}

			/** 
			 * Verifies that the given binding path is currently in the Hash path
			 * @return: true is the binding path is in the Hash url, false otherwise.
			 */
			function fnIsBindingPathDisplayed(sBindingPath) {
				var hash = HashChanger.getInstance().getHash();
				if (0 !== hash.indexOf("/")) {
					hash = "/" + hash;
				}
				return -1 !== hash.indexOf(sBindingPath);
			}

			/**
			 * Determine binding path for the given url (usually retrieved through HashChanger.getInstance().getHash().
			 * This is useful to know which is the depth level, or which bindings are required for different FCL columns.
			 *
			 * @param {string} sPath: url
			 * 
			 * @return { depth: integer, paths: array} structure with an integer corresponding to the depth level (starting from 0) and an array of binding paths with heading slash. For example, "/TravelRequests(Pernr='00181086',Tripno='0000019100')/CostAssignments(Pernr='00181086',Tripno='0000019100',Costdistno='002')" would return
			 *	[/TravelRequests(Pernr='00181086',Tripno='0000019100'), /CostAssignments(Pernr='00181086',Tripno='0000019100',Costdistno='002')]		 **/
			function fnDetermineBindingPaths(sPath) {
				if (Utils.isEmptyObjectOrString(sPath)) {
					return {
						depth: 0,
						paths: []
					};
				}
				var aBindings = [];
				if (0 === sPath.indexOf("/")) {
					aBindings = sPath.split("/").slice(1);
				} else {
					aBindings = sPath.split("/");
				}
				aBindings = aBindings.map(function(e) {
					return "/" + e;
				});
				return {
					depth: aBindings.length,
					paths: aBindings
				};
			}

			/**
			 * Wrapper around the inline navigate function which adjust the FCL layout if needed.
			 * It takes the current hash in the URL path to determine the FCL depth needed and triggers an inline navigation on the current url.
			 */
			function fnAdjustLayout() {
				var sHash = HashChanger.getInstance().getHash();
				var oBindingPaths = fnDetermineBindingPaths(sHash);
				var ibindPathDepth = oBindingPaths.depth;
				fnNavigate(sHash, ibindPathDepth, true);
			}

			/**
			 * Depending uri in reponse triggers a navigation is new hash path is different from the current one. 
			 */
			function fnGetNavigationPathFromReponse(oData, oResponse) {
				var sParentPath, sHashPath = HashChanger.getInstance().getHash(),
					sNavPath, sSubPath;

				if (0 !== sHashPath.indexOf("/")) {
					sHashPath = "/" + sHashPath;
				}
				if (fnDetermineBindingPaths(sHashPath).depth > 1) {
					sParentPath = fnDetermineBindingPaths(sHashPath).paths.shift();
				} else {
					sParentPath = fnDetermineBindingPaths(sHashPath).paths[0];
				}
				//lookup directly in reply
				if (oResponse && oResponse.headers && oResponse.headers["location"]) {
					sSubPath = oResponse.headers && oResponse.headers["location"] && oResponse.headers["location"].split("/").slice(-1).pop();
					sNavPath = sParentPath + '/' + sSubPath;
					//or in first batch that is (shall be) the function import reply
				} else if (oResponse && oResponse.data && oResponse.data.__batchResponses && oResponse.data.__batchResponses[0] && oResponse.data.__batchResponses[
						0].__changeResponses && oResponse.data.__batchResponses[0].__changeResponses[0] && oResponse.data.__batchResponses[0].__changeResponses[
						0].headers && oResponse.data.__batchResponses[0].__changeResponses[0].headers["location"]) {
					sSubPath = "/" + oResponse.data.__batchResponses[0].__changeResponses[0].headers["location"].split("/").slice(-1).pop();
					sNavPath = _findAndReplaceOrAppend(sParentPath, sSubPath);
				}
				if (!Utils.isEmptyObjectOrString(sSubPath) && sHashPath !== sNavPath) {
					return {
						navPath: sNavPath,
						subPath: sSubPath
					};
				}
				return {
					subPath: sSubPath,
					navPath: ""
				};
			}

			return {
				bindingPaths: fnDetermineBindingPaths,
				navigate: fnNavigate,
				navigateBack: fnNavigateBack,
				navigateToRoot: fnNavigateToRoot,
				isBindingPathDisplayed: fnIsBindingPathDisplayed,
				adjustLayout: fnAdjustLayout,
				getNavigationPathFromReponse: fnGetNavigationPathFromReponse
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/NavigationUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.ODataModelUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.ODataModelUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.m.DraftIndicatorState'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/ODataModelUtil", [
		"sap/m/DraftIndicatorState",
		"sap/ui/model/Context",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/NavigationUtil"
	], function(DraftIndicatorState, Context, Utils, NavigationUtil) {
		"use strict";

		var _oInstance;

		function createInstance(oAppComponent) {

			var _bRefreshAfterChange = {};
			var _oCurrentTripContext = {};
			var _bFunctionalError = false;
			var iIdCounter = 0;

			function fnUid() {
				return "id-" + new Date().valueOf() + "-" + iIdCounter++;
			}

			function fnGetNavigationProperty(oController, oModel, sEntitySet) {
				var sObjectEntitySet = oController.getOwnerComponent().sEntitySet;
				var oEntitySet = oModel.getMetaModel().getODataEntitySet(sObjectEntitySet);
				var oEntityType = oModel.getMetaModel().getODataEntityType(oEntitySet.entityType);
				var searchString = sEntitySet.slice(0, -1); //odd cases that still match our app convention
				var fnApply = function(item) {
					return item.name.startsWith(searchString);
				};
				var navProp = oEntityType.navigationProperty.filter(fnApply);
				return navProp && navProp.length === 1 && navProp[0].name || sEntitySet;
			}

			function fnGetNavigationPropertyName(oController, oModel, sEntitySet) {
				var oEntitySet = oModel.getMetaModel().getODataEntitySet(sEntitySet);
				var oEntityType = oModel.getMetaModel().getODataEntityType(oEntitySet.entityType);
				return oEntityType && oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] && oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeNamePlural
					.String || sEntitySet;
			}

			function fnHasPendingChanges(oModel, sBindingPath) {
				if (sBindingPath) {
					var mPendingChanges = oModel.getPendingChanges();
					for (var oPendingChange in mPendingChanges) {
						if (oPendingChange === sBindingPath.substring(1)) {
							return true;
						}
					}
					return false;
				}
				return oModel.hasPendingChanges();
				// var bPendgingChanges = oModel.hasPendingChanges();
				// var oGlobalModel = oAppComponent.getGlobalModel();
				// return bPendgingChanges || (oGlobalModel && oGlobalModel.getProperty("/draft") !== DraftIndicatorState.Clear);
			}

			/** 
			 * @return undefined or the item which is in draft/unsaved
			 */
			function fnGetDraftItem(oList) {
				if (oList && oList.getTable() && oList.getTable().getItems()) {
					for (var i = 0; i < oList.getTable().getItems().length; i++) {
						var oItemBindingContext = oList.getTable().getItems()[i].getBindingContext();
						if (oItemBindingContext && oItemBindingContext.getProperty("DraftLinkVisible")) {
							return oItemBindingContext;
						}
					}
				}
				return undefined;
			}

			/**
			 * Hold the saved trip context
			 * This should always hold the trip being displayed/edited in the application.
			 * 
			 * @return {object}
			 *   - Tripno
			 *   - Pernr
			 *   - BindingPath (might be undefined)
			 */
			function fnGetCurrentTripContext() {
				return _oCurrentTripContext;
			}

			/**
			 * Save the current trip context provided in parameter.
			 * This method should be called whenever there is a change in the trip being displayed/edited, for example when changing route (at trip level), or when switching of user.
			 * 
			 * @parameter {object} mProperties
			 *   - Tripno (optional) if there is no bindingpath, the tripno is saved. This is generally the last unsaved trip number, or the tripno currently being displayed
			 *   - Pernr (optional) if there is no bindingpath, the pernr is saved. This is generally changed upon pernr change in case of delegation.
			 *   - BindingPath (optional): in case of bindingpath, the tripno and pernr are retrieved from the application model given this context. If the ODataModel does not contain the given context path, the tripno and pernr are extracted through regexp. Attention, the value shall always be the first level, such as /TravelRequest(pernr, tripno). 
			 * 
			 */
			function fnSaveCurrentTripContext(mProperties) {
				if (Utils.isEmptyObjectOrString(mProperties)) {
					return;
				}

				var oModel = oAppComponent.getAppModel();
				if (!Utils.isEmptyObjectOrString(mProperties.BindingPath)) {
					//check if the context exists
					var oTripBindingContext = new Context(oModel, mProperties.BindingPath);
					var oTrip = oTripBindingContext.getObject("");
					if (Utils.isEmptyObjectOrString(oTrip)) {
						//model not yet loaded. We extract manually the tripno and pernr from the context path
						_oCurrentTripContext.Tripno = mProperties.BindingPath.match(/Tripno='(\d+)'/) && mProperties.BindingPath.match(/Tripno='(\d+)'/)[1];
						_oCurrentTripContext.Pernr = mProperties.BindingPath.match(/Pernr='(\d+)'/) && mProperties.BindingPath.match(/Pernr='(\d+)'/)[1];
					} else {
						_oCurrentTripContext.Tripno = oTripBindingContext.getProperty("Tripno");
						_oCurrentTripContext.Pernr = oTripBindingContext.getProperty("Pernr");
					}
					_oCurrentTripContext.BindingPath = mProperties.BindingPath;
				} else {
					//update only the fields that are provided
					if (mProperties.hasOwnProperty("Tripno")) {
						_oCurrentTripContext.Tripno = mProperties.Tripno;
					}
					if (mProperties.hasOwnProperty("Pernr")) {
						_oCurrentTripContext.Pernr = mProperties.Pernr;
					}
					//provide an empty BindingPath, we reset it
					if (mProperties.hasOwnProperty("BindingPath")) {
						_oCurrentTripContext.BindingPath = "";
					}
				}
			}

			function fnResetChanges(oModel, aBindingPath) {
				oModel.resetChanges(aBindingPath);
			}

			function fnAddDeferredGroupId(oModel, sGroupId) {
				var aDeferredGroups = oModel.getDeferredGroups();
				aDeferredGroups = aDeferredGroups.concat([sGroupId]);
				oModel.setDeferredGroups(aDeferredGroups);
			}

			function fnRemoveDeferredGroupId(oModel, sGroupId) {
				var aDeferredGroups = oModel.getDeferredGroups();
				var iIndex = aDeferredGroups.indexOf(sGroupId);
				if (iIndex > -1) {
					aDeferredGroups.splice(iIndex, 1);
				}
				oModel.setDeferredGroups(aDeferredGroups);
			}

			/* This function invalidate entries corresponding to the given trip/pernr tuple.
			 * It means that further requests to theses objects will trigger a backend call.
			 * In addition, this function makes sure that any object currently displayed to the user are immediately refreshed
			 * 
			 * @param {object} oModel is a valid oData model on which we invalidate and refresh entries if necessary. The context should be at view level to be sure to refresh all related bindings
			 * @param {object} mParameters trip and personal numbers. refreshAfterChange boolean is used to control whether we do immediately refresh the invalidated displayed entries. Per default, refreshAfterChange property is true
			 */
			function fnInvalidateEntries(oModel, mParameters) {
				var bRefreshAfterChange = true;
				if (mParameters && mParameters.hasOwnProperty("refreshAfterChange") && false === mParameters.refreshAfterChange) {
					bRefreshAfterChange = false;
				}
				Object.getOwnPropertyNames(oModel.getObject("/")).filter(function(e) {
					return -1 !== e.indexOf("Pernr='" + mParameters.Pernr + "'");
				}).filter(function(e) {
					return -1 !== e.indexOf("Tripno='" + mParameters.Tripno + "'");
				}).forEach(function(e, i) {
					//invalidate entry
					if (0 !== e.indexOf("/")) {
						e = "/" + e;
					}
					oModel.invalidateEntry(e);
					if (bRefreshAfterChange && NavigationUtil.isBindingPathDisplayed(e)) {
						oModel.read(e);
					}
				});

				//If the unbind does not properly work, we can manually created-context in the model
				/*
				// try to delete entry without key
				var aInvalidEntries = Object.getOwnPropertyNames(oModel.getObject("/")).filter(function (e) {
					return -1 !== e.indexOf("Tripno='0000000000'");
				});
				if (aInvalidEntries && aInvalidEntries.length > 0) {
					aInvalidEntries.forEach(function (e, i) {
						// deleteCreatedEntry
						if (0 !== e.indexOf("/")) {
							e = "/" + e;
						}
						var oContext = new Context(oModel, e);
						oModel.deleteCreatedEntry(oContext);
					});
				} else {
					//refresh model that is bound to the view in order to refresh all related entities
					oModel.refresh();
				}
				*/
				if (bRefreshAfterChange) {
					oModel.refresh();
				}

			}

			/* This function invalidate entry corresponding to the given path.
			 * 
			 * @param {object} oModel is a valid oData model on which we invalidate and refresh entries if necessary. The context should be at view level to be sure to refresh all related bindings
			 * @param {object} sPath path of the object to invalidate. 
			 */
			function fnInvalidatEentry(oModel, sPath) {
				var object = oModel.getObject(sPath);
				if (object) {
					oModel.invalidateEntry(sPath);
					if (NavigationUtil.isBindingPathDisplayed(sPath)) {
						oModel.read(sPath);
					}
				}
			}

			/**
			 * Calculates the name of an OData entity set from the given binding context.
			 * 
			 * @param {sap.ui.model.Context} oContext The given binding context
			 * @returns {string} The name of the entity set, can be <code>null</code>
			 * @throws {Error} If no context is handed over as input parameter
			 */
			function fnGetEntitySetFromContext(oContext) {
				var sPath, sEntitySet;

				if (!oContext) {
					throw new Error("No context");
				}

				if (oContext && oContext.getPath) {
					sPath = oContext.getPath().split("(")[0];
					sEntitySet = sPath.substring(1);
				}

				if (sEntitySet == null) {
					return null;
				} else {
					return oContext.getModel().getMetaModel().getODataEntitySet(sEntitySet) && oContext.getModel().getMetaModel().getODataEntitySet(
						sEntitySet).name;
				}
			};

			function fnDeletePendingChanges(oModel, mPendingChanges) {
				var oContext;
				var mPendingChangesToDelete = mPendingChanges ? mPendingChanges : oModel.getPendingChanges(); // if so pending changes delete all.
				for (var pendingChange in mPendingChanges) {
					if (oModel.getPendingChanges().hasOwnProperty(pendingChange)) {
						// deleteCreatedEntry
						if (0 !== pendingChange.indexOf("/")) {
							pendingChange = "/" + pendingChange;
						}
						oContext = new Context(oModel, pendingChange);
						oModel.deleteCreatedEntry(oContext);
					}
				}
			};

			/**
			 * Handles global OData Model refreshAfterChange indicator before operation
			 * In case _bRefreshAfterChange has not yet been changed, save the current state
			 */
			function fnHandleRefreshAfterChange(oModel) {
				if (typeof _bRefreshAfterChange !== "boolean") {
					_bRefreshAfterChange = oModel.getRefreshAfterChange();
				}
			};

			/**
			 * Handles global OData Model refreshAfterChange indicator after operation
			 * In case a property have already been changed, restore it and clear the current state.
			 */
			function fnHandleBackRefreshAfterChange(oModel) {
				if (typeof _bRefreshAfterChange === "boolean") {
					oModel.setRefreshAfterChange(_bRefreshAfterChange);
					_bRefreshAfterChange = {};
				}
			};

			return {
				uid: fnUid,
				hasPendingChanges: fnHasPendingChanges,
				getNavigationProperty: fnGetNavigationProperty,
				getNavigationPropertyName: fnGetNavigationPropertyName,
				getDraftItem: fnGetDraftItem,
				getCurrentTripContext: fnGetCurrentTripContext,
				saveCurrentTripContext: fnSaveCurrentTripContext,
				resetChanges: fnResetChanges,
				addDeferredGroupId: fnAddDeferredGroupId,
				removeDeferredGroupId: fnRemoveDeferredGroupId,
				getEntitySetFromContext: fnGetEntitySetFromContext,
				invalidateEntries: fnInvalidateEntries,
				invalidatEentry: fnInvalidatEentry,
				deletePendingChanges: fnDeletePendingChanges,
				handleRefreshAfterChange: fnHandleRefreshAfterChange,
				handleBackRefreshAfterChange: fnHandleBackRefreshAfterChange
			};
		}

		return {
			get: function() {
				if (!_oInstance) {
					throw new Error("ODataModel has not been initialized yet.");
				}
				return _oInstance;
			},

			init: function(oAppComponent) {
				_oInstance = _oInstance || createInstance(oAppComponent);
			},

			destroy: function() {
				_oInstance = null;
			}

		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/ODataModelUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.AppContextHandler')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.AppContextHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/AppContextHandler", [
		"sap/fin/travel/lib/reuse/util/NavigationUtil",
		"sap/fin/travel/lib/reuse/util/FCLayoutUtil",
		"sap/ui/core/routing/HashChanger",
		"sap/fin/travel/lib/reuse/util/CustomDataUtil",
		"sap/fin/travel/lib/reuse/util/ControlUtil"
	], function(NavigationUtil, FCLayoutUtil, HashChanger, CustomDataUtil, ControlUtil) {
		"use strict";

		function getMethods() {

			function _fnGetReferenceEntity() {
				var oBindPaths = NavigationUtil.bindingPaths(HashChanger.getInstance().getHash()).paths;
				if (oBindPaths && oBindPaths.length > 0) {
					var sDeepestPath = NavigationUtil.bindingPaths(HashChanger.getInstance().getHash()).paths.pop();
					return sDeepestPath && sDeepestPath.split('/')[1].split('(')[0];
				}
				return "";
			}

			function fnGetTargetMessageButton(bIsVisible) {
				var bIsFullScreen = FCLayoutUtil.get().isFullScreen();
				var sLayoutType = FCLayoutUtil.get().getLayout();
				var oButton;
				if (sLayoutType !== "OneColumn") {
					$("[id*=travelDetailPageFooterToolbar]").each(function(i, j) {
						var oFooterbar = sap.ui.getCore().byId(j.id);
						if (oFooterbar && oFooterbar.getMetadata().getName() === "sap.m.OverflowToolbar") {
							var oObjectPageLayout = ControlUtil.getOwnerControlByClass(oFooterbar, "sap/uxap/ObjectPageLayout");
							if (bIsVisible || oObjectPageLayout.getShowFooter()) {
								var iCurrentViewLevel = NavigationUtil.bindingPaths(HashChanger.getInstance().getHash()).depth;
								var iViewCustomData = CustomDataUtil.getCustomData(oFooterbar, "ViewLevel");
								var sRefEntity = CustomDataUtil.getCustomData(oFooterbar, "RefEntity");
								if (!bIsFullScreen || sLayoutType === "MidColumnFullScreen") {
									if (iViewCustomData == 1) {
										oButton = oFooterbar.getContent()[0];
										return;
									}
								} else if (iViewCustomData == iCurrentViewLevel && sRefEntity === _fnGetReferenceEntity()) {
									oButton = oFooterbar.getContent()[0];
									return;
								}
							}
						}
					});
				}
				return oButton;
			}

			return {
				getTargetMessageButton: fnGetTargetMessageButton
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/AppContextHandler.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.FCLayoutHandler')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.FCLayoutHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/FCLayoutHandler", [
		"sap/ui/base/Object",
		"sap/fin/travel/lib/reuse/util/FCLayoutUtil",
		"sap/fin/travel/lib/reuse/util/NavigationUtil"
	], function(BaseObject, FCLayoutUtil, NavigationUtil) {
		"use strict";

		function getMethods(oController) {

			function handleFullScreen() {
				FCLayoutUtil.get().setFullScreenLayout(oController.getOwnerComponent());
			}

			function handleExitFullScreen() {
				FCLayoutUtil.get().setExitFullScreenLayout(oController.getOwnerComponent());
			}

			function handleClose() {
				FCLayoutUtil.get().setCloseScreenLayout(oController.getView().getModel("view").getProperty("/level"));
				NavigationUtil.navigateBack(oController.getView().getModel("view").getProperty("/level"));
			}

			return {
				handleClose: handleClose,
				handleExitFullScreen: handleExitFullScreen,
				handleFullScreen: handleFullScreen
			};
		}

		return BaseObject.extend("sap.fin.travel.lib.reuse.util.FCLayoutHandler", {
			/**
			 * @param {object} JSONModel model for the flexible layout, such as the one created by FlexibleColumnLayoutSemanticHelper
			 */
			constructor: function(oController) {
				jQuery.extend(this, getMethods(oController));
			}
		});

	});
}; // end of sap/fin/travel/lib/reuse/util/FCLayoutHandler.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.MessageUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.MessageUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
	jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/MessageUtil", [
		"sap/ui/core/MessageType",
		"sap/ui/model/json/JSONModel",
		"sap/fin/travel/lib/reuse/util/MessageParser",
		"sap/m/MessageBox",
		"sap/fin/travel/lib/reuse/util/i18n",
		"sap/ui/core/ValueState",
		"sap/ui/core/message/Message",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/FragmentHelper",
		"sap/fin/travel/lib/reuse/util/AppContextHandler"
	], function(MessageType, JSONModel, MessageParser, MessageBox, I18n, ValueState, Message, Utils, FragmentHelper, AppContextHandler) {
		"use strict";

		var _oInstance;

		function createInstance() {
			var _oMessageFragment;
			var _pleaseNoOpening = false;
			var TRV_MSG_CODE = "TRV_MSG_ID";

			function _convertToMessageBox(oError) {
				var convertedError = {
					icon: MessageBox.Icon.ERROR,
					title: I18n.get().getText("ST_ERROR"),
					state: ValueState.Error,
					detail: oError.hasOwnProperty("detail") ? oError.detail : ""
				};
				if (oError.hasOwnProperty("type")) {
					switch (oError.type) {
						case MessageParser.ErrorType.Warning:
							convertedError.icon = MessageBox.Icon.WARNING;
							convertedError.title = I18n.get().getText("ST_WARNING");
							convertedError.state = ValueState.Warning;
						case MessageParser.ErrorType.Info:
							convertedError.icon = MessageBox.Icon.INFORMATION;
							convertedError.title = I18n.get().getText("ST_INFO");
							convertedError.state = ValueState.Information;
						case MessageParser.ErrorType.Success:
							convertedError.icon = MessageBox.Icon.SUCCESS;
							convertedError.title = I18n.get().getText("ST_SUCCESS");
							convertedError.state = ValueState.Success;
						default:
							convertedError.icon = MessageBox.Icon.ERROR;
							convertedError.title = I18n.get().getText("ST_ERROR");
							convertedError.state = ValueState.Error;
					}
				}
				return convertedError;
			}

			function fnHasMessage() {
				var oMessageModel = sap.ui.getCore().getMessageManager().getMessageModel();
				return oMessageModel && oMessageModel.getData() && oMessageModel.getData().length > 0;
			}

			function fnHasInternalError() {
				var bHasError = false;
				if (fnHasMessage()) {
					var oMessages = sap.ui.getCore().getMessageManager().getMessageModel().getData();
					for (var i = 0; i < oMessages.length; i++) {
						if (oMessages[i].code === TRV_MSG_CODE) {
							bHasError |= oMessages[i] && (oMessages[i].type === MessageType.Error || oMessages[i].type === MessageType.Warning);
						}
					}
				}
				return bHasError;
			}

			/**
			 * This function allows to detect if messages are of a given message types. It allows to get messages from the message manager if none is provided.
			 * 
			 * @param {array} aMessages Messages array to decide if there are some error. If empty (or undefined), get the messages from message manager instead.
			 * @param {array} aMessageTypes array of MessageType. Message types will be used to filter out and determine if there are message of these given types
			 * @return {boolean} true if there is a message in either the provided aMessages or in the MessageManager of the given aMessageTypes. False otherwise.
			 */
			function fnHasMessageManagerError(aMessages, aMessageTypes) {
				var oMessages = (aMessages && aMessages.length > 0) ? aMessages : sap.ui.getCore().getMessageManager().getMessageModel().getData();
				return fnHasError(oMessages, aMessageTypes);
			}

			/**
			 * Determines if there are errors in the given aMessages of the given aMessageType
			 * @param {array} aMessages 
			 * @param {array} aMessageType 
			 */
			function fnHasError(aMessages, aMessageType) {
				var bHasError = false;
				if (fnHasMessage() || aMessages) {
					var oMessages = aMessages;
					for (var i = 0; i < oMessages.length; i++) {
						if (aMessageType && aMessageType.length > 0) {
							bHasError |= oMessages[i] && Utils.includes(aMessageType, [oMessages[i].type]);
						} else {
							bHasError |= oMessages[i] && (oMessages[i].type === MessageType.Error || oMessages[i].type === MessageType.Warning);
						}
					}
				}
				return bHasError;
			}

			function fnHandleMessageResponse(oResponse) {
				var aMessages = [];
				MessageParser.parseMessageResponseHeader(oResponse, aMessages);
				MessageParser.parseMessageResponseBatch(oResponse, aMessages);
				return fnHasError(aMessages); //check on response messages only.
			}

			function fnHandleMessageHeader(oResponse) {
				var aMessages = [];
				MessageParser.parseMessageResponseHeader(oResponse, aMessages);
				return fnHasError(aMessages); //check on response messages only.
			}

			function fnHandleMessageBatch(oResponse) {
				var aMessages = [];
				MessageParser.parseMessageResponseBatch(oResponse, aMessages);
				return fnHasError(aMessages); //check on response messages only.
			}

			/**
			 * Get error message from the parameter object and return a displayble error message.
			 * The precedence is: first try to extract value from responseText, then if not possible from a message, otherwise from the response contained in object's parameters
			 * 
			 * 
			 * @param {object} oErrorMsg: error message containing {statusCode, statusText, message, responseText, headers, etc.}
			 * @return {object} tuple containing {type: errorCode, like error, success, warning, etc., error: intellegible error message}
			 */
			function fnGetErrorMessage(oErrorMsg, bWithErrorCode) {
				var sError = oErrorMsg;
				/* eslint-disable sap-no-ui5base-prop */
				if (oErrorMsg) {
					if (oErrorMsg.hasOwnProperty("responseText")) {
						sError = MessageParser.parseErrorMessage(oErrorMsg.responseText, bWithErrorCode);
					} else if (oErrorMsg.hasOwnProperty("message")) {
						sError = oErrorMsg.message;
					} else if (oErrorMsg.hasOwnProperty("mParameters") && oErrorMsg.mParameters.hasOwnProperty("response")) {
						sError = fnGetErrorMessage(oErrorMsg.mParameters.response, bWithErrorCode);
					}
					if (Utils.isEmptyObjectOrString(sError)) {
						sError = {
							type: "error",
							error: I18n.get().getText("UNKNOWN_ERROR").concat(": ", oErrorMsg.statusCode, " ", oErrorMsg.statusText || oErrorMsg.message)
						};
					}
				}

				/* eslint-enable sap-no-ui5base-prop */
				return sError;
			}

			function fnGetErrorMessageHeader(oResponse) {
				var aMessages = [];
				MessageParser.parseMessageResponseHeader(oResponse, aMessages);
				return aMessages[0] || fnGetErrorMessage(oResponse);
			}

			function fnGetErrorMessageBatch(oResponse) {
				var aMessages = [];
				MessageParser.parseMessageResponseBatch(oResponse, aMessages);
				return aMessages[0] ? aMessages[0].message : fnGetErrorMessage(oResponse);
			}

			function fnGetErrorMessageResponse(oResponse) {
				var aMessages = [];
				MessageParser.parseMessageResponseHeader(oResponse, aMessages);
				return aMessages[0] || fnGetErrorMessageBatch(oResponse);
			}

			function fnGetErrorMessagesResponse(oResponse) {
				var aMessages = [];
				MessageParser.parseMessageResponseBatch(oResponse, aMessages);
				MessageParser.parseMessageResponseHeader(oResponse, aMessages);
				return aMessages;
			}

			/**
			 * Display a message in popup
			 * 
			 * If no message use a default error message.
			 * If message type string use it, with error message type.
			 * Otherwise parse it.
			 * 
			 * @param {boolean} bFromRequestFailed indicates that error comes from the generic attachRequestFailed handler. In such case, we might not use the regular Error message fragment, but instead navigate to a not found page
			 */
			function fnShowMessage(error, bFromRequestFailed) {
				var oError = error ? (typeof error === "string" ? error : fnGetErrorMessage(error, true)) : I18n.get().getText("UNKNOWN_ERROR");
				var oMessageBoxError = _convertToMessageBox(oError);
				var sMessage = oError.error ? oError.error : oError;
				if (_oMessageFragment == undefined || _oMessageFragment.isOpen() !== true) {
					FragmentHelper.get().loadFragment({
						id: "ErrorMessageDialogFragmentID",
						name: "sap.fin.travel.lib.reuse.view.fragments.ErrorMessage",
						controller: {
							close: function() {
								_oMessageFragment.close();
								_oMessageFragment = undefined;
								FragmentHelper.get().destroy("ErrorMessageDialogFragmentID");
							}
						},
						models: {
							message: new JSONModel({
								message: sMessage,
								title: oMessageBoxError.title,
								state: oMessageBoxError.state,
								detail: oMessageBoxError.detail,
								close: I18n.get().getText("CLOSE")
							})
						}
					}).then(function(oMessageFragment) {
						if (oMessageFragment) {
							_oMessageFragment = oMessageFragment;
							if (_pleaseNoOpening && "function" === typeof _pleaseNoOpening) {
								if (bFromRequestFailed) {
									_pleaseNoOpening({
										message: sMessage,
										title: oMessageBoxError.title
									});
								}
								_pleaseNoOpening = false;
							} else {
								_oMessageFragment.open();
							}
						}
					});
				} else {
					// in case message popover already open we simply append new message.
					// var oMessageModel = _oMessageFragment.getModel("message");
					// oMessageModel.setProperty("/message", oMessageModel.getProperty("/message").concat("\n" + sMessage));
				}
			}

			/**
			 * 
			 * @param {function} fnCallback call back function to be called upon next showMessage call. 
			 * The callback will be called with the error {title:str, message:str}
			 */
			function fnPreventNextOpening(fnCallback) {
				_pleaseNoOpening = fnCallback;
			}

			function fnContainsMessage(oErrorMessage) {
				var bFound = false;
				var oMessageModel = sap.ui.getCore().getMessageManager().getMessageModel();
				if (oMessageModel && oMessageModel.getData() && oMessageModel.getData().length > 0) {
					for (var i = 0; i < oMessageModel.getData().length; i++) {
						var oModelMessage = oMessageModel.getData()[i];
						if (oModelMessage.target === oErrorMessage.target) {
							return true;
						}
					}
				}
				return bFound;
			}

			function fnAddMessage(oErrorMessage) {
				if (!fnContainsMessage(oErrorMessage)) {
					sap.ui.getCore().getMessageManager().addMessages([oErrorMessage]);
				}
			}

			function fnUpdateMessageManager(aErrorMessages) {
				if (aErrorMessages) {
					aErrorMessages.forEach(function(oErrorMessage) {
						fnAddMessage(new Message({
							code: TRV_MSG_CODE,
							message: oErrorMessage.message,
							type: ValueState.Error,
							target: oErrorMessage.target
						}));
					});
				}
				fnOpenMessagesPopover();
			}

			function fnCleanValidationMessages() {
				var aMessagesToRemove = [];
				var oMessageModel = sap.ui.getCore().getMessageManager().getMessageModel();
				if (oMessageModel && oMessageModel.getData() && oMessageModel.getData().length > 0) {
					for (var i = 0; i < oMessageModel.getData().length; i++) {
						var oModelMessage = oMessageModel.getData()[i];
						if (oModelMessage.code === TRV_MSG_CODE) {
							aMessagesToRemove.push(oModelMessage);
						}
					}
				}
				sap.ui.getCore().getMessageManager().removeMessages(aMessagesToRemove);
			}

			function fnRefreshValidationMessages(sBindingPath) {
				var aMessagesToRemove = [];
				var oMessageModel = sap.ui.getCore().getMessageManager().getMessageModel();
				if (sBindingPath && oMessageModel && oMessageModel.getData() && oMessageModel.getData().length > 0) {
					for (var i = 0; i < oMessageModel.getData().length; i++) {
						var oModelMessage = oMessageModel.getData()[i];
						if (oModelMessage.code === TRV_MSG_CODE && Utils.includes(oModelMessage.target, sBindingPath)) {
							aMessagesToRemove.push(oModelMessage);
						}
					}
				}
				sap.ui.getCore().getMessageManager().removeMessages(aMessagesToRemove);
			}

			/*
			 * Toggle the message popover.
			 * At this point MessagePopover fragment should be initialized. If already opened close it.
			 */
			function fnToggleMessagesPopover() {
				var oMessagePopover = FragmentHelper.get().getFragment("TravelMessagePopoverFragmentID");
				if (oMessagePopover == undefined) {
					jQuery.sap.log.error("Message Popover Fragment is not initialized !");
					return;
				}
				var oTargetMessageButton = AppContextHandler.getTargetMessageButton();
				if (oTargetMessageButton != undefined && oTargetMessageButton.isActive()) {
					oMessagePopover.toggle(oTargetMessageButton);
				}
			}

			/*
			 * Open the message popover.
			 * At this point MessagePopover fragment should be initialized. If already opended do nothing
			 */
			function fnOpenMessagesPopover() {
				if (fnHasMessageManagerError()) {
					var oMessagePopover = FragmentHelper.get().getFragment("TravelMessagePopoverFragmentID");
					if (oMessagePopover == undefined) {
						jQuery.sap.log.error("Message Popover Fragment is not initialized !");
						return;
					}
					var oTargetMessageButton = AppContextHandler.getTargetMessageButton();
					if (oTargetMessageButton != undefined && !oMessagePopover.isOpen()) {
						if (oTargetMessageButton.isActive()) {
							oMessagePopover.toggle(oTargetMessageButton);
							if (!oTargetMessageButton.checkFieldGroupIds("MessagePopoverRedering")) { // MessageButton has been rederer after it was activated!
								var aFieldGroupIds = oTargetMessageButton.getFieldGroupIds();
								aFieldGroupIds.push("MessagePopoverRedering");
								oTargetMessageButton.setFieldGroupIds(aFieldGroupIds);
							}
						} else if (oTargetMessageButton.checkFieldGroupIds("MessagePopoverRedering")) {
							var aFieldGroupIds = oTargetMessageButton.getFieldGroupIds();
							aFieldGroupIds.splice(aFieldGroupIds.indexOf("MessagePopoverRedering"), 1);
							oTargetMessageButton.setFieldGroupIds(aFieldGroupIds);
						}
					}
				}
			}

			return {
				hasMessage: fnHasMessage,
				hasError: fnHasError,
				hasMessageManagerError: fnHasMessageManagerError,
				hasInternalError: fnHasInternalError,
				handleMessageResponse: fnHandleMessageResponse,
				handleMessageHeader: fnHandleMessageHeader,
				handleMessageBatch: fnHandleMessageBatch,
				getErrorMessageResponse: fnGetErrorMessageResponse,
				getErrorMessageHeader: fnGetErrorMessageHeader,
				getErrorMessageBatch: fnGetErrorMessageBatch,
				getErrorMessage: fnGetErrorMessage,
				getErrorMessagesResponse: fnGetErrorMessagesResponse,
				showMessage: fnShowMessage,
				updateMessageManager: fnUpdateMessageManager,
				cleanValidationMessages: fnCleanValidationMessages,
				refreshValidationMessages: fnRefreshValidationMessages,
				toggleMessagesPopover: fnToggleMessagesPopover,
				openMessagesPopover: fnOpenMessagesPopover,
				preventNextShowMessage: fnPreventNextOpening
			};
		}

		return {
			get: function() {
				if (!_oInstance) {
					_oInstance = createInstance();
				}
				return _oInstance;
			}

		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/MessageUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.DetailPage.controller.DetailPage.controller')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.DetailPage.controller.DetailPage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/DetailPage/controller/DetailPage.controller", [
		"sap/ui/core/mvc/Controller",
		"sap/fin/travel/lib/reuse/util/AnnotationHelper",
		"sap/fin/travel/lib/reuse/util/MessageUtil",
		"sap/fin/travel/lib/reuse/util/AppContextHandler",
		"sap/fin/travel/lib/reuse/util/FragmentHelper"
	], function(Controller, AnnotationHelper, MessageUtil, AppContextHandler, FragmentHelper) {
		"use strict";

		return Controller.extend("sap.fin.travel.lib.reuse.DetailPage.controller.DetailPage", {

			onInit: function() {
				$.noop();
			},

			onAfterRendering: function() {
				FragmentHelper.get().loadFragment({
					id: "TravelMessagePopoverFragmentID",
					name: "sap.fin.travel.lib.reuse.view.fragments.MessagePopover",
					models: {
						i18n: this.getView().getModel("i18n"),
						message: this.getView().getModel("message")
					}
				});
			},

			_getBreadcrumbs: function() {
				//breadcrumb is located in header, which is located in a page which is the first element of the view
				if (this.getView() === undefined) {
					return;
				}
				var oBreadcrumbs = this.getView().getContent()[0].getHeaderTitle().getBreadcrumbs();
				return oBreadcrumbs;
			},

			/*
					_getODataModelForEntity: function (sEntitySet) {

						var oMetaModel = this.getView().getModel().getMetaModel();
						var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
						var sEntityType = oEntitySet && oEntitySet.entityType;
						if (!sEntityType) {
							return null;
						}
						var oEntitySetContext = oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(sEntitySet, true));
						var oEntityTypeContext = oMetaModel.createBindingContext(oMetaModel.getODataEntityType(sEntityType, true));
					},*/

			/**
			 * Depending on actual level of the DetailPage, we need to adjust the bread crumbs
			 *
			 * @parameter{array} aEntitySets is an array of string which contains the different entity set names (for example: TravelExpenses, Destinations, CostAssignments)
			 */
			_setBreadcrumbs: function(aEntitySets) {
				var aBreadcrumbs = aEntitySets.slice(); //clone array

				var oBreadcrumbs = this._getBreadcrumbs();
				if (oBreadcrumbs === undefined) {
					return;
				}
				//remove all links
				oBreadcrumbs.removeAllLinks();
				//recreate links
				var sLastEntity = aBreadcrumbs.pop(); //no breadcrumb for the last entity
				var that = this;
				aBreadcrumbs.forEach(function(item) {
					var oMetaModel = that.getView().getModel().getMetaModel();
					var oEntitySet = oMetaModel.getODataEntitySet(item);
					var sEntityType = oEntitySet && oEntitySet.entityType;
					var oEntitySetContext = oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(item, true));
					var oEntityTypeContext = oMetaModel.createBindingContext(oMetaModel.getODataEntityType(sEntityType, true));

					var oTitle = oEntityTypeContext.getProperty("com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value");
					var oTypeName = oEntityTypeContext.getProperty("com.sap.vocabularies.UI.v1.HeaderInfo/TypeName");

					var sBreadCrumbExpression = AnnotationHelper.buildBreadCrumbExpression(oEntityTypeContext, oTitle, oTypeName);

					if (that.extendP13nBreadCrumbExpression && typeof that.extendP13nBreadCrumbExpression === "function") {
						sBreadCrumbExpression = that.extendP13nBreadCrumbExpression({
							entitySet: sLastEntity,
							breadcrumbFor: item,
							breadcrumbs: aBreadcrumbs,
							entityTypeContext: oEntityTypeContext,
							keyTitle: oTitle,
							typeName: oTypeName,
							currentExpression: sBreadCrumbExpression,
							i: arguments[1]
						});
					}

					var oLink = new sap.m.Link({
						text: sBreadCrumbExpression,
						visible: "{= ${_global>/fcl/isFullScreen}}",
						press: that._eventHandler.onBreadCrumbUrlPressed
					});

					oBreadcrumbs.addLink(oLink);
				});

			},

			/**
			 * Triggers internal logic to adjust breadcrumbs, shell navigation, etc.
			 * @parameter{array} aEntitySets is an array of string containing the different entity type names.
			 */
			adjustDynamicValues: function(aEntitySets) {
				this._setBreadcrumbs(aEntitySets);
			}

		});
	});
}; // end of sap/fin/travel/lib/reuse/DetailPage/controller/DetailPage.controller.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.AppComponent')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.AppComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
	jQuery.sap.require('sap.f.routing.Router'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/AppComponent", [
		"sap/ui/model/Context",
		"sap/fin/travel/lib/reuse/util/FCLayoutUtil",
		"sap/f/routing/Router",
		"sap/fin/travel/lib/reuse/model/models",
		"sap/fin/travel/lib/reuse/util/PaginatorHelper",
		"sap/fin/travel/lib/reuse/util/NavigationUtil",
		"sap/ui/core/routing/HashChanger",
		"sap/fin/travel/lib/reuse/util/MessageUtil",
		"sap/fin/travel/lib/reuse/util/i18n",
		"sap/fin/travel/lib/reuse/util/ODataModelUtil",
		"sap/fin/travel/lib/reuse/util/ShellUtil",
		"sap/fin/travel/lib/reuse/util/FragmentHelper",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/TravelUtil",
		"sap/fin/travel/lib/reuse/util/AppDescriptorUtil",
		"sap/fin/travel/lib/reuse/util/StateUtil",
		"sap/fin/travel/lib/reuse/util/BusyHelper"
	], function(Context, FCLayoutUtil, Router, models, PaginatorHelper, NavigationUtil, HashChanger, MessageUtil,
		I18n, ODataModelUtil, ShellUtil, FragmentHelper, Utils, TravelUtil, AppDescriptorUtil, StateUtil, BusyHelper) {
		"use strict";

		var _oComponent;
		var _oSettings;
		var _oModel;

		/**
		 * There is one component per entityType.
		 * This map contains all the generated components.
		 * Key: name of the entity (for example, sap.fin.travel.mytravelrequestsv2.ListReport.TravelRequests)
		 * Value: component
		 */
		var mComponentInstances = new Map();
		var mComponentInstancesLock = new Map();
		/**
		 * Hold the deepest component's level (which is filled when parsing the manifest).
		 * It means 0 for the ListPage, 1 for the first obejct page, 2 for the sub-entity, etc.
		 */
		var iComponentDeepestLevel = 0;
		/**
		 * There is one component per entityType.
		 * This map contains all the generated components configuration.
		 * Key: name of the entity (for example, sap.fin.travel.mytravelrequestsv2.ListReport.TravelRequests)
		 * Value: contains object {id: string, pattern: string, level: integer, entity:string, resolve:function}
		 */
		var mComponentInstancesConf = new Map();
		var _oConfig;
		var oRouter;

		//boolean to know if app has been destroyed
		var bDestroyed;

		function pagesMap2Array(input) {
			var output = Object.keys(input).map(function(key) {
				var page = input[key];
				//add the key to the array for reference
				//page["id"] = key;
				//Recursive call for nested pages
				if (page.pages) {
					page.pages = pagesMap2Array(page.pages);
				}
				return input[key];
			});
			return output;
		}

		/**
		 * Taken from FE
		 *
		 * @return oConfig: this is a recursive array containing pages configuration from manifest.
		 * There is supposed to have only one page for the first level.
		 * Then, each sub-level might contains several pages.
		 * Structure is as follow:
		 * {component:{name string, entitySet string, navigationProperty? string, pages* component}
		 */
		function getConfig() {
			if (!_oConfig) {
				//We are currently reading manifest entries belonging to Fiori Element in sap.ui.generic.app.
				//If Fiori Element changes its structure definition, we might consider using our own setting file
				//or request an official manifest schema definition for entry 'sap.fin.travel.lib.reuse'
				if (_oSettings && _oSettings.hasOwnProperty("appDescriptor") && _oSettings.appDescriptor["sap.ui.generic.app"] != undefined) {
					// app descriptor is extenalized
					_oConfig = _oSettings.appDescriptor["sap.ui.generic.app"];
					// merge with the extended settings
					_oConfig = _oComponent.getManifestEntry("sap.ui.generic.app") != undefined ? AppDescriptorUtil.mergeDescriptors(_oConfig,
						_oComponent
						.getManifestEntry("sap.ui.generic.app")) : _oConfig;
				} else {
					// app descriptor is integrated
					_oConfig = _oComponent.getManifestEntry("sap.ui.generic.app");
				}
			}
			return _oConfig;
		}

		/**
		 * Wrapper to call sap.ui.component given the provided arguments.
		 * There is a convention for ListPage or DetailPage manifest url.
		 * ListPage manifest shall be called ListPage.manifest.json in the application
		 * DetailPage manifest shall be called Detail.manifest.json in the application
		 *
		 * @param {string} sComponentName Name of the component
		 * @param {string} sEntitySet entitySet name
		 * @param {array} aBreadCrumb
		 * @param {sId} Component id
		 */
		function createComponent(sComponentName, sEntitySet, oShell, aBreadCrumb, sId) {

			var oManifest;
			if (!Utils.isEmptyObjectOrString(_oSettings.manifest)) {
				if ("sap.fin.travel.lib.reuse.ListPage" === sComponentName) {
					oManifest = _oSettings.manifest.ListPage;
				} else if ("sap.fin.travel.lib.reuse.DetailPage" === sComponentName) {
					oManifest = _oSettings.manifest.DetailPage;
				}

				// Enrich the app descriptor extensions with extended entries
				var parentAppDescriptor = oManifest["sap.ui5"];
				var extAppDescriptor = _oComponent.getManifestEntry("sap.ui5");
				if (parentAppDescriptor) {
					if (extAppDescriptor.hasOwnProperty("extends")) {
						parentAppDescriptor.extends = parentAppDescriptor.extends || {};
						AppDescriptorUtil.overrideControllers(extAppDescriptor);
						parentAppDescriptor.extends = AppDescriptorUtil.mergeDescriptors(parentAppDescriptor.extends, extAppDescriptor.extends);
					}
				}
			} else {
				var sManifestUrl = jQuery.sap.getModulePath(_oSettings.manifestPath) + "/";
				if ("sap.fin.travel.lib.reuse.ListPage" === sComponentName) {
					sManifestUrl += "ListPage.manifest.json";
				} else if ("sap.fin.travel.lib.reuse.DetailPage" === sComponentName) {
					sManifestUrl += "DetailPage.manifest.json";
				}
				oManifest = sManifestUrl;
			}

			var comp = sap.ui.component({
				name: sComponentName,
				manifest: oManifest, //manifest json object, or for compatibility mode an URL to load the manifest from
				componentData: {
					oModel: _oModel,
					oRouter: oRouter,
					oAppDescriptor: _oSettings.appDescriptor,
					oAppManifest: _oComponent.getMetadata().getManifest(),
					oAppComponent: _oComponent,
					sEntitySet: sEntitySet,
					oShell: oShell,
					aBreadCrumb: aBreadCrumb,
					oAppResourceBundle: _oComponent.getResourceBundle(),
					extension: _oSettings.extension
				},
				id: sId
			});

			return comp;
		}

		/**
		 * This function creates a Promise which create a component corresponding to the provided config page.
		 * It creates the component for the given level
		 *
		 * @param {object} oPage: a page setting coming from the config
		 * @param {integer} iLevel: depth level which is propagated in the component
		 * @param {string} sPattern: URL path pattern which is propagated in the component
		 * @param {array} aBreadCrumb: Breadcrumb array that is propagated in the component
		 *
		 * @return {object} {id: string, pattern: string, level: integer, entity:string, resolve:function rturning a Promise}
		 *
		 */
		function doCreateComponent2(oPage, iLevel, sPattern, aBreadCrumb) {

			var sId = oPage.component.name + "." + oPage.entitySet;
			iComponentDeepestLevel = iComponentDeepestLevel < iLevel ? iLevel : iComponentDeepestLevel;

			var fnResolve = function(resolve) {
				var idm = oPage.component.name + "." + oPage.entitySet;
				if (jQuery.sap.log.Level.DEBUG === jQuery.sap.log.getLevel()) {
					jQuery.sap.measure.start(idm, "Measurement of " + idm);
					//var t0 = performance.now();
				}

				var component = createComponent(oPage.component.name, oPage.entitySet, oPage.routingSpec, aBreadCrumb, sId);
				if (jQuery.sap.log.Level.DEBUG === jQuery.sap.log.getLevel()) {
					//var t1 = performance.now();
					//jQuery.sap.log.info("Component created;" + component.getId() + ";" + iLevel + ";" + (t1 - t0) + " milliseconds.");
					jQuery.sap.measure.end(idm);
				}

				return component;
				/*component.then(function(oComponent) {
					resolve({
						component: oComponent,
						level: iLevel,
						pattern: sPattern
					});
				});*/
			};
			return {
				id: sId,
				pattern: sPattern,
				level: iLevel,
				entity: oPage.entitySet,
				resolve: fnResolve
			};

			//return new Promise(fnResolve);
		}

		/**
		 * This function process pages for a config. If no config is given, we retrieve the default config from the manifest.
		 * For each page in the config, we do create a promise that will resolve the component, and add the promise to the internal list.
		 * The different components are resolved recursively by calling doProcessPages for all subpages.
		 * The order is to first create the component, then trigger creation of all subordonate components, then resolve the promise with the created component as result.
		 *
		 * @param {object} oConfig: empty object, or a config structured with pages and component settings.
		 * @param {integer} iLevel: depth level. By default, the value corresponds to he begin column layout view level of the FlexibleColumnLayout (0)
		 * @param {string} sParentPattern: URL path pattern of the parent object. For instance, level 0 is an empty string, and others are the entitySet name along with pattern "keys1" for level 1 for example/
		 * @param {array} aParentBreadCrumb: Default is an empty array. Otherwise, it's filled with navigation property or entitySet name
		 *
		 * @return mComponentInstancesConf array containing the different component promises is returned.
		 *  */
		function _doProcessConfig(oConfig, iLevel, sParentPattern, aParentBreadCrumb) {
			if (jQuery.sap.log.Level.DEBUG === jQuery.sap.log.getLevel()) {
				jQuery.sap.measure.setActive(true);
				jQuery.sap.measure.start("fi-fio-tv-component-creation", "Creation of the different promise's component for the application");
			}
			//contain list of all component's promises.

			oConfig = oConfig || getConfig();
			if (Utils.isEmptyObjectOrString(oConfig.pages)) {
				return [];
			}
			aParentBreadCrumb = aParentBreadCrumb || [];
			iLevel = iLevel || FCLayoutUtil.layout.beginColumn.level;
			sParentPattern = sParentPattern || "";

			$.each(oConfig.pages, function(i, e) {
				var sPattern = sParentPattern;
				var aBreadCrumb = Array.from(aParentBreadCrumb);
				if (iLevel > FCLayoutUtil.layout.beginColumn.level) {
					//sPattern = sParentPattern + "/" + e.entitySet + ":key:";
					//sPattern = sParentPattern + "/:bindPath:";
					sPattern = sParentPattern + "/" + e.entitySet + "({keys" + iLevel + "})"; //Can be aggregated with sParentPattern if we are able to match the context properly
					aBreadCrumb.push(e.navigationProperty || e.entitySet);
				} else if (iLevel === 0) { //save root component
					_oSettings.rootComponent = _oSettings.rootComponent || e.component && e.component.name && e.component.name.concat(".", e.entitySet);
				}

				var oRes = doCreateComponent2(e, iLevel, sPattern, aBreadCrumb);
				if (mComponentInstancesConf.has(oRes.id)) {
					mComponentInstancesConf.get(oRes.id).routes.push({
						level: oRes.level,
						pattern: oRes.pattern
					});
				} else {
					mComponentInstancesConf.set(oRes.id, {
						id: oRes.id,
						routes: [{
							level: oRes.level,
							pattern: oRes.pattern
						}],
						entity: oRes.entity,
						resolve: oRes.resolve
					});
				}

				_doProcessConfig(e, iLevel + 1, sPattern, aBreadCrumb);
			});

			if (jQuery.sap.log.Level.DEBUG === jQuery.sap.log.getLevel()) {
				jQuery.sap.measure.end("fi-fio-tv-component-creation");
				jQuery.sap.measure.setActive(false);
			}
			return mComponentInstancesConf;
		}

		/**
		 * Provide first targets to the manually-handled router.
		 *
		 * It creates target for the different columns of the flexible column layout, and one for the generic notFound view.
		 */
		function _initRouter() {
			var sRootView = _oComponent.getId() + "---mainView";
			var res = {};
			res.targets = {
				list: {
					rootView: sRootView,
					viewName: "Begin",
					viewId: "BeginViewId",
					controlId: "fcl",
					controlAggregation: "beginColumnPages"
				},
				detail: {
					rootView: sRootView,
					viewName: "Middle",
					viewId: "MiddleViewId",
					controlId: "fcl",
					controlAggregation: "midColumnPages"
				},
				detaildetail: {
					rootView: sRootView,
					viewName: "DetailDetail",
					viewId: "EndViewId",
					controlId: "fcl",
					controlAggregation: "endColumnPages"
				},
				notFound: {
					rootView: sRootView,
					viewName: "NotFound",
					controlId: "fcl",
					controlAggregation: "midColumnPages" //, "endColumnPages"] //XXX not found can appear in midColumn or endColum depending on the level
				}
			};
			oRouter = new Router([], {
				async: true,
				controlId: "fcl",
				clearTarget: false,
				viewPath: "sap.fin.travel.lib.reuse.view",
				viewType: "XML",
				homeRoute: _oSettings.homeRoute
			}, _oComponent, []);
			oRouter.initialize(); //XXX bIgnoreInitialHash
			oRouter.getTargets().addTarget("list", res.targets.list);
			oRouter.getTargets().addTarget("detail", res.targets.detail);
			oRouter.getTargets().addTarget("detaildetail", res.targets.detaildetail);
			oRouter.getTargets().addTarget("notFound", res.targets.notFound);
		}

		/**
		 * Helper to retrieve view destination per depth level
		 */
		function getConfigFromLevel(iLevel) {
			var appId = _oComponent.getId();
			switch (iLevel) {
				case FCLayoutUtil.layout.beginColumn.level:
					return {
						target: ["list"],
						// layout: "OneColumn",
						viewId: "BeginViewId",
						container: appId + "---BeginViewId--beginPageComponent"
					};
				case FCLayoutUtil.layout.midColumn.level:
					return {
						target: ["list", "detail"],
						// layout: "TwoColumnsMidExpanded",
						viewId: "MiddleViewId",
						container: appId + "---MiddleViewId--middlePageComponent"
					};
				case FCLayoutUtil.layout.endColumn.level:
				default:
					//all components with depth >= 2 are put in the latest column
					return {
						target: ["list", "detail", "detaildetail"],
						// layout: "ThreeColumnsEndExpanded",
						viewId: "EndViewId",
						container: appId + "---EndViewId--detaildetailPageComponent"
					};

			}
		}

		// Determine path the component has to be bound to according to the event obtained from the router
		function fnDeterminePathFromRouteMatched(oEvent, sPattern) {
			var sPath, oKeys, sKey;
			if (sPattern) {
				sPath = sPattern;
			}
			if (!sPath) {
				return "";
			}
			if (sPath.indexOf("/") !== 0) {
				sPath = "/" + sPath;
			}
			oKeys = oEvent.getParameter("arguments");
			if (oKeys) {
				for (sKey in oKeys) {
					// replace each key in pattern with corresponding key in argument
					if (sKey !== "?query") {
						sPath = sPath.replace("{" + sKey + "}", oKeys[sKey]);
					}
				}
				return sPath;
			}
		}

		function fnComponentLoaded(conf, component, bindingPath) {
			//var oRouter = AppComponent.get().getRouter();
			var container = sap.ui.getCore().byId(conf.container);
			container.setPropagateModel(true);
			//var oInstance = container.getComponentInstance();
			//container.setComponent(undefined);
			//if (oInstance !== undefined && null !== oInstance) {
			//oInstance.unbindObject();

			//		}
			jQuery.sap.log.info("Component loaded: bindingPath=" + bindingPath + ", current component=" + container.getComponent() +
				", destination compomnent=" + component.getId() + ", container id=" + conf.container);
			//ComponentContainer will host a different component type. We can undbind the model
			if (container && container.getComponent() !== component.getId()) {
				container.unbindElement();
			}

			StateUtil.resetState(StateUtil.SUBMIT_ON_SIDEFFECT);
			container.setComponent(component);
			container.setVisible(true);
			container.bindElement({
				path: bindingPath,
				events: {
					change: function(oEvent) {
						BusyHelper.hide();
						StateUtil.resetState(StateUtil.SUBMIT_ON_SIDEFFECT);
						if (!container.getBindingContext()) {
							container.setVisible(false);
							//oEvent.getSource().getDataState().getChanges().modelMessages.value[0].type
							//in case of error detection, we try to prevent the Message dialog opening (defaults for all failed requests)
							var fnCallback = function(oError) {
								container.getModel("lastMessage").setProperty("/text", oError.message);
								container.getModel("lastMessage").setProperty("/title", I18n.get().getText("ST_ERROR"));
								FCLayoutUtil.get().setNavigationBackLayout(FCLayoutUtil.layout.endColumn.level);
								oRouter.getTargets().display("notFound");

							};
							MessageUtil.get().preventNextShowMessage(fnCallback);
						}
					},
					dataRequested: function(oEvent) {
						// container.setBusy(true);
						//We hide the container in all case, but if the last action was a side effect. 
						if (StateUtil.hasState(StateUtil.SUBMIT_ON_SIDEFFECT) && true === StateUtil.getState(StateUtil.SUBMIT_ON_SIDEFFECT)) {
							BusyHelper.hide();
							StateUtil.resetState(StateUtil.SUBMIT_ON_SIDEFFECT);
						} else {
							BusyHelper.show();
						}
					},
					dataReceived: function(oEvent) {
						BusyHelper.hide();

					}
				}
			});
			ShellUtil.get().setHierarchy(component);
			ShellUtil.get().setTitle(component, FCLayoutUtil.get().isFullScreen());
		}

		/**
		 * Return a promise which returns the component as a result.
		 *
		 * GetComponent expects that components are already prepared to be loaded in mComponentInstances map.
		 * Upon request, if the component is already loaded it is directly resolved to the promise. Otherwise, the resolution function is launched to load the component.
		 * There is one and only one resolution function launched for a given component name.
		 *
		 * @param {string} sComponentName the name of the required component
		 *
		 */
		function fnGetComponent(sComponentName) {
			if (bDestroyed === true) {
				throw new Error("Application is destroyed. Components could no longer be loaded!");
			}

			if (!mComponentInstancesConf.has(sComponentName)) {
				throw new Error("Component is not prepared for loading!");
			}

			//oComp contains {id: string, pattern: string, level: integer, entity:string, resolve:function}
			var oComp = mComponentInstancesConf.get(sComponentName);

			var oPromise = new Promise(function(resolve) {
				var oResolvFunc = function(comp) {
					if (!mComponentInstances.has(sComponentName)) {
						mComponentInstances.set(sComponentName, comp);
					}
					resolve(comp);
				};
				if (mComponentInstances.has(sComponentName)) {
					resolve(mComponentInstances.get(sComponentName));
				} else if (mComponentInstancesLock.has(sComponentName)) {
					mComponentInstancesLock.get(sComponentName).then(oResolvFunc);
				} else {
					var oPromiseComp = Promise.resolve().then(oComp.resolve);
					mComponentInstancesLock.set(sComponentName, oPromiseComp);
					oPromiseComp.then(oResolvFunc);
				}
			});

			return oPromise;
		}

		/**
		 * Assumes that we are only looking for corresponding DetailPage component
		 *
		 * @return: Promise to the component
		 */
		function fnGetComponentFromName(sName) {
			var component = undefined;
			mComponentInstancesConf.forEach(function(v, k) {
				if (k.endsWith("DetailPage." + sName)) {
					component = fnGetComponent(v.id);
				}
			});
			if (undefined === component) {
				throw new Error("Could not retrieve component from its name '" + sName + "'. Could not complete");
			}
			return component;
		}

		/**
		 * Function to unbind element from container.
		 * @param {int} iLevel: depth level from which we unbind elements. For instance, iLevel === 1 (first ObjectPage), we unbind elements from components/containers of depth 2, 3, 4, etc. (if they have been loaded))
		 *
		 */
		function _fnUnbindContainer(iLevel) {
			var actualLevelConf = getConfigFromLevel(iLevel);
			//jQuery.sap.log.setLevel(jQuery.sap.log.Level.INFO);

			jQuery.sap.log.info("Unbind container: deepestLevel=" + iComponentDeepestLevel + ", iLevel=" + iLevel);
			for (var i = iLevel + 1; i <= iComponentDeepestLevel; ++i) {
				var conf = getConfigFromLevel(i);
				var container = conf && sap.ui.getCore().byId(conf.container);

				if (actualLevelConf.container === conf.container) {
					jQuery.sap.log.info("Unbind container is skipped at level=" + i + " for container=" + conf.container);
					//unbind once, then that's enough!
					//container.unbindElement();
					break;
				}
				if (container) {
					jQuery.sap.log.info("Unbind container for level=" + i + " for container=" + conf.container);
					container.unbindElement();
				}
			}
		}

		/**
		 * This function create a route entry for each of the component promise configuration previously read.
		 * It also attaches the route matched event handler to trigger navigation and component container rebinding.
		 *
		 * We do assume mComponentInstancesConf is properly loaded
		 *
		 */
		function _doConfigureRoutes() {
			//var t0 = performance.now();
			var that = this;

			//forcing adding leading slash that will be removed at first routing load
			if (HashChanger.getInstance().getHash() === "") {
				HashChanger.getInstance().replaceHash("/");
			} else if (HashChanger.getInstance().getHash().startsWith("/")) {
				HashChanger.getInstance().replaceHash("/" + HashChanger.getInstance().getHash());
			}

			//For each promises, we get the component and store it in the component map.
			//Then, we create the route and attach a generic binding behaviour when route is matched.
			//For instance, /TravelRequests(Pernr='00181086',Tripno='0000019085') path will match the TravelRequests detail page. The component will get its context bound to this path.
			mComponentInstancesConf.forEach(function(compInstanceConfValue, compInstanceConfKey) {

				compInstanceConfValue.routes.forEach(function(v, k) {
					var conf = getConfigFromLevel(v.level);
					var sRouteName = v.pattern || compInstanceConfValue.id;
					oRouter.addRoute({
						name: sRouteName,
						pattern: v.pattern,
						target: conf.target,
						layout: conf.layout
					});

					//console.log("Adding route for pattern " + v.pattern);
					oRouter.getRoute(sRouteName).attachPatternMatched(function(
						oEvent) {

						//Backward navigation should be prevented if the destination trip is a newly created trip whereas there is none in the cluster.
						var sHash = sap.ui.core.routing.HashChanger.getInstance().getHash();
						var oCurrentTripContext = ODataModelUtil.get().getCurrentTripContext();
						var sDestinationTripNo = sHash.match(/Tripno='(\d+)'/) && sHash.match(/Tripno='(\d+)'/)[1];
						var sDestinationPernr = sHash.match(/Pernr='(\d+)'/) && sHash.match(/Pernr='(\d+)'/)[1];
						if (!Utils.isEmptyObjectOrString(oCurrentTripContext.BindingPath) && !Utils.isEmptyObjectOrString(sDestinationTripNo)) {
							//XXX if we are leaving an initial trip to another one, we might notify/warn the user. Currently, a hard redirection is performed
							//backward navigation with initial trip involved
							var sCurrentTripNo = oCurrentTripContext && oCurrentTripContext.Tripno;

							switch (sap.ui.core.routing.History
								.getInstance().getDirection()) {
								case sap.ui.core.routing.HistoryDirection.Backwards:
									if (!Utils.isEmptyObjectOrString(sDestinationTripNo) && !Utils.isEmptyObjectOrString(sCurrentTripNo) && TravelUtil.TripNumber
										.Initial !==
										//we are trying to navigate back to an initial trip. This is not possible.
										sCurrentTripNo && TravelUtil.TripNumber.Initial === sDestinationTripNo) {
										window.history.back(); //continue going back!!
										return;
									}
									break;

								case sap.ui.core.routing.HistoryDirection.Forwards:
									if (!Utils.isEmptyObjectOrString(sDestinationTripNo) && !Utils.isEmptyObjectOrString(sCurrentTripNo) && TravelUtil.TripNumber
										.Initial !==
										//we are trying to navigate back to an initial trip. This is not possible.
										sCurrentTripNo && TravelUtil.TripNumber.Initial === sDestinationTripNo) {
										window.history.forward(); //continue going forward!!
										return;
									}
									break;
							}

							//forward navigation with initial trip involved

							//invalidate trip header only if trip number are different to refresh it if we navigate to it
							var sContextTripNo = oCurrentTripContext.BindingPath.match(/Tripno='(\d+)'/) && oCurrentTripContext.BindingPath.match(
								/Tripno='(\d+)'/)[1];
							var aPath = [];
							if (sDestinationTripNo !== sContextTripNo) {
								var sDestinationTripContextPath = oCurrentTripContext.BindingPath.replace(/Tripno='\d+'/,
									"Tripno='" + sDestinationTripNo + "'");
								if (sDestinationTripNo !== TravelUtil.TripNumber.Initial) {
									_oModel.invalidateEntry(sDestinationTripContextPath);
									Object.getOwnPropertyNames(_oModel.getObject("/")).filter(function(e) {
										if (e.indexOf("Tripno='" + sDestinationTripNo + "'") > -1) {
											_oModel.invalidateEntry("/" + e);
										}
									});
								}

								//invalidate initial entries only when trip was inital before.
								if (sContextTripNo === TravelUtil.TripNumber.Initial) {
									Object.getOwnPropertyNames(_oModel.getObject("/")).filter(function(e) {
										if (e.indexOf("Tripno='" + TravelUtil.TripNumber.Initial + "'") > -1) {
											_oModel.invalidateEntry("/" + e);
										}
									});
								}
							}
						}

						var path = fnDeterminePathFromRouteMatched(oEvent, v.pattern);
						//No need to change binding of the root view (corresponding to the ListPage)
						if (Utils.isEmptyObjectOrString(path)) {
							//trip context exists (pernr and tripno), we unlock the trip through an exit application
							if (!Utils.isEmptyObjectOrString(oCurrentTripContext.Pernr) && !Utils.isEmptyObjectOrString(oCurrentTripContext.Tripno)) {
								var listPageComponentPromise = fnGetComponent(_oSettings.rootComponent);
								listPageComponentPromise.then(function(comp) {
									comp.exitApplication();
								});
							}

							NavigationUtil.navigateToRoot();
							ShellUtil.get().clearShell();
							_fnUnbindContainer(0);
							return;
						}
						var bindPaths = NavigationUtil.bindingPaths(path).paths;
						var tripBindingPath = v.level === FCLayoutUtil.layout.beginColumn.level ? path : bindPaths[0];
						ODataModelUtil.get().saveCurrentTripContext({
							BindingPath: tripBindingPath
						});
						NavigationUtil.adjustLayout();
						//for each parent path, we determine if the component is present in the column and assign the binding context if necessary
						//XXX order of requests should be respected. Level 1 (Trvel request) before Level 2 (cost assignments for example)
						var aComponentPromisesConf = [];
						var aComponentPromises = [];

						$.each(bindPaths, function(j, bindingPath) {
							var level = j + 1;
							var conf = getConfigFromLevel(level);
							var component;
							if (level !== v.level) {
								var sName = /\/(\w+)\(/.exec(bindingPath);
								sName = sName && sName[1];
								if (Utils.isEmptyObjectOrString(sName)) {
									throw new Error("Could not determine component name. Could not complete");
								}
								component = fnGetComponentFromName(sName);
							} else {
								component = fnGetComponent(compInstanceConfValue.id);
							}

							aComponentPromisesConf.push({
								conf: conf,
								level: level,
								bindingPath: bindingPath
							});
							aComponentPromises.push(component);
						});
						//finalize component loading all at once (generation completed for the required components)
						Promise.all(aComponentPromises).then(function(aComponents) {
							var highestLevel;
							//ordered list of entity set (for example: TravelExpenses, Destinations, CostAssignments)
							var aEntitySet = aComponents.map(function(item) {
								return item.sEntitySet;
							});
							aComponents.forEach(function(comp, i) {
								var oConf = aComponentPromisesConf[i];
								highestLevel = highestLevel && highestLevel > oConf.level ? highestLevel : oConf.level;
								comp.promiseComponentCreated.then(function(oComp) {
									//Adjust dynamic values, ie level, breadcrumbs, shell navigation, etc.
									var oViewModel = oComp.getModel("view");
									oViewModel.setProperty("/level", oConf.level);
									comp.promiseViewProcessed.then(function(oController) {
										if (oController && oController.adjustDynamicValues && typeof oController.adjustDynamicValues === "function") {
											oController.adjustDynamicValues(aEntitySet);
										}
									});
									/*
									if (comp.getRootControl && typeof comp.getRootControl === "function") {
									  var aContentAggregation = comp.getRootControl().getAggregation("content");
									  if (aContentAggregation && aContentAggregation.length > 0) {
									    var oFirstView = aContentAggregation[0];
									    if (oFirstView && oFirstView.getController && typeof oFirstView.getController === "function") {
									      var oController = oFirstView.getController();
									      if (oController && oController.adjustDynamicValues && typeof oController.adjustDynamicValues === "function") {
									        oController.adjustDynamicValues(aEntitySet);
									      }
									    }
									  }
									}
									*/
									fnComponentLoaded(oConf.conf, oComp, oConf.bindingPath);
								});
							});
							//All required components are know being loaded/bound to the according component container.
							//We'd like to make sure that all other component containers (higher than the highest loaded and required container) are unbounded
							var iLevel = highestLevel;
							_fnUnbindContainer(iLevel);
						});

					}, that);

					if (compInstanceConfValue.id.indexOf("ListPage") != -1) {
						fnGetComponent(compInstanceConfValue.id).then(function(comp) {
							//initial app component loaded, we set the initial layout and hash
							var sHash = HashChanger.getInstance().getHash();
							if (sHash === "/") { //root
								FCLayoutUtil.get().setNavigationLayout("", 0, true);
								HashChanger.getInstance().replaceHash("");
							} else if (sHash.indexOf("/") === 0) {
								HashChanger.getInstance().replaceHash(sHash.substring(1));
							} else {
								HashChanger.getInstance().replaceHash("/" + sHash);
							}

						}); //force loading
					}
				});
			});

		}

		/**
		 * AppComponent instance does initialize all components provided by the Reuse
		 */
		function createInstance(oComponent, oModel, oSettings) {
			bDestroyed = false;
			_oComponent = oComponent;
			_oModel = oModel;
			// In case of externalized app descriptor we simulate 'sap.ui.generic.app' entry
			oSettings.appDescriptor = {
				"sap.ui.generic.app": oSettings.appDescriptor
			};
			_oSettings = oSettings;

			oComponent.setModel(sap.ui.getCore().getMessageManager().getMessageModel(), "message");
			oComponent.setModel(models.createDeviceModel(), "device");
			oComponent.setModel(models.createGlobalModel(oComponent), "_global");
			_initRouter();
			_doProcessConfig();
			_doConfigureRoutes();

			oComponent.oShellServicePromise =
				oComponent.getService("ShellUIService").catch(function() {
					jQuery.sap.log.warning("No ShellService available");
				});

			I18n.init(oComponent);
			_oModel.attachRequestFailed(function(oError) {
				var bFromRequestFailed = true;
				MessageUtil.get().showMessage(oError, bFromRequestFailed);
			});
			oComponent.setModel(new sap.ui.model.json.JSONModel({}), "lastMessage");

			function fnGetRouter() {
				return oRouter;
			}

			function fnGetShellService() {
				return oComponent.oShellServicePromise;
			}

			function fnUpdateGlobalModel(sPath, oValue) {
				var oGlobalModel = oComponent.getModel("_global");
				var oContext = new Context(oGlobalModel, "/");
				oGlobalModel.setProperty(sPath, oValue, oContext);
			}

			function fnGetGlobalModel() {
				return oComponent.getModel("_global");
			}

			function fnEagerLoad(iMillisecs) {
				var timeout = iMillisecs;
				var step = iMillisecs > 2000 ? iMillisecs - 1000 : 1000;

				mComponentInstancesConf.forEach(function(v, k) {
					//eager load the components with a bit of delay
					var s = new Date().getSeconds();
					setTimeout(function() {
						try {
							fnGetComponent(v.id); //force creating the component and loading all dependencies
						} catch (e) {
							$.sap.log.error("Component could not be loaded:" + e);
						}
					}, timeout);
					timeout = timeout + step;
				});
			}

			function fnGetModel() {
				return _oModel;
			}

			/**
			 * AppComponent destroy needs to make sure that no objects handled by the framework remain in memory.
			 * We do safely destroy the different objects to free IDs and reallow further app init
			 *
			 * Currently, it means:
			 * <ul>
			 * <li>free up the pointer to the application component</li>
			 * <li>free up settings that were passed as parameter</li>
			 * <li>free up the pointer to the OData model</li>
			 * <li>free up the config that was based from manifest</li>
			 * <li>destroy oRouter</li>
			 * <li>destroy each of the created components (ListPage, ObjectPages)</li>
			 * <li>free up internal maps to handle component loading</li>
			 * </ul>
			 *
			 * @param {function} fnCallback callback function for the ExitApplication function imports. It is executed in case of function import success or error.
			 * @return a Promise that destruction is complete
			 */
			function fnDestroy(fnCallback) {
				return new Promise(function(resolve) {
					var fnSuccessOrError = function() {
						_oComponent = null;
						_oSettings = null;
						_oModel = null;

						mComponentInstances.forEach(function(v, k) {
							v.destroy();
						});

						mComponentInstances = new Map();
						mComponentInstancesLock = new Map();
						mComponentInstancesConf = new Map();
						_oConfig = null;
						oRouter.destroy();
						oRouter = null;

						I18n.destroy();

						if (fnCallback && "function" === typeof fnCallback) {
							fnCallback(arguments);
						}
						resolve();
					};

					var listPageComponentPromise = fnGetComponent(_oSettings.rootComponent);
					//timing is important. We retrieve the component, then we indicate that it is destroyed.
					bDestroyed = true;
					listPageComponentPromise.then(function(comp) {
						comp.exitApplication({
							fnSuccess: fnSuccessOrError,
							fnError: fnSuccessOrError,
							bDestroy: true
						});
					});
				});

			}

			try {
				//Customizing configuration no longer available above ui5 1.97.
				//using synchronous require, but loading through asynchronous require... 
				//If we are using [] within require, we do not control/understand the callback fn that were not called sometimes
				//If we are using solely the no array version, the CustomizingConfiguration was never loaded
				//This will dump in ui5 gt than 1.97, and we provide defensive code if for some reason the module is not loaded
				sap.ui.require(["sap/ui/core/CustomizingConfiguration"]);
				var CustomizingConfiguration = sap.ui.require("sap/ui/core/CustomizingConfiguration");
				if (undefined !== CustomizingConfiguration) {
					// monkey patch the sap.ui.core.CustomizingConfiguration#getControllerExtension:
					var fGetControllerExtension = CustomizingConfiguration.getControllerExtension;
					CustomizingConfiguration.getControllerExtension = function(sControllerName, vObject) {
						//var oComponent = fnGetComponent(vObject),
						//	sComponentId = oComponent && oComponent.getId(),
						/*if (sControllerName.startsWith("sap.fin.travel.lib.reuse.DetailPage")){
							//vObject= sControllerName;
							//Component id provided by vObject is the actual extension key in the DetailPage manifest
							//Controller name is too generic as all the different DetailPages do have the name sap.fin.travel.lib.reuse.DetailPage.controller.DetailPage
							sControllerName = vObject;
							jQuery.noop();
						}*/
						var oResultConfig = fGetControllerExtension.call(CustomizingConfiguration, sControllerName, vObject);
						return oResultConfig;
					};
				}
			} catch (e) {
				jQuery.sap.log.warning("Customizing Configuration no longer available above ui5 1.97");
			}

			return {
				getConfig: getConfig,
				getRouter: fnGetRouter,
				getGlobalModel: fnGetGlobalModel,
				updateGlobalModel: fnUpdateGlobalModel,
				getAppModel: fnGetModel,
				getComponent: fnGetComponent,
				getRootComponent: function() {
					return fnGetComponent(_oSettings.rootComponent);
				},
				getShellService: fnGetShellService,
				destroy: fnDestroy,
				eagerLoad: fnEagerLoad,
				isDestroyed: function() {
					return bDestroyed;
				}
			};
		}

		var _oInstance;
		var _oDestroyPromise;

		return {

			get: function() {
				if (!_oInstance) {
					throw new Error("AppComponent has not been initialized yet.");
				}
				return _oInstance;
			},

			/*
			 * Init the AppComponent according to the giving private global model.
			 * One and only one instance shall be created.
			 */
			init: function(oComponent, oFCL, oModel, oSettings) {
				var fnInit = function() {
					_oInstance = createInstance(oComponent, oModel, oSettings);
					//init FCL layout looking first if app descriptor is externalized
					FCLayoutUtil.init(oFCL, _oInstance, getConfig());
					PaginatorHelper.init(_oInstance);
					ODataModelUtil.init(_oInstance);
					ShellUtil.init(_oInstance);

					/*
					var sHash = HashChanger.getInstance().getHash();
					if (sHash.indexOf("/") === 0) {
						sHash = sHash.slice(1);
					} else {
						sHash = "/".concat(sHash);
					}

					NavigationUtil.navigate(sHash);
					NavigationUtil.adjustLayout();
					*/

					//_oInstance.eagerLoad(5000);
				};
				//if a destroy is still in progress, wait a bit for the initialization
				if (_oDestroyPromise) {
					_oDestroyPromise.then(fnInit);
				} else {
					fnInit();
				}

			},

			destroy: function(fnCallback) {
				if (!_oInstance) {
					throw new Error("AppComponent has not been initialized yet.");
				}
				_oDestroyPromise = _oInstance.destroy(fnCallback);
				_oDestroyPromise.then(function() {
					//Destroy is real now, we can no longer use the created instance
					_oInstance = null;
					FCLayoutUtil.destroy();
					PaginatorHelper.destroy();
					ODataModelUtil.destroy();
					ShellUtil.destroy();
					FragmentHelper.destroy();
					_oDestroyPromise = null;
				});

			}
		};
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/AppComponent.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.FileUploadHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	/*global jQuery: false, sap: false */
	(function() {
		"use strict";
		jQuery.sap.declare("sap.fin.travel.lib.reuse.util.FileUploadHelper");

		jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained

		sap.fin.travel.lib.reuse.util.FileUploadHelper = {};

		/*****************************************************************************************************************
		 *  File Upload Helper
		 *****************************************************************************************************************/

		/**
		 * Proposing a generic file size exceed handler displaying a Message box pop up
		 * @param {Event} oEvent Description can be found at
		 * https://sapui5.hana.ondemand.com/#docs/api/symbols/sap.m.UploadCollection.html#event:fileSizeExceed and at https://www.w3.org/TR/FileAPI/#dfn-filelist
		 * @param {Int} iMaxFileSize Max size in Mb
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper.fileSizeExceedHandler = function(oEvent, iMaxFileSize) {
			var aMessage = [];
			var sFileName = oEvent.getParameter("fileName");
			var sFileSize = oEvent.getParameter("fileSize");
			sFileSize = Math.round(sFileSize * 100) / 100;
			sFileSize += " MB";
			var sMaxFileSize = Math.round(iMaxFileSize * 100) / 100 + " MB";
			var oResourceBundle = sap.fin.travel.lib.reuse.util.FileUploadHelper._getResourceBundle();
			aMessage.push(oResourceBundle.getText("FILEUPLOAD_ERROR_FILE_SIZE", [sFileSize, sMaxFileSize]));
			sap.fin.travel.lib.reuse.util.MessageUtil.get().showMessage({
				error: oResourceBundle.getText("FILEUPLOAD_ERROR_FILE_BEFORE_UPLOAD", sFileName),
				detail: aMessage.join("\n"),
				title: oResourceBundle.getText("ERROR")
			});
		};

		/**
		 * Proposing a generic file type mismatch handler displaying a Message box pop up
		 * @param {Event} oEvent Description can be found at
		 * https://sapui5.hana.ondemand.com/#docs/api/symbols/sap.m.UploadCollection.html#event:fileTypeMissmatch and at https://www.w3.org/TR/FileAPI/#dfn-filelist
		 * @param {Array} aAllowedMimeTypes List of allowed file types
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper.fileTypeMissmatchHandler = function(oEvent, aAllowedMimeTypes) {
			var oResourceBundle = sap.fin.travel.lib.reuse.util.FileUploadHelper._getResourceBundle();
			sap.fin.travel.lib.reuse.util.MessageUtil.get().showMessage({
				error: oResourceBundle.getText("FILEUPLOAD_ERROR_FILE_BEFORE_UPLOAD", oEvent.getParameter("fileName")),
				detail: oResourceBundle.getText("FILEUPLOAD_ERROR_FILE_EXTENSION", [oEvent.getParameter("mimeType"), aAllowedMimeTypes]),
				title: oResourceBundle.getText("ERROR"),
			});
		};

		/**
		 * Called before the upload is fired
		 * @param {Event} oEvent Before upload file event
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper.beforeUploadFile = function(oEvent) {
			var oSource = oEvent.getSource();
			var oContext = oSource.getBindingContext();
			var filename = encodeURIComponent(oEvent.getParameter("files")[0].name);
			var oResourceBundle = sap.fin.travel.lib.reuse.util.FileUploadHelper._getResourceBundle();
			var bCreate = oEvent.getSource().getBindingContext().getProperty("Tripno") === sap.fin.travel.lib.reuse.util.TravelUtil.TripNumber.Initial;
			var aMessage = [];
			if (bCreate && !oEvent.getSource().getBindingContext().getProperty("Receiptno")) {
				// It is not possible to add attachment in creation mode only at hearder level
				aMessage.push(oResourceBundle.getText("FILEUPLOAD_ERROR_IN_CREATION_MODE_FILE_BEFORE_UPLOAD"));
			}
			if (aMessage.length > 0) {
				sap.fin.travel.lib.reuse.util.MessageUtil.get().showMessage({
					error: oResourceBundle.getText("FILEUPLOAD_ERROR_FILE_BEFORE_UPLOAD", filename),
					detail: aMessage.join("\n"),
					title: oResourceBundle.getText("ERROR"),
				});
				// abord upload
				throw new Error("Abort upload because of errors");
			}

			// Set the upload URL for the current context
			oSource.setUploadUrl(oContext.getModel().sServiceUrl + oContext.sPath + "/Attachments");

			// Retrieve XSRF token
			var oModel = oContext.getModel();
			var sTokenName = "x-cs" + "rf-token";
			oModel.refreshSecurityToken();
			var sToken = oModel.getHeaders()[sTokenName];
			if (!sToken) {
				jQuery.sap.log.error("Could not get XSRF token");
				sap.fin.travel.lib.reuse.util.MessageUtil.get().showMessage({
					error: oResourceBundle.getText("FILEUPLOAD_ERROR_TOKEN"),
					title: oResourceBundle.getText("ERROR"),
				});
				// abord upload
				throw new Error("Abort upload because of errors");
			}

			// Set header parameters
			var ctdisp = "attachment; filename=\"" + filename + "\"";
			var oCustomerHeaderToken, oCustomerHeaderXRQ, oCustomerHeaderCdisp, oCustomHeaderSlug, oCustomHeaderCtype;

			var aParams = oEvent.getSource().removeAllHeaderParameters();

			// Case of Business document (FileUploader)
			if (oEvent.getParameter("id").indexOf("bus_doc_file_uploader") > -1) {
				// Header Token
				oCustomerHeaderToken = new sap.ui.unified.FileUploaderParameter({
					name: sTokenName,
					value: sToken
				});
				oCustomerHeaderXRQ = new sap.ui.unified.FileUploaderParameter({
					name: "X-Requested-With",
					value: "XMLHttpRequest"
				});

				// Header Content-Disposition
				oCustomerHeaderCdisp = new sap.ui.unified.FileUploaderParameter({
					name: "Content-Disposition",
					value: ctdisp
				});
				oCustomHeaderSlug = new sap.ui.unified.FileUploaderParameter({
					name: "slug",
					value: encodeURIComponent(filename)
				});
				oCustomHeaderCtype = new sap.ui.unified.FileUploaderParameter({
					name: "Content-Type",
					value: "application/octet-stream"
				});

				aParams.forEach(function(oParam) {
					if (oParam.getId() === "Document-Type") {
						oSource.addHeaderParameter(oParam);
					}
				});

				// Case of GOS attachment (FileUploader from the UploadCollection)
			} else {
				// Header Token
				oCustomerHeaderToken = new sap.m.UploadCollectionParameter({
					name: sTokenName,
					value: sToken
				});
				oCustomerHeaderXRQ = new sap.m.UploadCollectionParameter({
					name: "X-Requested-With",
					value: "XMLHttpRequest"
				});

				// Header Content-Disposition
				oCustomerHeaderCdisp = new sap.m.UploadCollectionParameter({
					name: "Content-Disposition",
					value: ctdisp
				});
				oCustomHeaderSlug = new sap.m.UploadCollectionParameter({
					name: "slug",
					value: encodeURIComponent(filename)
				});
				oCustomHeaderCtype = new sap.m.UploadCollectionParameter({
					name: "Content-Type",
					value: "application/octet-stream"
				});
			}
			oSource.addHeaderParameter(oCustomerHeaderToken);
			oSource.addHeaderParameter(oCustomerHeaderXRQ);
			oSource.addHeaderParameter(oCustomerHeaderCdisp);
			oSource.addHeaderParameter(oCustomHeaderCtype);
			oSource.addHeaderParameter(oCustomHeaderSlug);
		};

		/**
		 * In the past, we were parsing the added attachment and manually attaching it to the UploadCollection list. 
		 * We properly refresh the list from the backend.
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper._updateUploadCollection = function(oEvent, oUploadCollection) {
			/*
			// Add created item to the attachments list
			var oResponse = oEvent.getParameters().responseRaw ? oEvent.getParameters().responseRaw : oEvent.getParameters().getParameter(
				"responseRaw");
			var oXmlResponse = new DOMParser().parseFromString(oResponse, "text/xml");
			var oProperties = oXmlResponse.getElementsByTagName("m:properties")[0];

			var aAttributes = [
				new sap.m.ObjectAttribute({
					text: oProperties.getElementsByTagName("d:Uploadedby")[0].childNodes[0].nodeValue
				}),
				new sap.m.ObjectAttribute({
					text: oProperties.getElementsByTagName("d:Uploaddate")[0].childNodes[0].nodeValue
				})
			];

			if (oProperties.getElementsByTagName("d:Attachmenttype")[0].childNodes[0].nodeValue === "AL") {
				aAttributes.push(new sap.m.ObjectAttribute({
					text: oProperties.getElementsByTagName("d:Description")[0].childNodes[0].nodeValue
				}));
			}
			*/
			var oSource = oUploadCollection ? oUploadCollection : oEvent.getSource();
			oSource.getBinding("items").refresh();
		};

		/**
		 * Called when upload of a GOS attachment is finished (1st button)
		 * @param {Event} oEvent On Upload Complete event
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper.onGOSUploadComplete = function(oEvent) {
			// Check if the Upload is successful
			var status = oEvent.getParameters().getParameter("status");
			if (status !== 201) {
				sap.fin.travel.lib.reuse.util.FileUploadHelper._fileUploadFailure(oEvent);
			} else {
				sap.fin.travel.lib.reuse.util.FileUploadHelper._updateUploadCollection(oEvent);
			}
		};

		/**
		 * Called when upload of a Business document is finished (last button)
		 * @param {Event} oEvent On Upload Complete event
		 * @param {sap.m.UploadCollection} oUploadCollection The UploadCollection used to display the whole list of attachments
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper.onBusDocUploadComplete = function(oEvent, oUploadCollection) {
			var oSource = oEvent.getSource();
			// Check if the Upload is successful
			var status = oEvent.getParameters().status;
			if (status !== 201) {
				oSource.abort();
				sap.fin.travel.lib.reuse.util.FileUploadHelper._fileUploadFailure(oEvent);
			} else {
				sap.fin.travel.lib.reuse.util.FileUploadHelper._updateUploadCollection(oEvent, oUploadCollection);
			}

			// Reset file uploader
			oSource.clear();
			oSource.removeAllHeaderParameters();
		};

		/**
		 * Called when upload of URL or note is fired
		 * @param {string} sTitle Title of the note/link
		 * @param {string} sDescription Description of the note/link
		 * @param {boolean} bIsNote True if we upload a note, false if we upload a link
		 * @param {object} oController Controller of the view holding the fileupload control
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper.uploadText = function(sTitle, sDescription, bIsNote, oController, fnSuccess, fnError) {
			var oContext = oController.getBindingContext();
			var oModel = oContext.getModel();
			sap.fin.travel.lib.reuse.util.PersistenceHelper.callFunction(oModel, {
				name: "/UploadText",
				urlParameters: {
					Pernr: oModel.getData(oContext.sPath).Pernr,
					Tripno: oModel.getData(oContext.sPath).Tripno,
					Title: sTitle,
					Text: sDescription,
					IsNote: bIsNote
				},
				success: function() {
					if (typeof fnSuccess === "function") {
						fnSuccess.apply(null, arguments);
					}
					// Refresh the attachments list
					oController.getBinding("items").refresh();
				},
				error: (typeof fnError === "function") ? fnError : sap.fin.travel.lib.reuse.util.FileUploadHelper._onError
			});
		};

		/**
		 * Handler for file delete
		 * @param {Event} oEvent File delete event
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper.deleteUploadedFile = function(oEvent) {
			var oSource = oEvent.getSource();

			var fnSuccess = jQuery.proxy(function() {
				oSource.getBinding("items").refresh();
			}, this);

			var mParameters = {
				success: fnSuccess,
				error: sap.fin.travel.lib.reuse.util.FileUploadHelper._onError
			};
			oSource.getModel().remove("/Attachments(" + encodeURI(oEvent.getParameter("documentId")) + ")", mParameters);
		};

		/**
		 * Handler for file upload failure
		 * @param {Event} oEvent The file upload failure event
		 * @private
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper._fileUploadFailure = function(oEvent) {

			var oFile = oEvent.getParameter("files");
			var fileName = oFile ? oFile[0].name : oEvent.getParameter("fileName");
			var responseRaw = oFile ? oFile[0].responseRaw : oEvent.getParameter("responseRaw");
			var oResourceBundle = sap.fin.travel.lib.reuse.util.FileUploadHelper._getResourceBundle();

			jQuery.sap.log.debug("Upload of file " + fileName + " failed!");

			var errorMessage;
			try {
				var xmlDoc = $.parseXML(responseRaw),
					responseXML = $(xmlDoc),
					message = responseXML.find("message");
				errorMessage = message[0].textContent;
			} catch (e) {
				errorMessage = responseRaw;
			}

			sap.fin.travel.lib.reuse.util.MessageUtil.get().showMessage({
				error: errorMessage,
				title: oResourceBundle.getText("ERROR"),
			});
		};

		/**
		 * Display error message
		 * @param {object} oError Error
		 * @private
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper._onError = function(oError, test) {
			// var oResourceBundle = sap.fin.travel.lib.reuse.util.FileUploadHelper._getResourceBundle();
			// sap.fin.travel.lib.reuse.util.MessageUtil.get().showMessage({
			// 	error: oError.message,
			// 	title: oResourceBundle.getText("ERROR")
			// });
		};

		/**
		 * Return the resource bundle for internationalized strings
		 * @private
		 * @returns {object} Resource Bundle
		 */
		sap.fin.travel.lib.reuse.util.FileUploadHelper._getResourceBundle = function() {
			if (!this.oResourceBundle) {
				this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fin.travel.lib.reuse");
			}
			return this.oResourceBundle;
		};
	}());
}; // end of sap/fin/travel/lib/reuse/util/FileUploadHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.PersistenceHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.PersistenceHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.m.DraftIndicatorState'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/PersistenceHelper", [
		"sap/fin/travel/lib/reuse/util/BusyHelper",
		"sap/fin/travel/lib/reuse/util/MessageUtil",
		"sap/fin/travel/lib/reuse/util/AppComponent",
		"sap/m/DraftIndicatorState",
		"sap/fin/travel/lib/reuse/util/ODataModelUtil",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/ControlUtil",
		"sap/fin/travel/lib/reuse/util/StateUtil"
	], function(BusyHelper, MessageUtil, AppComponent, DraftIndicatorState, ODataModelUtil, Utils, ControlUtil, StateUtil) {
		"use strict";

		function getMethods() {

			/**
			 * Provides the context of a SubmitChange origin. A submit change can be unknown (default), triggered from annotated side effect, triggered from mandatory field side effect, from a sync before an action call, from an item press on a list
			 */
			var SUBMIT_CHANGE_ORIGIN = {
				"UNKNOWN": 0,
				"SIDEEFFECT_ANNOTATION": 1,
				"SIDEEFFECT_MANDATORY": 2,
				"ACTION": 3,
				"ITEM_PRESS": 4,
			};

			Object.freeze(SUBMIT_CHANGE_ORIGIN);

			function fnSuccessWrapper(mSettings, aArgs) {
				if (mSettings && mSettings.success && typeof mSettings.success === "function") {
					mSettings.success.apply(null, aArgs);
				}
			}

			function fnFunctionErrorWrapper(mSettings, aArgs) {
				//We do open the message popover only if not coming from direct field modification (side effects at the moment) (See https://experience.sap.com/fiori-design-web/messaging/)
				if (mSettings && mSettings.submitChangeOrigin && (mSettings.submitChangeOrigin === SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_MANDATORY ||
						mSettings.submitChangeOrigin === SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_ANNOTATION)) {
					$.sap.log.debug("We do not open the message popover automatically in case of single field modification");
				} else if (mSettings == undefined || !ControlUtil.getDialogPopup(mSettings.source)) {
					//if there is no handling for the functional error
					MessageUtil.get().openMessagesPopover();
				}

				if (mSettings && mSettings.functionalError && typeof mSettings.functionalError === "function") {
					mSettings.functionalError.apply(null, aArgs);
				}
			}

			/**
			 * Call a backand function import
			 * @param oModel ODataModel
			 * @param mSettings settings: this object is mandatory
			 *	- name : Name of the function import to call
			 *  - success : success callback method
			 *  - error : error callback method
			 *  - functionalError: error callback method in case of functional error (sap-message with error messages returned along with a successful request :). By default, we take the error callback
			 *  - urlParameters : properties to add as URL parameters
			 *  - settings : properties to add as function import settings
			 *  - control : SAPUI5 control to displayed as "busy" during the function import call
			 */
			function fnCallFunction(oModel, mSettings) {
				//sometimes, functionalError is not filled. Yet, functional error are in still in the model. By default we call the error function to not block the code
				if (mSettings && undefined === mSettings.functionalError) {
					mSettings.functionalError = mSettings.error;
				}

				StateUtil.resetState(StateUtil.SUBMIT_ON_SIDEFFECT);
				var fnSuccessCallback = function(oData, oResponse) {
					BusyHelper.hide(mSettings.control);
					AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Clear);
					if (!MessageUtil.get().handleMessageResponse(oResponse)) {
						fnSuccessWrapper(mSettings, arguments);
					} else {
						fnFunctionErrorWrapper(mSettings, arguments);
					}
					if (mSettings && mSettings.resolve && typeof mSettings.resolve === "function") {
						mSettings.resolve.apply(null);
					}
				};
				var fnErrorCallback = function(oError) {
					BusyHelper.hide(mSettings.control);
					if (mSettings && mSettings.error && typeof mSettings.error === "function") {
						mSettings.error.apply(null, arguments);
					} else {
						MessageUtil.get().showMessage(oError);
					}
					if (mSettings && mSettings.reject && typeof mSettings.reject === "function") {
						mSettings.reject.apply(null);
					}
				};

				var oMetaModel = oModel.getMetaModel();
				var oFunctionImport = oMetaModel.getODataFunctionImport(mSettings.name.split("/")[1]);
				var oSettings = {
					method: oFunctionImport.httpMethod,
					success: fnSuccessCallback,
					error: fnErrorCallback
				};

				if (mSettings.urlParameters) {
					oSettings.urlParameters = mSettings.urlParameters;
				}
				for (var property in mSettings.settings) {
					if (mSettings.settings.hasOwnProperty(property)) {
						oSettings[property] = mSettings.settings[property];
					}
				}

				BusyHelper.show(mSettings.control); // show busy dialog before call the method.
				oModel.callFunction(mSettings.name, oSettings);
			}

			/**
			 * Submit pending changes if exist:
			 * - Display the busy dialog.
			 * Otherwise directly call the success callback function.
			 * If there is no functionalError defined in the mSettings, we call the default error callback function..
			 *
			 * @param oModel ODataModel
			 * @param mSettings properties and callback function. (See: fnCallFunction). There are two specificities: value refreshAfterChange and an attribute 'SubmitChangeOrigin'
			 * <ul>
			 * <li>If the refreshAfterChange property is existing in the settings table, this value is temporarly set globaly on the provided model.
			 * Default state is restored on success or error. This is due to API limitation: submitChange does not allow refreshAfterChange property (only update function allows this parameter)
			 * </li>
			 * <li>
			 * submitChangeOrigin provides an information on the actual origin that triggered the submitChange call. Check @SUBMIT_CHANGE_ORIGIN documentation
			 * </li>
			 * </ul>
			 */
			function fnSubmitChanges(oModel, mSettings) {
				//sometimes, functionalError is not filled. Yet, functional error are in still in the model. By default we call the error function to not block the code
				if (mSettings && undefined === mSettings.functionalError) {
					mSettings.functionalError = mSettings.error;
				}

				var submitOrigin = mSettings && mSettings.submitChangeOrigin || SUBMIT_CHANGE_ORIGIN.UNKNOWN;

				var bSubmitFromSideEffect = submitOrigin === SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_ANNOTATION || submitOrigin === SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_MANDATORY;
				if (bSubmitFromSideEffect) {
					StateUtil.setState(StateUtil.SUBMIT_ON_SIDEFFECT, true);
				} else {
					StateUtil.resetState(StateUtil.SUBMIT_ON_SIDEFFECT);
				}

				//we are not displaying the busy dialog in case of submit change triggered by a mandatory field just filled.
				var bShowBusyHelper = (submitOrigin !== SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_MANDATORY) && (submitOrigin !== SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_ANNOTATION);
				if (oModel.hasPendingChanges()) {
					var fnError = function(oError) {
						BusyHelper.hide();
						AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Clear);
						//restore default value afer our submit operation
						ODataModelUtil.get().handleBackRefreshAfterChange(oModel);
						if (mSettings && mSettings.error && typeof mSettings.error === "function") {
							mSettings.error.apply(null, arguments);
						} else {
							MessageUtil.get().showMessage(oError);
						}
					};
					var fnSuccess = function(oData, oResponse) {
						BusyHelper.hide();
						//restore default value afer our submit operation
						if (mSettings && mSettings.draftIndicator) {
							AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Saved);
						}
						ODataModelUtil.get().handleBackRefreshAfterChange(oModel);
						if (!MessageUtil.get().handleMessageResponse(oResponse)) {
							fnSuccessWrapper(mSettings, arguments);
						} else {
							fnFunctionErrorWrapper(mSettings, arguments);
						}
						MessageUtil.get().cleanValidationMessages();
					};

					if (bShowBusyHelper) {
						BusyHelper.show();
					}

					var oSettings = {
						success: fnSuccess,
						error: fnError
					};

					if (!Utils.isEmptyObjectOrString(mSettings)) {
						for (var property in mSettings.settings) {
							oSettings[property] = mSettings.settings[property];
						}
					}

					ODataModelUtil.get().handleRefreshAfterChange(oModel);
					if (oSettings.hasOwnProperty("refreshAfterChange")) {
						oModel.setRefreshAfterChange(oSettings.refreshAfterChange);
					}
					if (mSettings && mSettings.draftIndicator) {
						AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Saving);
					}
					oModel.submitChanges(oSettings);
				} else {
					// If there is no internal error then call success method. Otherwise call functionalError
					if (!MessageUtil.get().hasInternalError()) {
						fnSuccessWrapper(mSettings, arguments[0]);
					} else {
						fnFunctionErrorWrapper(mSettings, arguments[0]);
					}
				}
			}

			/**
			 * Apply modifications/changes made in the sub entity.
			 * Submit changes and Draft indicator handling.
			 * @param oModel ODataModel
			 */
			function fnApply(oModel, mSettings) {
				var fnSuccessCallback = function(oData, oResponse) {
					BusyHelper.hide(mSettings.control);
					if (!MessageUtil.get().handleMessageResponse(oResponse)) {
						AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Saved);
						if (mSettings && mSettings.success && typeof mSettings.success === "function") {
							mSettings.success.apply(null, arguments);
						}
					}
				};
				var fnFunctionalError = function(oData, oResponse) {
					AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Clear);
					if (mSettings && mSettings.functionalError && typeof mSettings.functionalError === "function") {
						mSettings.functionalError.apply(null, arguments);
					}
				};
				var fnErrorCallback = function(oError) {
					AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Clear);
					if (mSettings && mSettings.error && typeof mSettings.error === "function") {
						mSettings.error.apply(null, arguments);
					} else {
						MessageUtil.get().showMessage(oError);
					}
				};

				AppComponent.get().updateGlobalModel("/draft", DraftIndicatorState.Saving);
				fnSubmitChanges(oModel, {
					success: fnSuccessCallback,
					error: fnErrorCallback,
					functionalError: fnFunctionalError
				});
			}

			/**
			 * Create a new entry in the datamodel.
			 * @param oModel ODataModel
			 * @param sBindingPath binding path
			 * @param mSettings properties and callback function. (See: fnCallFunction).
			 * @return createdContext (See: ODataModel.createEntry)
			 */
			function fnCreateEntry(oModel, sBindingPath, mSettings) {
				var createdContext;

				var fnSuccessCallback = function(oData, oResponse) {
					//BusyHelper.hide();
					if (typeof mSettings.success === "function") {
						mSettings.success(oData, oResponse);
					}
				};

				var fnErrorCallback = function(oError) {
					//BusyHelper.hide();
					//do not try to recreate the entry later on
					oModel.deleteCreatedEntry(createdContext);
					if (typeof mSettings.error === "function") {
						mSettings.error(oError);
					}
				};

				//BusyHelper.show(); // show busy dialog before call the method.
				//no busy helper, the create entry does not perform a backend call.
				createdContext = oModel.createEntry(sBindingPath, {
					properties: mSettings.properties,
					success: fnSuccessCallback,
					error: fnErrorCallback,
					refreshAfterChange: true
				});

				//send the created context to the backend for synchronization (along with other requests if existing)
				if (mSettings.submit === true || mSettings.submit === undefined) {
					fnSubmitChanges(oModel);
				}

				return createdContext;

			}

			function fnCreateDeepEntry(oModel, sBindingPath, oEntity, mSettings) {
				StateUtil.resetState(StateUtil.SUBMIT_ON_SIDEFFECT);

				var createdContext;

				var fnSuccessCallback = function(oData, oResponse) {
					BusyHelper.hide();
					if (!MessageUtil.get().handleMessageResponse(oResponse)) {
						fnSuccessWrapper(mSettings, arguments);
					} else {
						fnFunctionErrorWrapper(mSettings, arguments);
					}
					MessageUtil.get().cleanValidationMessages();
				};

				var fnErrorCallback = function(oError) {
					BusyHelper.hide();
					if (typeof mSettings.error === "function") {
						mSettings.error(oError);
					}
				};

				//no busy helper, the create entry does not perform a backend call.
				BusyHelper.show();
				oModel.create(sBindingPath, oEntity, {
					success: fnSuccessCallback,
					error: fnErrorCallback
				});
			}

			/**
			 * Check that oModel contains at least one entity type for the given pernr and tripno
			 *
			 * @param {object} oModel is a valid oData model on which we invalidate and refresh entries if necessary
			 * @param {object} mParameters with Tripno, Pernr, EntityType
			 * @return {boolean} Whether the oModel contains at least one entry for the given mParameter
			 */
			function fnModelContainsEntity(oModel, mParameters) {
				return Object.getOwnPropertyNames(oModel.getObject("/")).filter(function(e) {
					return e.startsWith(mParameters.EntityType + "(");
				}).some(function(e) {
					return -1 !== e.indexOf("Tripno='" + mParameters.Tripno + "'") && -1 !== e.indexOf("Pernr='" + mParameters.Pernr + "'");
				});
			}

			/**
			 * This function invalidate entries corresponding to the given trip/pernr tuple.
			 * It means that further requests to theses objects will trigger a backend call.
			 * In addition, this function makes sure that any object currently displayed to the user are immediately refreshed.
			 * This method uses the invalidateEntries from ODataModelUtil.
			 *
			 * @param {object} oModel is a valid oData model on which we invalidate and refresh entries if necessary. The context should be at view level to be sure to refresh all related bindings
			 * @param {object} mParameters trip and personal numbers, refreshAfterChange.
			 */
			function fnInvalidateEntries(oModel, mParameters) {
				ODataModelUtil.get().invalidateEntries(oModel, mParameters);
			}

			/**
			 * This function invalidate entries corresponding to the given path.
			 *
			 * @param {object} oModel is a valid oData model on which we invalidate and refresh entries if necessary. The context should be at view level to be sure to refresh all related bindings
			 * @param {object} sPath path of the object to invalidate.
			 */
			function fnInvalidateEntry(oModel, sPath) {
				ODataModelUtil.get().invalidatEentry(oModel, sPath);
			}

			/**
			 * Our application allows to cancel/delete a complete trip.
			 * But in some cases, sub-entities have pending changes.
			 * We do call this function to clean-up the pending changes of the corresponding oModel whenever its needed.
			 *
			 * For example, if there are pending changes on entity "Destinations(Pernr='00123045',Tripno='0000000000',KeyStop='%202',StopType='N')", these changes would be removed
			 *
			 * @param {object} oModel
			 * @param {string} sPernr
			 * @param {string} sTripno
			 */
			function fnResetSubEntityPendingChanges(oModel, sPernr, sTripno) {
				var oPendingChanges = oModel.getPendingChanges();
				if (!Utils.isEmptyObjectOrString(oPendingChanges)) {
					Object.getOwnPropertyNames(oPendingChanges)
						.filter(function(e) {
							return -1 !== e.indexOf("Pernr='" + sPernr + "'");
						}).filter(function(e) {
							return -1 !== e.indexOf("Tripno='" + sTripno + "'");
						}).forEach(function(e, i) {
							if (0 !== e.indexOf("/")) {
								e = "/" + e;
							}
							//reset the changes
							if (oModel.getProperty(e)) {
								oModel.resetChanges([e]);
							}

						});
				}
			}

			/**
			 * Wrapper around cancel trip function.
			 * In addition to the call to cancel trip, we do invalidate entries on successfull cancellation
			 * @param oModel ODataModel
			 * @param mSettings properties and callback function. (See: fnCallFunction). settings entity is used to convey the flag refreshAfterChange which allows to bypass the default immediate refresh of bound entities in case of successful cancellation
			 */
			function fnCancelTripFunction(oModel, mSettings) {
				var bInvalidate = true;
				if (mSettings && undefined !== mSettings.invalidate) {
					bInvalidate = mSettings.invalidate;
				}
				var fnInvalidateOnSuccess = function() {
					if (mSettings && mSettings.success && typeof mSettings.success === "function") {
						mSettings.success.apply(null, arguments);
					}

					if (bInvalidate) {
						//invalidate entries after applying the success function. 
						fnInvalidateEntries(oModel, {
							Pernr: mSettings.urlParameters.Pernr,
							Tripno: mSettings.urlParameters.Tripno,
							refreshAfterChange: mSettings.settings.refreshAfterChange
						});
					}

				};

				fnCallFunction(oModel, {
					name: "/CancelTrip",
					success: fnInvalidateOnSuccess,
					error: mSettings && mSettings.error,
					urlParameters: mSettings && mSettings.urlParameters
				});
			}

			/**
			 * Read Trigger a GET request to the OData service that was specified in the model constructor.
			 * The data will be stored in the model. The requested data is returned with the response.
			 */
			function fnRead(oModel, sPath, mParameters) {
				oModel.read(sPath, mParameters);
			}

			/**
			 * Trigger a DELETE request to the OData service that was specified in the model constructor.
			 * @param oModel ODataModel
			 * @param sPath binding path
			 * @param mSettings properties and callback function. (See: fnCallFunction).
			 */
			function fnRemove(oModel, sPath, mSettings) {
				StateUtil.resetState(StateUtil.SUBMIT_ON_SIDEFFECT);
				var fnSuccessCallback = function(oData, oResponse) {
					BusyHelper.hide();
					if (!MessageUtil.get().handleMessageResponse(oResponse)) {
						fnSuccessWrapper(mSettings, arguments);
					} else {
						fnFunctionErrorWrapper(mSettings, arguments);
					}
					MessageUtil.get().refreshValidationMessages(sPath);
				};
				var fnErrorCallback = function(oError) {
					BusyHelper.hide();
					if (mSettings && mSettings.error && typeof mSettings.error === "function") {
						mSettings.error(oError);
					}
				};

				//remove manually the pending changes on the entity being deleted
				//sap ui5 does hold it otherwise and later try to sync it for nothing (despite having no pending changes shown after the remove...)
				if (oModel.getProperty(sPath)) {
					oModel.resetChanges([sPath]);
				}

				BusyHelper.show(); // show busy dialog before call the method.
				oModel.remove(sPath, {
					success: fnSuccessCallback,
					error: fnErrorCallback,
					refreshAfterChange: mSettings && mSettings.refreshAfterChange
				});
			}

			return {
				submitChanges: fnSubmitChanges,
				apply: fnApply,
				callFunction: fnCallFunction,
				createEntry: fnCreateEntry,
				createDeepEntry: fnCreateDeepEntry,
				invalidateEntries: fnInvalidateEntries,
				invalidateEntry: fnInvalidateEntry,
				cancelTrip: fnCancelTripFunction,
				read: fnRead,
				remove: fnRemove,
				containsEntity: fnModelContainsEntity,
				resetSubEntityChanges: fnResetSubEntityPendingChanges,
				SUBMIT_CHANGE_ORIGIN: SUBMIT_CHANGE_ORIGIN
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/PersistenceHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.ShareHelper')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.ShareHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	sap.ui.define("sap/fin/travel/lib/reuse/util/ShareHelper", [
		"sap/fin/travel/lib/reuse/util/AppComponent"
	], function(AppComponent) {
		"use strict";

		function fnHandleEmail(oEvent) {
			var oGlobalModel = AppComponent.get().getGlobalModel();
			var sObjectTitle = oGlobalModel.getProperty("/share/title");
			var sObjectSubtitle = oGlobalModel.getProperty("/share/subTitle");
			var sEmailSubject = sObjectTitle;
			if (sObjectSubtitle) {
				sEmailSubject = sEmailSubject + " - " + sObjectSubtitle;
			}

			sap.m.URLHelper.triggerEmail(null, sEmailSubject, document.URL);
		}

		return {
			handleEmail: fnHandleEmail
		};

	});
}; // end of sap/fin/travel/lib/reuse/util/ShareHelper.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controller.Begin.controller')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.controller.Begin.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/controller/Begin.controller", [
		"sap/ui/core/mvc/Controller",
		"sap/fin/travel/lib/reuse/util/AppComponent"
	], function(Controller, AppComponent) {
		"use strict";
		return Controller.extend("sap.fin.travel.lib.reuse.controller.Begin", {
			onInit: function() {
				var oBeginPageContainer = this.getView().byId("beginPageComponent");
				this.oGenericListPageComponent = AppComponent.get().getRootComponent();
				this.oGenericListPageComponent.then(function(res) {
					oBeginPageContainer.setPropagateModel(true);
					oBeginPageContainer.setComponent(res);
				});

				jQuery.noop();
			}
		});
	});
}; // end of sap/fin/travel/lib/reuse/controller/Begin.controller.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.controls.UploadCollectionExtension')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	// 
	jQuery.sap.declare('sap.fin.travel.lib.reuse.controls.UploadCollectionExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
	jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained
	jQuery.sap.require('sap.m.UploadCollection'); // unlisted dependency retained
	jQuery.sap.require('sap.m.library'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/controls/UploadCollectionExtension", [
			"jquery.sap.global",
			"jquery.sap.resources",
			"./../library",
			"sap/m/UploadCollection",
			"sap/fin/travel/lib/reuse/util/formatters",
			"sap/fin/travel/lib/reuse/util/FileUploadHelper",
			"sap/m/library",
			"sap/fin/travel/lib/reuse/util/TravelUtil",
			"sap/ui/model/json/JSONModel",
			"sap/fin/travel/lib/reuse/util/MessageParser",
			"sap/fin/travel/lib/reuse/util/Utils"
		],
		function(jQuery, resources, library, UploadCollection, formatter, FileUploadHelper, MobileLibrary, TravelUtil, JSONModel, MessageParser,
			Utils) {
			"use strict";
			var UploadCollectionExtension = UploadCollection.extend("sap.fin.travel.lib.reuse.controls.UploadCollectionExtension", {
				renderer: "sap.m.UploadCollectionRenderer"
			});

			/**
			 * Initialization hook, creating composite parts
			 */
			UploadCollectionExtension.prototype.init = function() {
				var that = this;

				this.bindProperty("uploadEnabled", {
					path: "Tripno",
					formatter: function(iValue) {
						return 0 !== parseInt(iValue);
					}
				});

				this.bFirstRender = true;
				this.sContextPath = "/";

				this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fin.travel.lib.reuse");

				// Create file uploader for Business Documents
				this.oFileUploader = new sap.ui.unified.FileUploader(this.getId() + "-bus_doc_file_uploader", {
					sendXHR: true,
					useMultipart: false,
					enabled: {
						parts: [{
							path: "Tripno"
						}, {
							path: "Receiptno"
						}],
						formatter: function(sTripNo, sReceiptNo) {
							return 0 !== parseInt(sTripNo) || sReceiptNo != undefined;
						}
					},
					placeholder: "test1",
					sameFilenameAllowed: true,
					change: function(oEvent) {
						FileUploadHelper.beforeUploadFile(oEvent);
					},
					typeMissmatch: function(oEvent) {
						FileUploadHelper.fileTypeMissmatchHandler(oEvent, that.oFileUploader.getMimeType());
					},
					fileSizeExceed: function(oEvent) {
						FileUploadHelper.fileSizeExceedHandler(oEvent, that.oFileUploader.getMaximumFileSize());
					},
					uploadComplete: function(oEvent) {
						FileUploadHelper.onBusDocUploadComplete(oEvent, that);
					}
				});

				// Execute standard control method
				sap.m.UploadCollection.prototype.init.apply(this, arguments);

				this.bindProperty("noDataText", {
					parts: [{
						path: "Tripno"
					}, {
						path: "Receiptno"
					}],
					formatter: function(sTripNo, sReceiptNo) {
						return (0 === parseInt(sTripNo) && sReceiptNo == undefined) ? this.oResourceBundle.getText("ATTACHMENT_NO_DATA_UNSAVED_TRIP") :
							"";
					}
				});

				this.bindProperty("noDataDescription", {
					parts: [{
						path: "Tripno"
					}, {
						path: "Receiptno"
					}],
					formatter: function(sTripNo, sReceiptNo) {
						return (0 === parseInt(sTripNo) && sReceiptNo == undefined) ? "" : this._isDragAndDropAllowed() ? this.oResourceBundle.getText(
								"ATTACHMENT_NO_DATA_DRAG_DROP") :
							this.oResourceBundle
							.getText("ATTACHMENT_NO_DATA");
					}
				});

				// Attach event handlers 
				this.attachChange(FileUploadHelper.beforeUploadFile); // For GOS attachments
				this.attachUploadComplete(FileUploadHelper.onGOSUploadComplete);
				this.attachFileDeleted(FileUploadHelper.deleteUploadedFile);
			};

			UploadCollectionExtension.prototype.onBeforeRendering = function() {
				// Execute standard control method
				sap.m.UploadCollection.prototype.onBeforeRendering.apply(this, arguments);

				var that = this;

				// Hide the label
				this.getToolbar().getAggregation("content")[0].setVisible(false);

				// Hide the standar "+" button
				// Can't be done with setVisible(false) because otherwise the File Uploader
				// is not completely instanciated and doesn't work
				this.getToolbar().getAggregation("content")[2].addStyleClass("sapUiHiddenPlaceholder");

				// Sometime BindingContext is not yet defined
				this._buildControl();
				// Make sure binding context is set properly before building the control
				this.attachModelContextChange(function() {
					that._buildControl();
				});
			};

			UploadCollectionExtension.prototype._createIcon = function(item) {
				// Execute standard control method
				var oItemIcon = sap.m.UploadCollection.prototype._createIcon.apply(this, arguments);

				// In case the item is a link (mimetype empty), change the icon
				if (!item.getProperty("mimeType")) {
					oItemIcon.setSrc("sap-icon://chain-link");
				} else if (item.getProperty("mimeType") === "text/plain" && !item.getProperty("fileName").toLowerCase().endsWith(".txt")) {
					oItemIcon.setSrc("sap-icon://notes");
				}
				return oItemIcon;
			};

			UploadCollectionExtension.prototype._onItemPressed = function(event, item) {
				if (item.hasListeners("press")) {
					item.firePress();
				} else if (this.sErrorState !== "Error" && jQuery.trim(item.getProperty("url"))) {
					this._triggerLink(event, item);
				}
			};

			UploadCollectionExtension.prototype._triggerLink = function(event, item) {
				if (this.editModeItem) {
					//In case there is a list item in edit mode, the edit mode has to be finished first.
					this._handleOk(event, this.editModeItem, true);
					if (this.sErrorState === "Error") {
						//If there is an error, the link of the list item must not be triggered.
						return;
					}
					this.sFocusId = event.getParameter("id");
				}
				MobileLibrary.URLHelper.redirect(item.getProperty("url"), true);
			};

			UploadCollectionExtension.prototype.setUploadEnabled = function(bUploadEnabled) {
				// Execute standard control method
				var oUploadCollection = sap.m.UploadCollection.prototype.setUploadEnabled.apply(this, arguments);

				// Update the custom buttons
				var oAddAttachmentButton = sap.ui.getCore().byId(this.getId() + "-addAttachmentButton");
				if (oAddAttachmentButton) {
					oAddAttachmentButton.setEnabled(bUploadEnabled);
				}
				var oAddNoteButton = sap.ui.getCore().byId(this.getId() + "-addNoteButton");
				if (oAddNoteButton) {
					oAddNoteButton.setEnabled(bUploadEnabled);
				}
				var oAddLinkButton = sap.ui.getCore().byId(this.getId() + "-addLinkButton");
				if (oAddLinkButton) {
					oAddLinkButton.setEnabled(bUploadEnabled);
				}
				var oAddBusDocButton = sap.ui.getCore().byId(this.getId() + "-addBusDocButton");
				if (oAddBusDocButton) {
					oAddBusDocButton.setEnabled(bUploadEnabled);
				}

				return oUploadCollection;
			};

			UploadCollectionExtension.prototype._isDragAndDropAllowed = function() {
				// Execute standard control method
				var bIsDragAndDropEnabled = sap.m.UploadCollection.prototype._isDragAndDropAllowed.apply(this, arguments);

				var oBindingContext = this.getBindingContext();
				var bAttaEnabled, bArlEnabled;
				if (oBindingContext) {
					var oConfig = oBindingContext.getProperty("/UserProfiles('" + oBindingContext.getProperty("Pernr") + "')");
					bAttaEnabled = oConfig && oConfig.Attaenabled;
					bArlEnabled = oConfig && oConfig.Arlenabled;
				}
				return bIsDragAndDropEnabled && bAttaEnabled && !bArlEnabled;
			};

			UploadCollectionExtension.prototype.exit = function() {
				// Destroy all elements with stable ids
				this.oFileUploader.destroy();
				var aTbContent = this.getToolbar() && this.getToolbar().getAggregation("content");
				/*eslint-disable guard-for-in*/
				for (var i in aTbContent) {
					aTbContent[i].destroy();
				}
				/*eslint-enable guard-for-in*/
				if (this.oAddBusDocDialog) {
					this.oAddBusDocDialog.destroy();
				}
				if (this.oAddNoteDialog) {
					this.oAddNoteDialog.destroy();
				}
				if (this.oAddLinkDialog) {
					this.oAddLinkDialog.destroy();
				}

				// Execute standard control method
				sap.m.UploadCollection.prototype.exit.apply(this, arguments);
			};

			UploadCollectionExtension.prototype._buildControl = function() {
				var that = this,
					bInReceipt, docTypeForReceipt = "HRITRV_UPL";
				bInReceipt = false;
				if (that.getBindingContext() && that.getBindingContext().getPath() !== that.sContextPath) {
					// The same FileUploader is used, so we need to update the binding context
					that.oFileUploader.setBindingContext(that.getBindingContext());
					that.sContextPath = that.getBindingContext().getPath();

					// Add the new list of buttons at first rendering
					if (that.bFirstRender) {

						var oBindingContext = that.getBindingContext();
						var oConfig = oBindingContext.getProperty("/UserProfiles('" + oBindingContext.getProperty("Pernr") + "')");
						var bUrlAttachment = "${true}"; // Initialy no restriction for ArchiveLink attachments button
						var bAttachmentEditable = "{Attachmenteditable}"; //If disabled, no possibility to delete items nor upload link, note, or BO attachments

						//Attachment at receipt level - Only ArchiveLink attachments supported
						if (oBindingContext.getProperty("Receiptno")) {
							bInReceipt = true;
							oConfig.Attaenabled = false;
							oConfig.Noteenabled = false;
							oConfig.Urlenabled = false;
							bUrlAttachment = "!${DisplayMode}"; // In case of receipt ArchiveLink attachments button is visible only on edit mode.
						}

						// GOS attachments button
						if (oConfig && oConfig.Attaenabled) {
							that.getToolbar().addContent(
								new sap.m.Button({
									id: that.getId() + "-addAttachmentButton",
									icon: "sap-icon://customIcons/custom-add-attachment",
									enabled: "{= parseInt(${Tripno}) !== 0}",
									visible: bAttachmentEditable,
									type: sap.m.ButtonType.Transparent,
									tooltip: that.oResourceBundle.getText("ADD_ATTACHMENT"),
									press: function() {
										// Use the file uploader from Upload Collection
										var sTouchEvent = 'onclick' in window ? 'click' : 'touchstart';
										$(that._oFileUploader.oFileUpload).trigger(sTouchEvent);
									}
								})
							);

						}

						// Note button
						if (oConfig && oConfig.Noteenabled) {
							var fnAddNoteDialogResetAndClose = function() {
								sap.ui.getCore().byId(that.getId() + "-note_name").setValue("");
								sap.ui.getCore().byId(that.getId() + "-note_descrip").setValue("");
								that.oAddNoteDialog.close();
							};
							that.getToolbar().addContent(
								new sap.m.Button({
									id: that.getId() + "-addNoteButton",
									icon: "sap-icon://customIcons/custom-add-note",
									enabled: "{= parseInt(${Tripno}) !== 0}",
									visible: bAttachmentEditable,
									type: sap.m.ButtonType.Transparent,
									tooltip: that.oResourceBundle.getText("ADD_NOTE"),
									press: function(oEvent) {
										var oSource = oEvent.getSource();
										// Create the dialog to create notes if it doesn't exist
										if (!that.oAddNoteDialog) {
											that.oAddNoteDialog = new sap.m.Dialog({
												title: that.oResourceBundle.getText("ADD_NOTE"),
												content: [new sap.ui.layout.VerticalLayout({
													class: "sapUiContentPadding",
													visible: "{= ${uploadCollectionModel>/stripMessage}.length > 0}",
													width: "100%",
													content: new sap.m.MessageStrip({
														text: "{uploadCollectionModel>/stripMessage}",
														type: "{uploadCollectionModel>/stripType}",
														showIcon: true
													})
												}), new sap.ui.layout.form.Form({
													editable: true,
													layout: new sap.ui.layout.form.ResponsiveGridLayout(),
													formContainers: [
														new sap.ui.layout.form.FormContainer({
															formElements: [
																new sap.ui.layout.form.FormElement({
																	label: new sap.m.Label({
																		text: that.oResourceBundle.getText("NOTE_TITLE"),
																		labelFor: that.getId() + "-note_name",
																		required: true
																	}),
																	fields: new sap.m.Input(that.getId() + "-note_name", {
																		maxLength: 50
																	})
																}),
																new sap.ui.layout.form.FormElement({
																	label: new sap.m.Label({
																		text: that.oResourceBundle.getText("NOTE_TEXT"),
																		labelFor: that.getId() + "-note_descrip",
																		required: true
																	}),
																	fields: new sap.m.TextArea(that.getId() + "-note_descrip", {})
																})
															]
														})
													]
												})],
												beginButton: new sap.m.Button({
													text: that.oResourceBundle.getText("ADD"),
													type: "Emphasized",
													press: function() {
														var sName = sap.ui.getCore().byId(that.getId() + "-note_name").getValue();
														if (oSource.getBindingContext().getProperty("Tripno") === sap.fin.travel.lib.reuse.util.TravelUtil.TripNumber.Initial) {
															// It is not possible to add attachment in creation mode
															sap.m.MessageBox.show(
																that.oResourceBundle.getText("NOTEUPLOAD_ERROR_NOTE_BEFORE_UPLOAD", sName), {
																	icon: sap.m.MessageBox.Icon.ERROR,
																	title: that.oResourceBundle.getText("ERROR"),
																	details: that.oResourceBundle.getText("FILEUPLOAD_ERROR_IN_CREATION_MODE_FILE_BEFORE_UPLOAD"),
																	actions: [sap.m.MessageBox.Action.CLOSE]
																});
															return;
														}
														var sDescrip = sap.ui.getCore().byId(that.getId() + "-note_descrip").getValue();
														if (!sName || !sDescrip || sName.trim().length === 0 || sDescrip.trim().length === 0) {
															sap.m.MessageToast.show(that.oResourceBundle.getText("REQ_FIELD_ALERT"));
															return;
														}
														var fnError = function(oError) {
															var oUploadCollectionModel = that.oAddNoteDialog.getModel("uploadCollectionModel");
															if (sap.fin.travel.lib.reuse.util.MessageUtil.get().handleMessageResponse(oError)) {
																var error = sap.fin.travel.lib.reuse.util.MessageUtil.get().getErrorMessageResponse(oError);
																oUploadCollectionModel.setProperty("/stripMessage", error.hasOwnProperty("message") ? error.message : error);
																var sErrorType = error.hasOwnProperty("type") ? MessageParser.ErrorType.toMessageType(error.type) : sap.ui.core.MessageType
																	.Error;
																oUploadCollectionModel.setProperty("/stripType", sErrorType);
															} else {
																oUploadCollectionModel.setProperty("/stripMessage", sap.fin.travel.lib.reuse.util.MessageUtil.get().getErrorMessage(
																	oError));
																oUploadCollectionModel.setProperty("/stripType", sap.ui.core.MessageType.Error);
															}
														};
														var fnSuccess = function() {
															var oUploadCollectionModel = that.oAddNoteDialog.getModel("uploadCollectionModel");
															oUploadCollectionModel.setProperty("/stripMessage", "");
															oUploadCollectionModel.setProperty("/stripType", sap.ui.core.MessageType.None);
															fnAddNoteDialogResetAndClose();
														};
														sap.fin.travel.lib.reuse.util.FileUploadHelper.uploadText(sName, sDescrip, true, that, fnSuccess, fnError);
													}
												}),
												endButton: new sap.m.Button({
													text: that.oResourceBundle.getText("CANCEL"),
													press: fnAddNoteDialogResetAndClose
												})
											});
											that.oAddNoteDialog.setModel(new sap.ui.model.json.JSONModel({
												stripMessage: "",
												stripType: sap.ui.core.MessageType.None
											}), "uploadCollectionModel");
										}
										var oUploadCollectionModel = that.oAddNoteDialog.getModel("uploadCollectionModel");
										oUploadCollectionModel.setProperty("/stripMessage", "");
										oUploadCollectionModel.setProperty("/stripType", sap.ui.core.MessageType.None);
										that.oAddNoteDialog.open();
									}
								})
							);
						}

						// URL button
						if (oConfig && oConfig.Urlenabled) {
							var fnAddLinkDialogResetAndClose = function() {
								sap.ui.getCore().byId(that.getId() + "-link_name").setValue("");
								sap.ui.getCore().byId(that.getId() + "-link_descrip").setValue("");
								that.oAddLinkDialog.close();
							};
							that.getToolbar().addContent(
								new sap.m.Button({
									id: that.getId() + "-addLinkButton",
									icon: "sap-icon://customIcons/custom-add-link",
									enabled: "{= parseInt(${Tripno}) !== 0}",
									visible: bAttachmentEditable,
									type: sap.m.ButtonType.Transparent,
									tooltip: that.oResourceBundle.getText("ADD_LINK"),
									press: function(oEvent) {
										var oSource = oEvent.getSource();
										// Create the dialog to create notes if it doesn't exist
										if (!that.oAddLinkDialog) {
											that.oAddLinkDialog = new sap.m.Dialog({
												title: that.oResourceBundle.getText("ADD_LINK"),
												content: [new sap.ui.layout.VerticalLayout({
													class: "sapUiContentPadding",
													visible: "{= ${uploadCollectionModel>/stripMessage}.length > 0}",
													width: "100%",
													content: new sap.m.MessageStrip({
														text: "{uploadCollectionModel>/stripMessage}",
														type: "{uploadCollectionModel>/stripType}",
														showIcon: true
													})
												}), new sap.ui.layout.form.Form({
													editable: true,
													layout: new sap.ui.layout.form.ResponsiveGridLayout(),
													formContainers: [
														new sap.ui.layout.form.FormContainer({
															formElements: [
																new sap.ui.layout.form.FormElement({
																	label: new sap.m.Label({
																		text: that.oResourceBundle.getText("LINK_TITLE"),
																		labelFor: that.getId() + "-link_name",
																		required: true
																	}),
																	fields: new sap.m.Input(that.getId() + "-link_name", {
																		maxLength: 50
																	})
																}),
																new sap.ui.layout.form.FormElement({
																	label: new sap.m.Label({
																		text: that.oResourceBundle.getText("LINK_URL"),
																		labelFor: that.getId() + "-link_descrip",
																		required: true
																	}),
																	fields: new sap.m.Input(that.getId() + "-link_descrip", {
																		type: sap.m.InputType.Url
																	})
																})
															]
														})
													]
												})],
												beginButton: new sap.m.Button({
													text: that.oResourceBundle.getText("ADD"),
													type: "Emphasized",
													press: function() {
														var sName = sap.ui.getCore().byId(that.getId() + "-link_name").getValue();
														if (oSource.getBindingContext().getProperty("Tripno") === sap.fin.travel.lib.reuse.util.TravelUtil.TripNumber.Initial) {
															// It is not possible to add attachment in creation mode
															sap.m.MessageBox.show(
																that.oResourceBundle.getText("LINKUPLOAD_ERROR_LINK_BEFORE_UPLOAD", sName), {
																	icon: sap.m.MessageBox.Icon.ERROR,
																	title: that.oResourceBundle.getText("ERROR"),
																	details: that.oResourceBundle.getText("FILEUPLOAD_ERROR_IN_CREATION_MODE_FILE_BEFORE_UPLOAD"),
																	actions: [sap.m.MessageBox.Action.CLOSE]
																});
															return;
														}
														var sDescrip = sap.ui.getCore().byId(that.getId() + "-link_descrip").getValue();
														if (!sName || !sDescrip || sName.trim().length === 0 || sDescrip.trim().length === 0) {
															sap.m.MessageToast.show(that.oResourceBundle.getText("REQ_FIELD_ALERT"));
															return;
														}
														var fnError = function(oError) {
															var oUploadCollectionModel = that.oAddLinkDialog.getModel("uploadCollectionModel");
															if (sap.fin.travel.lib.reuse.util.MessageUtil.get().handleMessageResponse(oError)) {
																var error = sap.fin.travel.lib.reuse.util.MessageUtil.get().getErrorMessageResponse(oError);
																oUploadCollectionModel.setProperty("/stripMessage", error.hasOwnProperty("message") ? error.message : error);
																var sErrorType = error.hasOwnProperty("type") ? MessageParser.ErrorType.toMessageType(error.type) : sap.ui.core.MessageType
																	.Error;
																oUploadCollectionModel.setProperty("/stripType", sErrorType);
															} else {
																oUploadCollectionModel.setProperty("/stripMessage", sap.fin.travel.lib.reuse.util.MessageUtil.get().getErrorMessage(
																	oError));
																oUploadCollectionModel.setProperty("/stripType", sap.ui.core.MessageType.Error);
															}
														};
														var fnSuccess = function() {
															var oUploadCollectionModel = that.oAddLinkDialog.getModel("uploadCollectionModel");
															oUploadCollectionModel.setProperty("/stripMessage", "");
															oUploadCollectionModel.setProperty("/stripType", sap.ui.core.MessageType.None);
															fnAddLinkDialogResetAndClose();
														};
														sap.fin.travel.lib.reuse.util.FileUploadHelper.uploadText(sName, sDescrip, false, that, fnSuccess, fnError);
													}
												}),
												endButton: new sap.m.Button({
													text: that.oResourceBundle.getText("CANCEL"),
													press: fnAddLinkDialogResetAndClose
												})
											});
											that.oAddLinkDialog.setModel(new sap.ui.model.json.JSONModel({
												stripMessage: "",
												stripType: sap.ui.core.MessageType.None
											}), "uploadCollectionModel");
										}
										var oUploadCollectionModel = that.oAddLinkDialog.getModel("uploadCollectionModel");
										oUploadCollectionModel.setProperty("/stripMessage", "");
										oUploadCollectionModel.setProperty("/stripType", sap.ui.core.MessageType.None);
										that.oAddLinkDialog.open();
									}
								})
							);
						}

						// ArchiveLink attachments button
						if (oConfig && oConfig.Arlenabled) {
							var fnAddBusDocDialogResetAndClose = function() {
								sap.ui.getCore().byId(that.getId() + "-bus_doc_type_select").setSelectedItemId("");
								sap.ui.getCore().byId(that.getId() + "-bus_doc_descrip").setValue("");
								that.oFileUploader.clear();
								var aParams = that.oFileUploader.removeAllHeaderParameters();
								aParams.forEach(function(oParam) {
									oParam.destroy();
								});
								that.oAddBusDocDialog.close();
							};
							var sDocDescription;
							that.getToolbar().addContent(
								new sap.m.Button({
									id: that.getId() + "-addBusDocButton",
									icon: "sap-icon://add-document",
									enabled: {
										parts: [{
											path: "Tripno"
										}, {
											path: "Receiptno"
										}],
										formatter: function(sTripNo, sReceiptNo) {
											return 0 !== parseInt(sTripNo) || sReceiptNo != undefined;
										}
									},
									visible: bInReceipt ? "{= " + bUrlAttachment + "}" : bAttachmentEditable, //receipt level, only edit mode possible. header level, GOSINDISPLAY can its say
									type: sap.m.ButtonType.Transparent,
									tooltip: that.oResourceBundle.getText("ADD_BUS_DOC"),
									press: function() {
										// Create the dialog to create business documents if it doesn't exist
										sDocDescription = "";
										if (!that.oAddBusDocDialog) {
											that.oAddBusDocDialog = new sap.m.Dialog({
												title: that.oResourceBundle.getText("ADD_BUS_DOC"),
												content: new sap.ui.layout.form.Form({
													editable: true,
													layout: new sap.ui.layout.form.ResponsiveGridLayout(),
													formContainers: [
														new sap.ui.layout.form.FormContainer({
															formElements: [
																new sap.ui.layout.form.FormElement({
																	label: new sap.m.Label({
																		text: that.oResourceBundle.getText("DOC_TYPE"),
																		labelFor: that.getId() + "-bus_doc_type_select",
																		required: true,
																		visible: !bInReceipt
																	}),
																	fields: new sap.m.Select(that.getId() + "-bus_doc_type_select", {
																		change: function(oEvent) {
																			// Update the HTTP header parameter
																			var oParam = that.oFileUploader.removeHeaderParameter("Document-Type");
																			if (oParam) {
																				oParam.destroy();
																			}
																			var oDocTypeId = oEvent.getSource().getSelectedItem().getKey();
																			that.oFileUploader.addHeaderParameter(new sap.ui.unified.FileUploaderParameter("Document-Type", {
																				name: "Document-Type",
																				value: bInReceipt ? docTypeForReceipt : oDocTypeId
																			}));

																			// Dynamically change the FileUploader properties according to the selected document type
																			var oDocType = that.getModel().getProperty("/DocumentTypes('" + oDocTypeId + "')");
																			that.oFileUploader.setMimeType(oDocType.AllowedMimetypes.split(";"));
																			that.oFileUploader.setMaximumFileSize(parseFloat(oDocType.MaxSize) / 1024 / 1024);
																		},
																		visible: !bInReceipt,
																		forceSelection: bInReceipt
																	})
																}),
																new sap.ui.layout.form.FormElement({
																	label: new sap.m.Label({
																		text: that.oResourceBundle.getText("FILE_PATH"),
																		labelFor: that.getId() + "-bus_doc_file_uploader",
																		required: true
																	}),
																	fields: that.oFileUploader
																}),
																new sap.ui.layout.form.FormElement({
																	label: new sap.m.Label({
																		text: that.oResourceBundle.getText("DESCRIPTION"),
																		labelFor: that.getId() + "-bus_doc_descrip"
																	}),
																	fields: new sap.m.Input(that.getId() + "-bus_doc_descrip", {
																		liveChange: function(oEvent) {
																			sDocDescription = oEvent.getSource().getValue();
																		},
																		maxLength: 60
																	})
																})
															]
														})
													]
												}),
												beginButton: new sap.m.Button({
													text: that.oResourceBundle.getText("UPLOAD"),
													type: "Emphasized",
													press: function() {
														if (!sap.ui.getCore().byId(that.getId() + "-bus_doc_type_select").getSelectedItemId() || !that.oFileUploader.getValue()) {
															sap.m.MessageToast.show(that.oResourceBundle.getText("REQ_FIELD_ALERT"));
															return;
														}

														//retrieve doc description if any
														if (!Utils.isEmptyObjectOrString(sDocDescription)) {
															that.oFileUploader.addHeaderParameter(new sap.ui.unified.FileUploaderParameter({
																name: "Document-Description",
																value: encodeURI(sDocDescription)
															}));
														}

														that.oFileUploader.upload();
														fnAddBusDocDialogResetAndClose();
													}
												}),
												endButton: new sap.m.Button({
													text: that.oResourceBundle.getText("CANCEL"),
													press: fnAddBusDocDialogResetAndClose
												})
											});

											// Retrieve document types
											var oModel = that.getModel();
											that.oAddBusDocDialog.setModel(oModel);
											that.oAddBusDocDialog.setBindingContext(that.getBindingContext());
											sap.ui.getCore().byId(that.getId() + "-bus_doc_type_select").bindItems("/DocumentTypes",
												new sap.ui.core.Item({
													key: "{DocType}",
													text: "{Descr}"
												})
											);
										}
										that.oAddBusDocDialog.open();
									}
								})
							);
						}
					}

					that.bFirstRender = false;
				}
			};

			return UploadCollectionExtension;
		}, /* bExport= */ true);
}; // end of sap/fin/travel/lib/reuse/controls/UploadCollectionExtension.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.ActionUtil')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.ActionUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.comp.smartform.SmartForm'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.comp.smartfield.SmartLabel'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
	jQuery.sap.require('sap.m.PDFViewer'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/ActionUtil", [
		"sap/fin/travel/lib/reuse/util/PersistenceHelper",
		"sap/fin/travel/lib/reuse/util/i18n",
		"sap/fin/travel/lib/reuse/util/NavigationUtil",
		"sap/fin/travel/lib/reuse/util/CustomDataUtil",
		"sap/fin/travel/lib/reuse/util/ODataModelUtil",
		"sap/fin/travel/lib/reuse/util/FragmentHelper",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/ControlUtil",
		"sap/fin/travel/lib/reuse/util/MessageUtil",
		"sap/fin/travel/lib/reuse/util/MessageParser",
		"sap/ui/core/routing/HashChanger",
		"sap/ui/comp/smartform/SmartForm",
		"sap/ui/comp/smartform/Group",
		"sap/ui/comp/smartform/GroupElement",
		"sap/ui/comp/smartfield/SmartField",
		"sap/ui/comp/smartfield/SmartLabel",
		"sap/ui/model/Context",
		"sap/m/PDFViewer",
		"sap/ui/core/CustomData"
	], function(PersistenceHelper, I18n, NavigationUtil, CustomDataUtil, ODataModelUtil, FragmentHelper, Utils, ControlUtil, MessageUtil,
		MessageParser, HashChanger, SmartForm, Group, GroupElement, SmartField, SmartLabel, Context, PDFViewer, CustomData) {
		"use strict";

		function getMethods() {

			/**
			 * Determines if the action requieres a Navigation.
			 */
			function _navigate(oModel, oContext, oNavPath, oEventSource) {
				if (Utils.isEmptyObjectOrString(oNavPath.subPath)) {
					PersistenceHelper.invalidateEntry(oModel, NavigationUtil.bindingPaths(HashChanger.getInstance().getHash()).paths.pop());
					var oSmartTable = ControlUtil.getSmartTable(oEventSource);
					if (oSmartTable) {
						oSmartTable.rebindTable();
						// var oUIState = oSmartTable.getUiState();
					}
				} else if (!Utils.isEmptyObjectOrString(oNavPath.navPath)) {
					NavigationUtil.navigate(oNavPath.navPath, oContext.controller.getView().getModel("view").getProperty("/level"));
				}
			}

			/**
			 * Create the current context.
			 *  - create the targeted (Funtion Import) context
			 *  - get current envet source context
			 *  - save some object context
			 */
			function _createContext(oModel, oEventSource, sContextName) {
				var sTargetPath = sContextName + "('" + ODataModelUtil.get().uid() + "')";
				var oTargetContext = new Context(oModel, sTargetPath);
				var aContexts = [];
				if (oEventSource.getBindingContext()) {
					aContexts.push(oEventSource.getBindingContext());
				}
				return {
					model: oModel,
					source: oEventSource,
					contexts: aContexts,
					targetContext: oTargetContext
				};
			}

			/**
			 * Update the current context.
			 * Case 1: if action-for option is enabled meaning item selection form table is requested, then add the binding context of selected item.
			 * Case 2: if no context can be found default to the UserProfiles root entity binding context.
			 */
			function _updateContext(oContext, oFunctionImport) {
				if (oFunctionImport.hasOwnProperty("sap:action-for")) {
					var oList = ControlUtil.getOwnerControl(oContext.source);
					if (oList) {
						var aSelectedItems = typeof oList.getTable === "function" ? oList.getTable().getSelectedItems() : oList.getSelectedItems();
						if (aSelectedItems && aSelectedItems.length > 0) {
							oContext.contexts.unshift(aSelectedItems[0].getBindingContext());
						}
					}
				}
				if (oContext.contexts.length === 0) {
					// Switch to default global context
					oContext.contexts.push(new Context(oContext.model, "/UserProfiles('" + oContext.key + "')"));
				}
			}

			function _getPropertyKeys(oEntityType) {
				var oKeyMap = {};

				if (oEntityType && oEntityType.key && oEntityType.key.propertyRef) {
					for (var i = 0; i < oEntityType.key.propertyRef.length; i++) {
						var sKeyName = oEntityType.key.propertyRef[i].name;
						oKeyMap[sKeyName] = true;
					}
				}
				return oKeyMap;
			}

			function _getParameterName(oParameter) {
				// if no label is set for parameter use parameter name as fallback
				return oParameter["com.sap.vocabularies.Common.v1.Label"] ? oParameter["com.sap.vocabularies.Common.v1.Label"].String : oParameter.name;
			}

			/**
			 * From the context, compares objects and determine list of porperties that has been changes in bewteen function import call.
			 * Objects are compared only if origin and returned entities are identical.
			 * Then we apply the same logic for the Side Effects.
			 *	- If property from the changes list are defined as SourceProperties of the entity, we are refreshing the corresponding TargetEntities
			 */
			function _determineChangesAndRefreshTargetEntites(oContext, oResponse) {
				var oSingleContext = oContext.contexts[0];
				var sPath = oSingleContext.getPath();
				var aNavPropertyPath = [];

				if (0 !== sPath.indexOf("/")) {
					sPath = "/" + sPath;
				}

				oContext.sideEffect.target = oResponse.data;
				if (oResponse.data.hasOwnProperty("__batchResponses")) {
					// Response is of type batch
					var oResponseBatch = oResponse.data.__batchResponses[0]; // This should be always the first request
					if (oResponseBatch.hasOwnProperty("__changeResponses")) {
						var oChangeResponses = oResponseBatch.__changeResponses[0]; // Function import does not return multiple entity so taking the first
						oContext.sideEffect.target = oChangeResponses.data;
					}
				}

				if (oContext.sideEffect.originType === oContext.sideEffect.functionImport.returnType) {
					var aSideEffectChanges = [];
					Utils.getObjectChanges(oContext.sideEffect.origin, oContext.sideEffect.target, aSideEffectChanges);
					//origin contains only SourceProperties. Any change detected on these fields mean we need to trigger the side effect
					var bSubmitChanges = aSideEffectChanges.length > 0;

					if (oContext.sideEffect.TargetEntities.length > 0) {
						// Read Navigation Properties to refresh corresponding sub-entities
						for (var k = 0; k < oContext.sideEffect.TargetEntities.length; k++) {
							var sNavPropertyPath = oContext.sideEffect.TargetEntities[k].NavigationPropertyPath;

							if (sNavPropertyPath != undefined) {
								aNavPropertyPath.push(sNavPropertyPath);
							}
						}
					}
					if (bSubmitChanges) {
						for (var i = 0; i < aNavPropertyPath.length; i++) {
							sNavPropertyPath = aNavPropertyPath[i];
							PersistenceHelper.read(oContext.model, sPath + "/" + sNavPropertyPath); // Refresh associations
						}
					}
				}
			}

			/**	

			/**
			 * Prepares the parameters which are needed as input for the action
			 *
			 * @param {array} 		aContexts Array of contexts used for action processing
			 * @param {string}		sFunctionName name of the Function Import to be called
			 *
			 * @returns {object} 	mActionParams Parameters that describe the Function Import:
			 * 						mActionParams.parameterData Array with mandatory parameters
			 *						mActionParams.additionalParameters Array with additional parameters
			 */
			function _prepareParameters(oContext, sFunctionName) {
				var oMetaModel = oContext.model.getMetaModel();
				var oFunctionImport = oMetaModel.getODataFunctionImport(sFunctionName);
				var oSingleContext, oEntityType, oTargetEntity;

				_updateContext(oContext, oFunctionImport);
				oSingleContext = oContext.contexts[0];
				var oContextObject = oSingleContext.getObject();
				if (oSingleContext && oSingleContext.getPath()) {
					var sEntitySet = ODataModelUtil.get().getEntitySetFromContext(oSingleContext);
					var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet, false);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType, false);
				}

				var mActionParams = {
					parameterData: {},
					additionalParameters: [],
					functionImport: oFunctionImport,
					entitySet: oEntitySet,
					entityType: oEntityType
				};
				var oSourceKeyProperties = _getPropertyKeys(oEntityType);
				var oTargetKeyProperties = oFunctionImport.entitySet ? _getPropertyKeys(oMetaModel.getODataEntityType(oMetaModel.getODataEntitySet(
					oFunctionImport.entitySet).entityType)) : undefined;
				var aAddAmountField = [],
					aAddField = [];

				if (oFunctionImport.returnType) {
					// store TargetEntities to be refreshed via SideEffect annotations
					var oReturnedEntityType = oMetaModel.getODataEntityType(oFunctionImport.returnType, false);
					if (oReturnedEntityType && oReturnedEntityType.hasOwnProperty("com.sap.vocabularies.Common.v1.SideEffects#SideEffects")) {
						oContext.sideEffect = oReturnedEntityType["com.sap.vocabularies.Common.v1.SideEffects#SideEffects"];
						oContext.sideEffect.functionImport = oFunctionImport;
						oContext.sideEffect.origin = {};
						//retain source properties values before function import call
						oContext.sideEffect.SourceProperties.forEach(function(e) {
							oContext.sideEffect.origin[e.PropertyPath] = oContext.contexts[0].getProperty(e.PropertyPath);
						});
						oContext.sideEffect.originType = oContext.contexts[0].getObject().__metadata.type;
					}
				}
				//Function Import parameters
				if (oFunctionImport.parameter) {
					for (var i = 0; i < oFunctionImport.parameter.length; i++) {
						var oParameter = oFunctionImport.parameter[i];
						var oParameterValue;
						var sParameterName = oParameter.name;
						var bIsSourceKey = !!oSourceKeyProperties[sParameterName];
						var bIsTargetKey = oTargetKeyProperties ? !!oTargetKeyProperties[sParameterName] : false;
						oParameterValue = undefined;
						if (oContextObject.hasOwnProperty(sParameterName)) {
							oParameterValue = oContextObject[sParameterName];
							bIsTargetKey &= !Utils.isEmptyObjectOrString(oContextObject[sParameterName]);
						} else if (bIsSourceKey) {
							// parameter is  not part of the current projection - raise error
							jQuery.sap.log.error("parameter of action not found in current context: " + sParameterName);
							throw new Error("parameter of action not found in current context: " + sParameterName);
						} else {
							// function import key parameter is not found in the context, we need to display it.
							bIsTargetKey = false;
						}
						mActionParams.parameterData[sParameterName] = oParameterValue;

						if (!bIsSourceKey && !bIsTargetKey && oParameter.mode.toUpperCase() == "IN") {
							// offer as optional parameter with default value from context
							if (oParameter["Org.OData.Measures.V1.ISOCurrency"] != undefined) {
								aAddAmountField.push(oParameter);
							} else {
								aAddField.push(oParameter);
							}
						}
					}
					// Making sure amount field are sorted at the begining.
					mActionParams.additionalParameters = mActionParams.additionalParameters.concat(aAddAmountField);
					mActionParams.additionalParameters = mActionParams.additionalParameters.concat(aAddField);
				}

				return mActionParams;
			}

			/**
			 * Initiate a form with all needed controls to allow providing missing
			 * parameters which are needed by the triggered action.
			 *
			 * @param {object} mParameters Map that contains the parameters - prefilled and additional
			 * @param {object} oContext Context object of the triggered action
			 *
			 * @returns {object} A map with the two members: "form" and "getEmptyMandatoryFields"
			 */
			function fnBuildParametersForm(mParameters, oContext) {
				var oForm = new SmartForm({
					editable: true
				});

				oForm.setBindingContext(oContext);
				// list of all smart fields for input check
				var oField;
				var aFields = [];
				var oGroup = new Group({
					label: ""
				});
				var oGroupElement;
				var sLabel;
				var oUom;
				var aCurrency = [];
				var mValueList = new Map();

				for (var idxAddParam = 0; idxAddParam < mParameters.additionalParameters.length; idxAddParam++) {
					var oParameter = mParameters.additionalParameters[idxAddParam];
					if (-1 === aCurrency.indexOf(oParameter.name)) {
						var sValueType = oParameter["com.sap.vocabularies.Common.v1.ValueListWithFixedValues"] ? "fixed-values" : undefined;
						var isUOM = oParameter["Org.OData.Measures.V1.ISOCurrency"] != undefined;
						var isValueList = oParameter["com.sap.vocabularies.Common.v1.ValueList"] != undefined;
						var sInOutParameter = "";
						var aOutParameters = [];
						var additionalAnnotations = [];

						//Create a smartfield with data form outside
						oField = new SmartField({
							value: '{' + oParameter.name + '}',
							textLabel: _getParameterName(oParameter),
							width: "100%",
							/*configuration: {
			                preventInitialDataFetchInValueHelpDialog: false
			            }*/
						}).addStyleClass("sapUiSmallMarginBottom");
						if (isUOM) {
							var oUomParameter = mParameters.additionalParameters.find(function(elem) {
								return elem.name === oParameter["Org.OData.Measures.V1.ISOCurrency"].Path;
							});
							aCurrency.push(oParameter["Org.OData.Measures.V1.ISOCurrency"].Path);
							oUom = {
								entitySet: mParameters.entitySet,
								entityType: mParameters.entityType,
								navigationPath: "",
								path: oParameter["Org.OData.Measures.V1.ISOCurrency"].Path,
								property: {
									property: oUomParameter,
									typePath: oParameter["Org.OData.Measures.V1.ISOCurrency"].Path
								}
							};
							// Read Only parameter
							if (oUomParameter["com.sap.vocabularies.Common.v1.FieldControl"] && oUomParameter["com.sap.vocabularies.Common.v1.FieldControl"].EnumMember ===
								"com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly") {
								oField.setUomEditable(false);
							}
						}
						if (isValueList) {
							for (var idxParam = 0; idxParam < oParameter["com.sap.vocabularies.Common.v1.ValueList"].Parameters.length; idxParam++) {
								var oValueListParameter = oParameter["com.sap.vocabularies.Common.v1.ValueList"].Parameters[idxParam];
								switch (oValueListParameter.RecordType) {
									case "com.sap.vocabularies.Common.v1.ValueListParameterInOut":
										sInOutParameter = oValueListParameter.LocalDataProperty.PropertyPath;
										break;
									case "com.sap.vocabularies.Common.v1.ValueListParameterOut":
										aOutParameters.push(oValueListParameter.LocalDataProperty.PropertyPath);
										break;
									default:
								}
							}
							// handle additional value list
							for (var sProperty in oParameter) {
								if (sProperty.indexOf("com.sap.vocabularies.Common.v1.ValueList#") > -1) {
									additionalAnnotations.push(oParameter[sProperty]);
								}
							}
						}
						oField.data("configdata", {
							"configdata": {
								isInnerControl: oParameter["Org.OData.Measures.V1.ISOCurrency"] != undefined,
								path: oParameter.name,
								entitySetObject: {},
								annotations: {
									valuelist: oParameter["com.sap.vocabularies.Common.v1.ValueList"],
									valuelistType: sValueType,
									uom: oUom
								},
								additionalAnnotations: additionalAnnotations,
								modelObject: oContext.oModel,
								entityType: oParameter.type,
								property: {
									property: oParameter,
									typePath: oParameter.name
								},
								isUOM: oParameter["Org.OData.Measures.V1.ISOCurrency"] != undefined,
								inOutParameter: sInOutParameter,
								outParameters: aOutParameters.join()
							}
						});

						//set mandatory if requested
						if (oParameter.nullable == "false") {
							oField.setMandatory(true);
						}

						if (oParameter["com.sap.vocabularies.Common.v1.FieldControl"]) {
							if ("com.sap.vocabularies.Common.v1.FieldControlType/Hidden" === oParameter["com.sap.vocabularies.Common.v1.FieldControl"].EnumMember) {
								oField.setVisible(false);
							}
							if ("com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly" === oParameter["com.sap.vocabularies.Common.v1.FieldControl"].EnumMember) {
								oField.setEnabled(false);
							}
						}
						oGroupElement = new GroupElement();
						oGroupElement.addElement(oField);
					}
					oGroup.addGroupElement(oGroupElement);
					oForm.addGroup(oGroup);
				}

				var fnGetEmptyMandatoryValueHelpFields = function() {
					var aOutParameters = [];
					var aInOutFields = jQuery.grep(oForm.getSmartFields(), function(oField) { // get field list of value list parameter
						var oCustomData = oField.getCustomData().find(function(oCustomData) {
							return oCustomData.getKey() === "configdata";
						});
						return (oCustomData && !Utils.isEmptyObjectOrString(oCustomData.getValue().configdata.outParameters)); // keep only field with out parameters
					});
					if (aInOutFields && aInOutFields.length > 0) {
						aInOutFields.forEach(function(oInOutField) {
							var oCustomData = oInOutField.getCustomData().find(function(oCustomData) {
								return oCustomData.getKey() === "configdata";
							});
							aOutParameters = aOutParameters.concat(oCustomData.getValue().configdata.outParameters.split());
						});
					}
					var aMandatoryFields = jQuery.grep(oForm.getSmartFields(), function(oField) {
						var isValueListMandatory = false;
						if (aOutParameters) {
							isValueListMandatory = aOutParameters.indexOf(oField.getDataProperty().property.name) !== -1;
						}
						return (isValueListMandatory == true && oField.getValue() == "" && oField.getDataType() !=
							"Edm.Boolean");
					});
					return aMandatoryFields;
				};

				var fnGetEmptyMandatoryFields = function() {
					var aMandatoryFields = jQuery.grep(oForm.getSmartFields(), function(oField) {
						return (oField.getMandatory() == true && oField.getValue() == "" && oField.getDataType() != "Edm.Boolean");
					});
					return aMandatoryFields;
				};

				var fnCheckValuesValidityFields = function() {
					return oForm.check();
				};

				return {
					form: oForm,
					getEmptyMandatoryFields: fnGetEmptyMandatoryFields,
					getEmptyMandatoryValueHelpFields: fnGetEmptyMandatoryValueHelpFields,
					checkValuesValidityFields: fnCheckValuesValidityFields
				};
			}

			/**
			 * Triggers the chain of the action call's preparation, its processing and its result handling.
			 * Popup is displayed in case on additional parameters are requested to be sent.
			 *
			 * @param {object} oEventSource event source of the triggered action.
			 * @param {object} oController current context controller.
			 * @param {string} sDraftTripno current draft trip number.
			 * @param {boolean} bPopup Default true. Action should be displayed in a popup. This property is only available if there is at least one additional parameter.
			 */
			function fnCallAction(oEventSource, oController, sDraftTripno, bPopup) {
				var that = this,
					oHandler,
					oActionContext;
				var oBindingSource = oEventSource.getBindingContext();
				var sPernr = oBindingSource ? oBindingSource.getProperty("Pernr") : ODataModelUtil.get().getCurrentTripContext().Pernr;
				var oModel = oController.getView().getModel();
				var oCustomData = CustomDataUtil.getObjectCustomData(oEventSource);

				//Get Field Group Action
				var sEntityName = oCustomData.FieldGroupAction;

				// Absolute value for Function name
				var sFunctionName = '/' + oCustomData.Action.split('/')[1];
				var oContext = _createContext(oModel, oEventSource, sFunctionName);
				oContext.key = sPernr;
				oContext.controller = oController;

				// Build Function Import Parameters
				var mActionParams;
				mActionParams = _prepareParameters(oContext, oCustomData.Action, oContext.controller);
				// Build Label
				var _sFunctionImportLabel = oCustomData.Label || sFunctionName;

				var fnAbort = function(oController) {
					ODataModelUtil.get().removeDeferredGroupId(oContext.model, that.sActionGroupId);
					if (oActionContext || (oController && oController.actionContext)) {
						oContext.model.deleteCreatedEntry(oActionContext ? oActionContext : oController.actionContext);
					}
					if (oHandler) {
						oHandler.abort();
					}
				};

				//Keep previous pending changes
				oContext.pendingChanges = oContext.model.getPendingChanges();

				if (mActionParams != undefined && mActionParams.additionalParameters && mActionParams.additionalParameters.length == 0) {
					var mParameters = {
						urlParameters: mActionParams.parameterData,
						batchGroupId: this.sActionGroupId,
						functionImport: mActionParams.functionImport
					};

					//indicate that we can collect all changes from group pdDeductionsChanges
					ODataModelUtil.get().addDeferredGroupId(oContext.model, this.sActionGroupId);

					var fnSuccess = function(oData, response) {
						var sLocation;
						if (response.headers.location) {
							sLocation = response.headers.location.split("/").pop();
						} else if (response && response.data && response.data.__batchResponses && response.data.__batchResponses[0] && response.data.__batchResponses[
								0].__changeResponses && response.data.__batchResponses[0].__changeResponses[0] && response.data.__batchResponses[0].__changeResponses[
								0].headers && response.data.__batchResponses[0].__changeResponses[0].headers["location"]) {
							sLocation = response.data.__batchResponses[0].__changeResponses[0].headers["location"].split("/").slice(-1).pop();
						}

						ODataModelUtil.get().removeDeferredGroupId(oContext.model, that.sActionGroupId);

						//Trigger Navigation to the returned entity
						if (oData && response && Utils.getPropertyOrSubPropery(oData, "PDF")) { // Export As PDF
							if (!oContext.controller._oPdfViewer) {
								oContext.controller._oPdfViewer = new PDFViewer();
								oContext.controller.getView().addDependent(oContext.controller._oPdfViewer);
							}
							var sSource = Utils.getPropertyOrSubPropery(response.data, "URL");
							oContext.controller._oPdfViewer.setSource(sSource);
							oContext.controller._oPdfViewer.setTitle("PDF Form");
							oContext.controller._oPdfViewer.setShowDownloadButton(false);
							oContext.controller._oPdfViewer.open();
						} else if (oData && Utils.getPropertyOrSubPropery(oData, "ExternalLink")) { // Get External Link
							// Open new tab with URL
							window.open(Utils.getPropertyOrSubPropery(oData, "URL"), "_blank", "noopener,noreferrer");
						} else { // Navigate to new entity
							if (sEntityName != "TravelPlan") { //No navigation
								//default behavior: detect entity creation and navigate to it (and refresh it if possible)
								//Navigate only if created entity is child of current entity. i.e. do not navigate if created entity is the same than the current one
								var navPathFromResponse = NavigationUtil.getNavigationPathFromReponse(oData, response);
								var bNavigate = !Utils.isEmptyObjectOrString(navPathFromResponse.subPath) && !Utils.isEmptyObjectOrString(navPathFromResponse.navPath);
								var bContextChanged = oContext.contexts[0].getPath().substring(1) !== navPathFromResponse.subPath;
								//if the data action calls refreshes the entity being manipulated, we check for potential side effects
								if (!bContextChanged && !bNavigate) {
									_determineChangesAndRefreshTargetEntites(oContext, response);
								}
								_navigate(oModel, oContext, navPathFromResponse, oEventSource);
							}
						}
					};
					// Submit Changes then call function Import if no error returned
					var fnSuccessSubmit = function() {
						//Call Function Import
						PersistenceHelper.callFunction(oModel, {
							name: sFunctionName,
							source: oEventSource,
							success: fnSuccess,
							error: fnAbort,
							functionalError: fnAbort,
							urlParameters: mActionParams.parameterData,
							batchGroupId: mParameters.batchGroupId
						});
					};
					var fnActionToExcecute = function() {
						PersistenceHelper.submitChanges(oModel, {
							success: fnSuccessSubmit,
							error: fnAbort,
							functionalError: fnSuccessSubmit,
							submitChangeOrigin: PersistenceHelper.SUBMIT_CHANGE_ORIGIN.ACTION,
						});
					};
					if (mActionParams.functionImport) {
						var bActionCritical = mActionParams.functionImport["com.sap.vocabularies.Common.v1.IsActionCritical"] != undefined;
						if (bActionCritical) {
							FragmentHelper.get().confirmationDialog({
								controller: oContext.controller,
								name: mActionParams.functionImport.name,
								label: _sFunctionImportLabel,
								success: fnActionToExcecute,
								error: fnAbort
							});
							return;
						}
					}
					fnActionToExcecute();
				} else if (mActionParams != undefined && mActionParams.additionalParameters && mActionParams.additionalParameters.length > 0) {
					var mParameters = {
						urlParameters: {},
						batchGroupId: this.sActionGroupId,
						functionImport: mActionParams.functionImport
					};

					//indicate that we can collect all changes from group pdDeductionsChanges
					ODataModelUtil.get().addDeferredGroupId(oContext.model, this.sActionGroupId);

					//Trigger Function import call
					var fnTriggerFunctionImportCall = function(oContextParam) {
						var fnSuccess = function(oData, response) {
							var sLocation;
							if (response.headers.location) {
								sLocation = response.headers.location.split("/").pop();
							} else if (response && response.data && response.data.__batchResponses && response.data.__batchResponses[0] && response.data.__batchResponses[
									0].__changeResponses && response.data.__batchResponses[0].__changeResponses[0] && response.data.__batchResponses[0].__changeResponses[
									0].headers && response.data.__batchResponses[0].__changeResponses[0].headers["location"]) {
								sLocation = response.data.__batchResponses[0].__changeResponses[0].headers["location"].split("/").slice(-1).pop();
							}

							ODataModelUtil.get().removeDeferredGroupId(oContext.model, that.sActionGroupId);

							if (that.oActionDialog) {
								that.oActionDialog.close();
							}

							//Trigger Navigation to the returned entity
							if (oData && response && Utils.getPropertyOrSubPropery(oData, "PDF")) { // Export As PDF
								if (!oContext.controller._oPdfViewer) {
									oContext.controller._oPdfViewer = new PDFViewer();
									oContext.controller.getView().addDependent(oContext.controller._oPdfViewer);
								}
								var sSource = Utils.getPropertyOrSubPropery(response.data, "URL");
								oContext.controller._oPdfViewer.setSource(sSource);
								oContext.controller._oPdfViewer.setTitle("PDF Form");
								oContext.controller._oPdfViewer.setShowDownloadButton(false);
								oContext.controller._oPdfViewer.open();
							} else if (oData && Utils.getPropertyOrSubPropery(oData, "ExternalLink")) { // Get GDS Link
								// Open new tab with URL
								window.open(Utils.getPropertyOrSubPropery(oData, "URL"), "_blank", "noopener,noreferrer");
							} else { // Navigate to new entity
								if (sEntityName != "TravelPlan") { //No navigation
									//default behavior: detect entity creation and navigate to it (and refresh it if possible)
									//Navigate only if created entity is child of current entity. i.e. do not navigate if created entity is the same than the current one, in this case invalidate
									var navPathFromResponse = NavigationUtil.getNavigationPathFromReponse(oData, response);
									var bNavigate = !Utils.isEmptyObjectOrString(navPathFromResponse.subPath) && !Utils.isEmptyObjectOrString(navPathFromResponse.navPath);
									var bContextChanged = oContext.contexts[0].getPath().substring(1) !== navPathFromResponse.subPath;
									//if the data action calls refreshes the entity being manipulated, we check for potential side effects
									if (!bContextChanged && !bNavigate) {
										_determineChangesAndRefreshTargetEntites(oContext, response);
									}
									_navigate(oModel, oContext, navPathFromResponse, oEventSource);
								}
							}
						};

						// Prevent sending null value to OData Service
						var oContextObject, sContextObjectPath;
						for (var sChange in oModel.getPendingChanges()) {
							// check in all pending changes and replace null value with ""
							sContextObjectPath = "/" + sChange;
							oContextObject = oModel.getProperty(sContextObjectPath);
							if (oContextObject) {
								for (var sKey in oContextParam) {
									if (oContextObject.hasOwnProperty(sKey) && oContextObject[sKey] == null) {
										oModel.setProperty(sContextObjectPath + "/" + sKey, "");
									}
								}
							}
						}

						//Discard previous pending changes
						ODataModelUtil.get().deletePendingChanges(oContext.model, oContext.pendingChanges);
						PersistenceHelper.submitChanges(oModel, {
							source: oEventSource,
							success: fnSuccess,
							// error: fnAbort,
							submitChangeOrigin: PersistenceHelper.SUBMIT_CHANGE_ORIGIN.ACTION
						});
					};

					// Get Context promise
					oHandler = oContext.model.callFunction(
						sFunctionName, {
							method: mParameters.functionImport.httpMethod,
							urlParameters: mParameters.urlParameters,
							batchGroupId: mParameters.batchGroupId
						}
					);

					if (bPopup === false) { // we specify that we no dot want to open a popup.
						return {
							context: oHandler,
							success: fnTriggerFunctionImportCall,
							close: fnAbort,
							draftTripNo: sDraftTripno,
							actionParam: mActionParams
						};
					} else {
						oHandler.contextCreated().then(function(actionContext) {
							oActionContext = actionContext;
							var mParameterForm = fnBuildParametersForm(mActionParams, oActionContext);

							for (var sKey in mActionParams.parameterData) {
								oActionContext.oModel.setProperty(sKey, mActionParams.parameterData[sKey],
									oActionContext);
							}

							that.oActionDialog = FragmentHelper.get().getFunctionImportDialog(oContext, {
								label: _sFunctionImportLabel,
								parameter: mParameterForm,
								success: fnTriggerFunctionImportCall,
								close: fnAbort,
								draftTripNo: sDraftTripno,
								successArg: mActionParams.parameterData
							});

							var fnCheckErrorClient = function() {
								mParameterForm.form.getSmartFields().forEach(function(oField) {
									// We attach to the change event of the SmartFields bindings
									// The Change event will get fired only if the binding value is valid
									oField.getBinding("value").attachChange(function(oEvent) {
										// We check if the Value State is set to Error
										if (oField.getValueState() === sap.ui.core.ValueState.Error) {
											// We set the Value State to None
											oField.setValueState(sap.ui.core.ValueState.None);
										}
									});
								});
							};

							that.oActionDialog.attachBeforeOpen(fnCheckErrorClient);
							that.oActionDialog.setModel(oActionContext.oModel);
							that.oActionDialog.open();
						});
					}
				}
			}

			/**
			 * Triggers the chain of the inline action call's preparation, its processing and its result handling.
			 * No confirmation is requiered, every properties should be available in context object.
			 *
			 * @param {object} oEventSource event of the triggered action.
			 * @param {object} oController current context controller.
			 */
			function fnCallInLineAction(oEventSource, oController) {
				var that = this;
				var oBindingSource = oEventSource.getBindingContext();
				var sPernr = oBindingSource ? oBindingSource.getProperty("Pernr") : ODataModelUtil.get().getCurrentTripContext().Pernr;
				var oModel = oController.getView().getModel();
				var oCustomData = CustomDataUtil.getObjectCustomData(oEventSource);

				// Absolute value for Function name
				// Build Label
				var _sFunctionImportLabel = oCustomData.Label || sFunctionName;
				var sFunctionName = '/' + oCustomData.Action.split('/')[1];
				var oContext = _createContext(oModel, oEventSource, sFunctionName);
				oContext.key = sPernr;
				oContext.controller = oController;

				var oSmartTable = ControlUtil.getOwnerControl(oEventSource).getParent();
				var sEntitySet = oSmartTable.getEntitySet();

				// Build Function Import Parameters
				var mActionParams;
				mActionParams = _prepareParameters(oContext, oCustomData.Action, oContext.controller);

				var mParameters = {
					urlParameters: mActionParams.parameterData,
					batchGroupId: this.sActionGroupId,
					functionImport: mActionParams.functionImport
				};

				//indicate that we can collect all changes from group pdDeductionsChanges
				ODataModelUtil.get().addDeferredGroupId(oContext.model, this.sActionGroupId);

				var fnSuccess = function(oData, response) {
					var sLocation;
					if (response.headers.location) {
						sLocation = response.headers.location.split("/").pop();
					} else if (response && response.data && response.data.__batchResponses && response.data.__batchResponses[0] && response.data.__batchResponses[
							0].__changeResponses && response.data.__batchResponses[0].__changeResponses[0] && response.data.__batchResponses[0].__changeResponses[
							0].headers && response.data.__batchResponses[0].__changeResponses[0].headers["location"]) {
						sLocation = response.data.__batchResponses[0].__changeResponses[0].headers["location"].split("/").slice(-1).pop();
					}
					//Trigger Navigation to the returned entity
					if (oData) {
						//Select New Item
						var navPathFromResponse = NavigationUtil.getNavigationPathFromReponse(oData, response);
						var bNavigate = !Utils.isEmptyObjectOrString(navPathFromResponse.subPath) && !Utils.isEmptyObjectOrString(navPathFromResponse.navPath);
						var bContextChanged = oContext.contexts[0].getPath().substring(1) !== navPathFromResponse.subPath;
						//if the data action calls refreshes the entity being manipulated, we check for potential side effects
						if (!bContextChanged && !bNavigate) {
							_determineChangesAndRefreshTargetEntites(oContext, response);
						}
						_navigate(oModel, oContext, navPathFromResponse, oEventSource);
						oContext.controller._lastCreatedItem[sEntitySet] = '/' + navPathFromResponse.subPath;
					}
				};
				// Submit Changes then call function Import if no error returned
				var fnSuccessSubmit = function() {
					//Call Function Import
					PersistenceHelper.callFunction(oModel, {
						name: sFunctionName,
						success: fnSuccess,
						source: oEventSource,
						urlParameters: mActionParams.parameterData,
						batchGroupId: mParameters.batchGroupId
					});
				};
				var fnActionToExcecute = function() {
					PersistenceHelper.submitChanges(oModel, {
						success: fnSuccessSubmit,
						submitChangeOrigin: PersistenceHelper.SUBMIT_CHANGE_ORIGIN.ACTION,
					});
				};
				var fnAbort = function() {
					ODataModelUtil.get().removeDeferredGroupId(oContext.model, that.sActionGroupId);
				};
				if (mActionParams.functionImport) {
					var bActionCritical = mActionParams.functionImport["com.sap.vocabularies.Common.v1.IsActionCritical"] != undefined;
					if (bActionCritical) {
						FragmentHelper.get().confirmationDialog({
							controller: oContext.controller,
							name: mActionParams.functionImport.name,
							label: _sFunctionImportLabel,
							success: fnActionToExcecute,
							error: fnAbort
						});
						return;
					}
				}
				fnActionToExcecute();
			}

			function fnGetActionContext(oEvent, oController) {
				return this.callAction(oEvent.getSource(), oController, undefined, false);
			}

			return {
				sActionGroupId: "DataFieldActionChanges",
				callAction: fnCallAction,
				callInLineAction: fnCallInLineAction,
				getActionContext: fnGetActionContext,
				buildParametersForm: fnBuildParametersForm
			};
		}

		return getMethods();
	}, true);
}; // end of sap/fin/travel/lib/reuse/util/ActionUtil.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.CustomAction')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.CustomAction'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
	jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/CustomAction", [
		"sap/fin/travel/lib/reuse/util/PersistenceHelper",
		"sap/fin/travel/lib/reuse/util/TravelUtil",
		"sap/fin/travel/lib/reuse/util/i18n",
		"sap/ui/model/resource/ResourceModel",
		"sap/fin/travel/lib/reuse/util/DateFormatter",
		"sap/fin/travel/lib/reuse/util/MessageUtil",
		"sap/ui/core/MessageType",
		"sap/m/MessageToast",
		"sap/fin/travel/lib/reuse/util/FragmentHelper",
		"sap/fin/travel/lib/reuse/util/MessageParser"
	], function(PersistenceHelper, Travel, I18n, ResourceModel, DateFormatter, MessageUtil, MessageType, MessageToast, FragmentHelper,
		MessageParser) {
		"use strict";

		var sTripBreakFragmentId = "TripBreakFragmentId"; //const
		var oTripBreakDialogModel = new sap.ui.model.json.JSONModel();

		/**
		 * Handle trip break action. It displays a dialog to capture necessary inputs.
		 * There are calls to GetMaxOccurences function imports when needed, and upon trip break creation, a function import call to CreateTripBreak is performed.
		 * We assume that event is triggered from a button within the entity set table toolbar (smarttable is two parents away from the button)
		 *
		 * @param {object} oEventControl
		 * @param {object} oController mandatory as we do need to access the model of the controller for backend call to the function imports
		 */
		function onAddEntryTripBreakDestination(oEventControl, oController) {
			var oMainSource = oEventControl.getSource();
			//1 - Open the dialog to get input values
			FragmentHelper.get().loadFragment({
				id: sTripBreakFragmentId,
				name: "sap.fin.travel.lib.reuse.view.fragments.TripBreak",
				controller: this,
				models: {
					i18n: oController.getView().getModel("i18n")
				}
			}).then(function(oTripBreakFragment) {
				oTripBreakFragment.addCustomData(new sap.ui.core.CustomData({
					key: "oParent",
					value: null
				}));

				//attach model to the fragment. i18n model used for these controls has to be in the reuse namespace. We do not look for other components' i18n
				oTripBreakFragment.setModel(oTripBreakDialogModel, "tripBreakDialogModel");

				//attach events to the different inputs
				var recComboBox = sap.ui.core.Fragment.byId(sTripBreakFragmentId, "recurrenceInput");
				recComboBox.attachSelectionChange(oController, fnHandleTripBreakRecurrenceChange);

				sap.ui.core.Fragment.byId(sTripBreakFragmentId, "submitButton").attachPress(oController, fnCreateTripBreak);
				sap.ui.core.Fragment.byId(sTripBreakFragmentId, "cancelButton").attachPress(function(oEvent) {
					oTripBreakFragment.close();
				});

				//smart table containing the button (smarttable > toolbar > button)
				oTripBreakFragment.data("oSmartTable", oMainSource.getParent().getParent());

				//set local model
				var oTripObject = oMainSource.getModel().getObject(oMainSource.getBindingContext().getPath());
				if (!oTripObject.Datedep) {
					MessageToast.show(I18n.get().getText(oController, "TRIP_BREAK_REQUIRES_START_DATE"));
					return;
				}

				var oStartDateTime = oTripObject.Datedep && oTripObject.Datedep.getTime();
				oStartDateTime = oTripObject.Timedep && oTripObject.Timedep.ms ? oStartDateTime + oTripObject.Timedep.ms : oStartDateTime;
				var oTBStart = new Date(oStartDateTime + 60000);
				var oTBEnd = new Date(oStartDateTime + 2 * 60000);
				var sTripno = oTripObject.Tripno;
				var sPernr = oTripObject.Pernr;

				var jsonData = {
					startDate: oTBStart,
					endDate: oTBEnd,
					recurrence: "N",
					number: "1",
					numberEditable: false,
					pernr: sPernr,
					tripno: sTripno,
					stripMessage: "",
					stripType: MessageType.None
				};
				oTripBreakDialogModel.setData(jsonData);

				//adjust values in the
				var oStartDate = oTripObject.Datedep;
				var oEndDate = oTripObject.Datearr;
				if (oEndDate === null) {
					oEndDate = oStartDate;
				}

				//Control do not check min date and max date properly. Input is displayed in UTC (but actual value is a javascript date), and the UTC display is verified against these min date and max date which are a javascript date object. As a consequence, min dates and max dates are checking for a range which is completely incorrect.
				//we deactivate these checks as irrelevant...
				/*sap.ui.core.Fragment.byId(sTripBreakFragmentId, "startDateInput").setMinDate(
					new Date(oStartDate.getUTCFullYear(), oStartDate.getUTCMonth(), oStartDate.getUTCDate(), oStartDate.getUTCHours(), oStartDate.getUTCMinutes(),
						oStartDate.getUTCSeconds()));
				sap.ui.core.Fragment.byId(sTripBreakFragmentId, "startDateInput").setMaxDate(
					new Date(oEndDate.getUTCFullYear(), oEndDate.getUTCMonth(), oEndDate.getUTCDate(), oEndDate.getUTCHours(), oEndDate.getUTCMinutes(),
						oEndDate.getUTCSeconds()));
				sap.ui.core.Fragment.byId(sTripBreakFragmentId, "endDateInput").setMinDate(
					new Date(oStartDate.getUTCFullYear(), oStartDate.getUTCMonth(), oStartDate.getUTCDate(), oStartDate.getUTCHours(), oStartDate.getUTCMinutes(),
						oStartDate.getUTCSeconds()));
				sap.ui.core.Fragment.byId(sTripBreakFragmentId, "endDateInput").setMaxDate(
					new Date(oEndDate.getUTCFullYear(), oEndDate.getUTCMonth(), oEndDate.getUTCDate(), oEndDate.getUTCHours(), oEndDate.getUTCMinutes(),
						oEndDate.getUTCSeconds()));
				*/
				sap.ui.core.Fragment.byId(sTripBreakFragmentId, "recurrenceInput").setSelectedKey("N");

				sap.ui.core.Fragment.byId(sTripBreakFragmentId, "numberTripBreakInput").setValueState(sap.ui.core.ValueState.None);

				oTripBreakFragment.open();
			});
		}

		function fnCreateTripBreak(oEvent, oController) {
			var oEventSource = oEvent.getSource();
			//prevent confirm if the number field is in value state error.
			var numberInput = sap.ui.core.Fragment.byId(sTripBreakFragmentId, "numberTripBreakInput");
			if (numberInput !== undefined && sap.ui.core.ValueState.Error === numberInput.getValueState()) {
				return;
			}

			var mParameters = {
				BeginDate: oTripBreakDialogModel.getProperty("/startDate"),
				EndDate: oTripBreakDialogModel.getProperty("/endDate"),
				Number: oTripBreakDialogModel.getProperty("/number"),
				Recurrence: oTripBreakDialogModel.getProperty("/recurrence"),
				Pernr: oTripBreakDialogModel.getProperty("/pernr"),
				Tripno: oTripBreakDialogModel.getProperty("/tripno")
			};

			var fnError = function(oData, oResponse) {
				//error should already be displayed. Nothing changed, error remains on the display
				if (oResponse === undefined) {
					return;
				}
				var error = MessageUtil.get().getErrorMessageResponse(oResponse);
				oTripBreakDialogModel.setProperty("/stripMessage", error.hasOwnProperty("message") ? error.message : error);
				var sErrorType = error.hasOwnProperty("type") ? MessageParser.ErrorType.toMessageType(error.type) : MessageType.Error;
				oTripBreakDialogModel.setProperty("/stripType", sErrorType);
			};

			var fnSuccess = function(oData, oResponse) {
				//check for potential errors: if there is no response, we verify if strip message is filled.
				//If there is a response, we verify if the functional error are there

				//Otherwise, in case of success, refresh the table and close the dialog.
				var oTripBreakFragment = FragmentHelper.get().getFragment(sTripBreakFragmentId);
				if (oTripBreakFragment) {
					var oSmartTable = oTripBreakFragment.data("oSmartTable");
					oSmartTable.rebindTable();
					oTripBreakFragment.close();
				}
			};

			var fnSuccessSubmit = function() {
				PersistenceHelper.callFunction(oController.getView().getModel(), {
					name: "/CreateTripBreak",
					settings: {
						async: true,
					},
					source: oEventSource,
					urlParameters: mParameters,
					success: fnSuccess,
					functionalError: fnError,
					error: fnError
				});
			};

			PersistenceHelper.submitChanges(oController.getView().getModel(), {
				source: oEventSource,
				success: fnSuccessSubmit,
				functionalError: fnSuccessSubmit, //in case of functional error in the global model, we still try to create the trip break
				error: fnError,
				submitChangeOrigin: PersistenceHelper.SUBMIT_CHANGE_ORIGIN.ACTION,
			});

		}

		function fnHandleTripBreakNumberChange(oEvent, oController) {
			var result = Number(oEvent.getSource().getValue());
			//0 is not a valid value for trip break, we put the field in error
			if (result > 0) {
				// use the value from the control that may have been changed by the validator
				oEvent.getSource().setValue(result);
				//Get binding property
				var property = oEvent.getSource().getBindingInfo("value").binding.getPath();
				oTripBreakDialogModel.setProperty(property, result);
			} else {
				oEvent.getSource().setValueState(sap.ui.core.ValueState.Error);
				oEvent.getSource().setValueStateText(I18n.get().getText(oController, "TRIP_BREAK_RECURRENCE_ERROR"));
				oEvent.getSource().focus();
			}
		}

		function fnHandleTripBreakRecurrenceChange(oEvent, oController) {
			var oEventSource = oEvent.getSource();
			var that = this;
			if (oEvent.getParameter("selectedItem")) {
				oTripBreakDialogModel.setProperty("/recurrence", oEvent.getParameter("selectedItem").getProperty("key"));
			} else {
				oTripBreakDialogModel.setProperty("/recurrence", "N");
			}
			if (oTripBreakDialogModel.getProperty("/recurrence") === "N") {
				oTripBreakDialogModel.setProperty("/number", "1");
				oTripBreakDialogModel.setProperty("/numberEditable", false);
			} else {
				oTripBreakDialogModel.setProperty("/numberEditable", true);
				var fnSuccess = function(oData) {
					oTripBreakDialogModel.setProperty("/number", oData.GetMaxOccurences.Value);
				};

				var mParameters = {
					BeginDate: oTripBreakDialogModel.getProperty("/startDate"),
					EndDate: oTripBreakDialogModel.getProperty("/endDate"),
					Recurrence: oTripBreakDialogModel.getProperty("/recurrence"),
					Pernr: oTripBreakDialogModel.getProperty("/pernr"),
					Tripno: oTripBreakDialogModel.getProperty("/tripno")
				};

				PersistenceHelper.callFunction(oController.getView().getModel(), {
					name: "/GetMaxOccurences",
					urlParameters: mParameters,
					source: oEventSource,
					success: fnSuccess,
					settings: {
						async: true
					}
				});
			}
		}

		//holds functional action
		return {
			handleAddTripBreak: onAddEntryTripBreakDestination
		};

	});
}; // end of sap/fin/travel/lib/reuse/util/CustomAction.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.EventHandler')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.EventHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.XMLTemplateProcessor'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.util.XMLPreprocessor'); // unlisted dependency retained
	jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
	jQuery.sap.require('sap.m.PDFViewer'); // unlisted dependency retained
	jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
	jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.base.Event'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/EventHandler", [
		"sap/ui/base/Object",
		"sap/ui/model/Context",
		"sap/ui/core/XMLTemplateProcessor",
		"sap/ui/core/util/XMLPreprocessor",
		"sap/fin/travel/lib/reuse/util/AppComponent",
		"sap/fin/travel/lib/reuse/util/ODataModelUtil",
		"sap/m/MessageBox",
		"sap/fin/travel/lib/reuse/util/i18n",
		"sap/m/PDFViewer",
		"sap/m/MessageToast",
		"sap/fin/travel/lib/reuse/util/ActionUtil",
		"sap/fin/travel/lib/reuse/util/NavigationUtil",
		"sap/fin/travel/lib/reuse/util/MessageUtil",
		"sap/fin/travel/lib/reuse/util/TravelUtil",
		"sap/fin/travel/lib/reuse/util/PersistenceHelper",
		"sap/fin/travel/lib/reuse/util/FCLayoutUtil",
		"sap/fin/travel/lib/reuse/util/CustomDataUtil",
		"sap/fin/travel/lib/reuse/util/PaginatorHelper",
		"sap/fin/travel/lib/reuse/util/AnnotationHelper",
		"sap/m/PlacementType",
		"sap/ui/core/routing/HashChanger",
		"sap/ui/model/json/JSONModel",
		"sap/ui/base/Event",
		"sap/fin/travel/lib/reuse/util/ShareHelper",
		"sap/fin/travel/lib/reuse/util/FragmentHelper",
		"sap/ui/core/MessageType",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/ControlUtil",
		"sap/fin/travel/lib/reuse/util/ConfigurationUtil",
		"sap/fin/travel/lib/reuse/util/AppDescriptorUtil",
		"sap/fin/travel/lib/reuse/util/MessageParser"
	], function(BaseObject, Context, XMLTemplateProcessor, XMLPreprocessor, AppComponent, ODataModelUtil, MessageBox, I18n, PDFViewer,
		MessageToast, ActionUtil, NavigationUtil, MessageUtil, TravelUtil, PersistenceHelper, FCLayoutUtil, CustomDataUtil, PaginatorHelper,
		AnnotationHelper, PlacementType, HashChanger, JSONModel, Event, ShareHelper, FragmentHelper, MessageType, Utils, ControlUtil,
		ConfigurationUtil, AppDescriptorUtil, MessageParser) {
		"use strict";

		function getMethods(oController) {

			oController._lastCreatedItem = new Map();

			/**
			 * Retrieve smart form and perform the regular check on them
			 * In addition, it manually verifies if mandatory fields are filled or not (the default check allows mandatory values to be null if the underlying type is nullable)
			 *
			 * @param bAll: default false. If the bAll is set, all the smart form are checked. Otherwise, only the smart forms contained in the current controller's view are checked
			 * @param fnSuccess: success function to execute. If not provided, we remain on a synchronous process. Otherwise, the success function is called if there are no errors on the fields
			 * @return true if the check is consistent. False otherwise
			 *
			 */
			function checkAppForms(oEvent, bAll, fnSuccess) {

				//determine which process we should take: synchronous with checkClientError or async with checkValuesValidity
				var bCheckOldFashion = true;
				if (fnSuccess && typeof fnSuccess === "function" && ConfigurationUtil.compareVersion(ConfigurationUtil.global.smartFieldCheckValuesValidity,
						sap.ui.version)) { // if smartFieldCheckValuesValidity available

					bCheckOldFashion = false;
				}

				MessageUtil.get().cleanValidationMessages();
				var fnById = oController.getView().byId.bind(oController);
				if (true === bAll) {
					fnById = sap.ui.getCore().byId;
				}
				var aTravelForm = $("[id*=TravelForm]").toArray();
				var aErrors = [];
				var aCheckPromises = [];
				var sErrorMessage = "";

				// return field error message if exists or create one using default i18n key
				var _fnGetErrorMessage = function(oField, sKey) {
					var sFieldError = oField.getValueStateText();
					if (Utils.isEmptyObjectOrString(sFieldError)) {
						var sMessage = I18n.get().getText(oController, sKey, [oField.getTextLabel()]);
						oField.setValueStateText(sMessage);
						return sMessage;
					} else {
						return sFieldError;
					}
				};
				// add error in message popover, called after all Promises has been resovled.
				var _fnFillError = function() {
					if (aErrors && aErrors.length > 0) {
						//should aggregate all the errors
						MessageUtil.get().updateMessageManager(aErrors);
						return false;
					}
					return true;
				};

				for (var i = 0; i < aTravelForm.length; i++) {
					var sf = fnById(aTravelForm[i].id);
					if (sf && sf.getMetadata && sf.getMetadata().getName() ===
						"sap.ui.comp.smartform.SmartForm" && sf.getBindingContext()) {
						//if the entity has been deleted, it should not be checked
						var bContextDeleted = Utils.isEmptyObjectOrString(sf.getBindingContext()) || Utils.isEmptyObjectOrString(oController.getView().getModel()
							.getObject(sf.getBindingContext()
								.getPath()));
						if (bContextDeleted) {
							continue;
						}
						// set Input field in error and add error message to be displayed in popover
						var _fnHandleInvalidField = function(oField) {
							oField.setValueState("Error");
							aErrors.push({
								message: _fnGetErrorMessage(oField, "FIELD_ERROR"),
								target: oField.getBindingContext().getPath() + "/" + oField.getDataProperty().typePath
							});
						};

						sf.getSmartFields().forEach(function(e) {
							var bValidity = false;
							var sMessage = "";
							var bMandatory = e.getMandatory() && e.getEditable() && e.getVisible() && "string" === typeof e.getValue() && Utils.isEmptyObjectOrString(
								e.getValue());
							// Handle error for mandatory fields
							if (bMandatory) {
								e.setValueState("Error");
								aErrors.push({
									message: _fnGetErrorMessage(e, "MANDATORY_FIELD_ERROR"),
									target: e.getBindingContext().getPath() + "/" + e.getDataProperty().typePath
								});
							} else {
								// Handle error for other fields
								e.setValueState(e.getValueState()); // reset oError state to avoid unwanted errors.
								if (false === bCheckOldFashion) { // if smartFieldCheckValuesValidity available
									aCheckPromises.push(e.checkValuesValidity().catch(function() {
										_fnHandleInvalidField(e);
									}));
								} else {
									if (e.checkClientError()) {
										_fnHandleInvalidField(e);
									}
								}
							}
						});
						if (bAll !== true && !Utils.isEmptyObjectOrString(sf.check())) {
							break;
						}
					}
				}

				if (true === bCheckOldFashion) {
					var bFormOk = _fnFillError();
					if (bFormOk && fnSuccess && typeof fnSuccess === "function") {
						fnSuccess();
					}
					return bFormOk;
				} else {
					if (0 === aCheckPromises.length) {
						fnSuccess();
						return;
					}

					//at the end, check errors!
					Promise.all(aCheckPromises).then(function(aCheck) {
						if (_fnFillError()) {
							fnSuccess();
						}
					});
				}
			}

			function _getManifestControllerExtensions() {
				var sControllerName = oController.getMetadata().getName();
				var oManifest = oController.getOwnerComponent().getManifest();
				var oEntitySetControllerExtensions = oManifest && oManifest["sap.ui5"] && oManifest["sap.ui5"]["extends"] && oManifest["sap.ui5"][
					"extends"
				]["extensions"] && oManifest["sap.ui5"]["extends"]["extensions"]["sap.ui.controllerExtensions"] && oManifest["sap.ui5"]["extends"][
					"extensions"
				]["sap.ui.controllerExtensions"][sControllerName] && oManifest["sap.ui5"]["extends"]["extensions"]["sap.ui.controllerExtensions"][
					sControllerName
				]["sap.ui.generic.app"];

				return oEntitySetControllerExtensions;
			}

			function initListPageFilterBar() {
				var fnProfilesLoaded = function(oData) {
					//profile contains Pernr and Travelername as well as other field to detect draft trips
					var profile;
					if (oData && oData.results) {
						$.each(oData.results, function(i, e) {
							if (e.Isself === true) {
								profile = oData.results[0];
								return false;
							}
						});
					} else { //single profile
						profile = oData;
					}

					var oFilterBar = oController.getView().byId("listPageFilterBar");

					var fnFilterBarInitialized = function() {
						if (undefined === profile) {
							//make sure that no cache remains
							oFilterBar.getControlByKey("Pernr").setValue("");
							oFilterBar.getControlByKey("Travelername").setValue("");
							AppComponent.get().updateGlobalModel("/userprofile", oData.results.shift());
							return;
						}
						// Check that filter bar is ready.
						if (oFilterBar.getControlByKey("Pernr") && oFilterBar.getControlByKey("Travelername") && oFilterBar.getConditionTypeByKey(
								"Datedep")) {

							//Default Date - Last 6 months
							var sOperation = "FROM";
							var d = new Date(); // today date
							d.setMonth(d.getMonth() - 6);
							var sDate = sap.ui.core.format.DateFormat.getDateInstance().format(d);
							//Default Pernr & Employee & Features
							if (oFilterBar.getConditionTypeByKey("Datedep")) {
								oFilterBar.getConditionTypeByKey("Datedep").setOperation(sOperation);
								oFilterBar.getConditionTypeByKey("Datedep").setDefaultValues(sDate, sDate);
							}
							if (oFilterBar.getControlByKey("Pernr")) {
								oFilterBar.getControlByKey("Pernr").setValue(profile.Pernr);

							}
							if (oFilterBar.getControlByKey("Travelername")) {
								oFilterBar.getControlByKey("Travelername").setValue(profile.Fullname);
							}

							var bIsFilterBarData = ConfigurationUtil.compareVersion(ConfigurationUtil.global.smartFilterBarFilterData,
								sap.ui.version);
							if (bIsFilterBarData) {
								oFilterBar.setFilterData({
									Pernr: profile.Pernr,
									Travelername: profile.Fullname
								});
							}

							// Default value is not properly handled by SmartFilterBar in case of DateRange Control.
							// Event if we change filter data with oFilterBar.getConditionTypeByKey changes are propagated by DateRangeType which is to late
							// Value will not be handled by the FilterProvider and parameter wont be part of the OData request
							// As a workaround to do change Filter OData model manually accessing the private _oFilterProvider
							var oFilterData = undefined;
							if (oFilterBar.hasOwnProperty("_oFilterProvider") && oFilterBar._oFilterProvider.getModel() && oFilterBar._oFilterProvider.getModel()
								.getData()) {
								oFilterData = oFilterBar._oFilterProvider.getModel().getData();
							}
							if (oFilterData && oFilterData.hasOwnProperty("Datedep") && oFilterData["Datedep"].hasOwnProperty("conditionTypeInfo") &&
								oFilterData["Datedep"].conditionTypeInfo.hasOwnProperty("data")) {
								oFilterData["Datedep"].conditionTypeInfo.data.operation = sOperation;
								oFilterData["Datedep"].conditionTypeInfo.data.value1 = d;
								oFilterBar.setFilterData(oFilterData, false);
							}

							ODataModelUtil
								.get().saveCurrentTripContext({
									Pernr: profile.Pernr,
									Tripno: profile.Unsavedtripnumber
								});

							AppComponent.get().updateGlobalModel("/userprofile", profile);
							// oController.XXXsUnsavedtripnumber = profile.Unsavedtripnumber;
							oController.byId("template::FilterText").setText(oFilterBar.retrieveFiltersWithValuesAsText());

							var oSmartTable = oController.getView().byId("listPageSmartTableID");
							oSmartTable.setEnableAutoBinding(true);
							oSmartTable.rebindTable();

							//restore state as it was at application start-up
							oFilterBar.attachReset(function() {
								if (oFilterBar.getConditionTypeByKey("Datedep")) {
									oFilterBar.getConditionTypeByKey("Datedep").setDefaultValues(this.date, this.date);
								}
								oFilterBar.getControlByKey("Pernr").setValue(this.pernr);
								oFilterBar.getControlByKey("Travelername").setValue(this.travelername);
							}.bind({
								operation: sOperation,
								date: sDate,
								pernr: profile.Pernr,
								travelername: profile.Fullname
							}));
						}
					};

					if (oFilterBar) {
						//in some cases, the filter bar is not yet initialized. But the API does not allow us to know
						//if the filter bar was initialized or not already. And the attacheInitialized only trigger
						//the callback when initialization completes (not after)
						oFilterBar.attachInitialized(fnFilterBarInitialized);
						fnFilterBarInitialized();
					}

				};

				var urlParameters = {
					$skip: 0,
					$top: 1
				};

				var oCtxt = ODataModelUtil.get().getCurrentTripContext();
				if (!Utils.isEmptyObjectOrString(oCtxt) && oCtxt.Pernr) { //Pernr already in the ctxt at initialization
					PersistenceHelper.read(oController.getView().getModel(), "/UserProfiles(Pernr='" + oCtxt.Pernr + "')", {
						success: fnProfilesLoaded
					});
				} else {
					PersistenceHelper.read(oController.getView().getModel(), "/UserProfiles", {
						success: fnProfilesLoaded,
						urlParameters: urlParameters
					});
				}

				//Register to the propertyChange-event of the OData model of the app
				var fnPropertyChanged = function(oEvent) {
					var oEventSource = oEvent.getSource();
					var oContext = oEvent.getParameter("context");

					//isTransient on the context appears in 1.94. It indicates whether entity is frontend-created.
					//we do want to bypass side effects on frontend-created entities
					var bIsTransient = ConfigurationUtil.compareVersion(ConfigurationUtil.global.isTransient,
						sap.ui.version);
					var bByPassSideEffectOnCreatedEntity = bIsTransient ? true === oContext.isTransient() : oContext.bCreated === true;
					if (bByPassSideEffectOnCreatedEntity) {
						//entity is just created, not synced with the backend. Side effect should not be taken place
						//XXX attention, this is assumption so far. We should check for potential misunderstanding of this bCreated property
						return;
					}
					var oModel = oController.getView().getModel();
					var oMetaModel = oModel.getMetaModel();
					var oEntitySetMetaModel = oMetaModel.getODataEntitySet(oContext.getPath().split("(")[0].substring(1));
					if (!oEntitySetMetaModel) {
						return;
					}

					var submitChangeOrigin = PersistenceHelper.SUBMIT_CHANGE_ORIGIN.UNKNOWN;

					//var oEntityType = oMetaModel.getODataEntityType(oEntitySetMetaModel.entityType);
					//var sEntityTypeName = oEntityType.name;

					//If the below manifest search is too power-consuming, we might cache the mButtonsId set result.
					//lookup for struct containing EntitySet == sMainEntitySet. Using getOwnProeprtyNames instead of Object.entries/values/keys :S
					//also, for es5 compatibility reason, we are not using for (var e of Iterable) :S
					var bNotSideEffectable = false;
					var oEntitySetControllerExtensions = _getManifestControllerExtensions();
					oEntitySetControllerExtensions = oEntitySetControllerExtensions || [];
					Object.getOwnPropertyNames(oEntitySetControllerExtensions).forEach(function(e, index, array) {
						if (oEntitySetControllerExtensions[e].EntitySet === oEntitySetMetaModel.name) {
							// Look at Object Page Side-Effect configuration
							if (oEntitySetControllerExtensions[e].hasOwnProperty("Side-Effect") && false === oEntitySetControllerExtensions[e][
									"Side-Effect"
								]) {
								bNotSideEffectable = true;
							}
						}

					});
					if (bNotSideEffectable) {
						jQuery.sap.log.info("Side-effect is prevented: manifest configuration indicates a by-pass");
						return;
					}

					//do not trigger side effect in case of entity in display mode
					var bDisplayMode = oContext.getProperty("DisplayMode");
					if (bDisplayMode && bDisplayMode === true) {
						return;
					}

					if (ODataModelUtil.get().hasPendingChanges(oModel)) {
						var oPendingChanges;
						oPendingChanges = oModel.getPendingChanges();
						if (oPendingChanges !== undefined) {
							if (oContext && oContext instanceof sap.ui.model.Context) {
								var sEntitySet = _getEntitySetFromContext(oContext);
								var oMetaModel = oContext.getModel().getMetaModel();
								var sEntityType = oMetaModel.getODataEntitySet(sEntitySet).entityType;
								var oEntityType = oMetaModel.getODataEntityType(sEntityType);

								var aPendingChanges = Object.keys(oPendingChanges) || [];
								/*	The OData model returns also a __metadata object with the canonical URL and further
									information. As we don't want to check if sideEffects are annotated for this
									property we remove it from the pending changes
								*/
								var iMetaDataIndex = aPendingChanges.indexOf("__metadata");
								if (iMetaDataIndex > -1) {
									aPendingChanges.splice(iMetaDataIndex, 1);
								}

								// Force submitChanges for Mandatory fields to update messages
								var bSubmitChanges = false;
								//Refresh after change should not be triggered when the side effect is triggered on a main entity (TravelExpenses or TravelRequests)
								var bRefreshAfterChange = "TravelExpenses" !== sEntitySet && "TravelRequests" !== sEntitySet;
								var sPathProperty = oEvent.getParameter("path");
								// Check if this feature is enabled
								var oComponentData = oController.getOwnerComponent().getComponentData();
								if (!oComponentData.hasOwnProperty("oAppDescriptor") || AppDescriptorUtil.getFeature(oComponentData.oAppDescriptor[
										"sap.ui.generic.app"], TravelUtil.Features.CheckMandatoryField) !== false) {
									for (var k = 0; k < oEntityType.property.length; k++) {
										if (oEntityType.property[k].name === sPathProperty) {
											// Look for sap:field-control inline annotation
											if (oEntityType.property[k].hasOwnProperty("sap:field-control")) {
												// Read FC property
												var sPathFcProperty = oEntityType.property[k]["sap:field-control"];
												var iFcValue = oModel.getProperty(oContext.getPath())[sPathFcProperty];
												var oldValue = oModel.getOriginalProperty(oContext.getPath())[sPathProperty];
												var newValue = oModel.getProperty(oContext.getPath())[sPathProperty];
												if (iFcValue === 7 && (Utils.isEmptyObjectOrString(oldValue) || Utils.isEmptyObjectOrString(newValue))) {
													// The old value was empty or the new value is empty
													bSubmitChanges = true;
													submitChangeOrigin = PersistenceHelper.SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_MANDATORY;
													break;
												}
											}
											break;
										}
									}
								}

								///Read Side-effects in annotations
								var aNavPropertyPath = [];
								var aAnnocations = oContext.getModel().getServiceAnnotations();
								for (var sAnnotationProp in aAnnocations) {
									if (sAnnotationProp === sEntityType) { // e.g. target:"TRV_MTR_SRV.CostAssignment"
										for (var sEntityProp in aAnnocations[sEntityType]) {
											if (sEntityProp === "com.sap.vocabularies.Common.v1.SideEffects#SideEffects") {
												var oSideEffect = aAnnocations[sEntityType]["com.sap.vocabularies.Common.v1.SideEffects#SideEffects"];
												if (oSideEffect.hasOwnProperty("SourceProperties")) {
													if (oSideEffect.SourceProperties.length == 0) {
														//Side Effects defined for the complete entity - no need to check properties changed
														bSubmitChanges = true;
														submitChangeOrigin = PersistenceHelper.SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_ANNOTATION; //annotation side effet is more imporatant than mandatory
													} else {
														for (var k = 0; k < oSideEffect.SourceProperties.length; k++) {
															for (var l = 0; l < aPendingChanges.length; l++) {
																if (oPendingChanges[aPendingChanges[l]].hasOwnProperty(oSideEffect.SourceProperties[k].PropertyPath)) {
																	//Pending Changes contains at least one property defined as Source Properties in Side-effects
																	bSubmitChanges = true;
																	submitChangeOrigin = PersistenceHelper.SUBMIT_CHANGE_ORIGIN.SIDEEFFECT_ANNOTATION; //annotation side effet is more imporatant than mandatory
																}
															}
														}
													}
													if (oSideEffect.hasOwnProperty("TargetEntities")) {
														if (oSideEffect.TargetEntities.length > 0) {
															// Read Navigation Properties to refresh corresponding sub-entities
															for (var k = 0; k < oSideEffect.TargetEntities.length; k++) {
																var sNavPropertyPath = oSideEffect.TargetEntities[k].NavigationPropertyPath;
																var sPath = oContext.getPath();
																var mParameters = {};

																if (0 !== sPath.indexOf("/")) {
																	sPath = "/" + sPath;
																}

																//optimization to apply side effect only if the model is properly loaded for the target entity. It might happens when main entity triggers side effects on sub entity that is not yet loaded (entity set loaded by a smart table for example).
																//We currently deactivate this behaviour as we can not rely on the context to get key's values (pernr, tripno) that are not necesseraly selected.
																//Furthermore, in presence of deep entities, the key is not only pernr and tripno, but also other attributes that we should fetch and check.
																var bConcerned = true;
																if (bConcerned) {
																	if (sNavPropertyPath == undefined) {
																		aNavPropertyPath.push(undefined);
																	} else {
																		aNavPropertyPath.push(sNavPropertyPath);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}

								var fnReadEntities = function() {
									if (false === bRefreshAfterChange) {
										PersistenceHelper.read(oModel, sPath); // Refresh Entity
									}
									for (var i = 0; i < aNavPropertyPath.length; i++) {
										sNavPropertyPath = aNavPropertyPath[i];
										PersistenceHelper.read(oModel, sPath + "/" + sNavPropertyPath, mParameters); // Refresh associations
									}
								};
								var fnFunctionalError = function(oResponse, oRequest) {
									//in case of functionalError, we trigger the side effect if there are only warnings.
									if (MessageUtil.get().handleMessageResponse(oResponse)) {
										var errors = MessageUtil.get().getErrorMessagesResponse(oResponse);

										var areAllWarnings = errors.every(function(item) {
											return MessageParser.ErrorType.toMessageType(item.type) === MessageType.Warning;
										});

										if (areAllWarnings) {
											fnReadEntities();
										}
									}

								};
								if (bSubmitChanges) {
									PersistenceHelper.submitChanges(oModel, {
										success: fnReadEntities, //Refresh target Entities
										functionalError: fnFunctionalError,
										source: oEventSource,
										settings: {
											refreshAfterChange: bRefreshAfterChange
										},
										submitChangeOrigin: submitChangeOrigin,
										draftIndicator: true
									});
								}
							}
						}
					}
				};
				var oModel = oController.getView().getModel();
				oModel.attachPropertyChange(fnPropertyChanged); // ensure that the handler is called whenever a user input (affecting the OData model) is performed
			}

			function onFilterBarDataReceived(oEvent) {
				// Read backend message and look for error raised
				var oMsgModel = sap.ui.getCore().getMessageManager().getMessageModel();
				if (oMsgModel && oMsgModel.getData() && oMsgModel.getData()[0]) {
					var type = oMsgModel.getData()[0].type;
					var msg = oMsgModel.getData()[0].message;
					if (type === "Error") {
						MessageUtil.get().showMessage({
							error: msg
						});
					}
				}
			}

			function handleFilterBarSearchPressed(oEvent) {
				var oFilterBar = oController.getView().byId("listPageFilterBar");
				var filterPernr = oFilterBar.getControlByKey("Pernr").getValue();
				var sOldSelectedPernr = ODataModelUtil.get().getCurrentTripContext().Pernr;
				if (!Utils.isEmptyObjectOrString(filterPernr) && filterPernr !== sOldSelectedPernr) {
					//Function Import Call - ExitApplication - Unlock Employee Number
					var oModel = oController.getView().getModel();
					ODataModelUtil.get().saveCurrentTripContext({
						Pernr: filterPernr,
						BindingPath: "" //reset bindingPath when changing user
					});
					var fnSuccess = function(oData) {
						//successfully exited the app with the old pernr.
						//We now set back the unsaved trip number in the context
						if (oData && oData.Pernr === filterPernr) {
							ODataModelUtil.get().saveCurrentTripContext({
								Tripno: oData.Unsavedtripnumber
							});
						}

						NavigationUtil.navigateToRoot();
					};

					if (!Utils.isEmptyObjectOrString(sOldSelectedPernr)) {
						PersistenceHelper.callFunction(oModel, {
							name: "/ExitApplication",
							success: fnSuccess,
							urlParameters: {
								Pernr: sOldSelectedPernr,
								NewPernr: filterPernr
							}
						});
					} else {
						PersistenceHelper.read(oController.getView().getModel(), "/UserProfiles(Pernr='" + filterPernr + "')", {
							success: fnSuccess
						});
					}
				}
			}

			function handleListPageItemPress(oEvent) {
				var oEventSource = oEvent.getSource();
				var sTripPath = oEventSource.getBindingContext().getPath();
				var oTargetTrip = new Context(oController.getView().getModel(), sTripPath);
				var oDraftItem = ODataModelUtil.get().getDraftItem(oEventSource);
				FragmentHelper.get().loadFragment({
					id: "TravelMessagePopoverFragmentID",
					name: "sap.fin.travel.lib.reuse.view.fragments.MessagePopover",
					controller: oController,
					models: {
						i18n: oController.getView().getModel("i18n"),
						message: oController.getView().getModel("message")
					}
				}).then(function() {
					//var bAlreadyDisplayed = NavigationUtil.isBindingPathDisplayed(oEvent.getSource().getBindingContext().getPath());

					var onDialogConfirmEdit = function() {
						//get context of trip to cancel/delete before changing the selection
						var mCurrentTripContext = ODataModelUtil.get().getCurrentTripContext();
						//in some cases (deep link, hence not navigating through the internal navigation API), the binding context needs to be determined at runtime
						//in this case, we are working on the same binding context object, we'd just like to replace the Tripno to the previously selected item
						var bindingPath = mCurrentTripContext.BindingPath || oEventSource.getBindingContext().getPath().replace(/Tripno='\d+'/,
							"Tripno='" +
							mCurrentTripContext.Tripno + "'");

						var oList = oEventSource.getParent();
						//Cancel previous trip and Trigger navigation
						_setSelectedItemAndFire(oEventSource.getParent(), oEventSource);
						var oModel = oController.getOwnerComponent().getModel();
						ODataModelUtil.get().resetChanges(oModel);

						//Trip previously selected is properly cancelled. We can now navigate to the new selected entity.
						//We make sure that the new selected entity is marked as invalid to be later refreshed from the server
						var fnSuccess = function() { //Navigation
							oModel.invalidateEntry(sTripPath); // Mark the selected entry in the model cache as invalid. It will be refreshed from the server to force a GET
							var sPath = sTripPath.split("/").slice(-1).pop(); //remove heading slash for the navigation
							NavigationUtil.navigate(sPath, oController.getView().getModel("view").getProperty("/level"));
						};

						fnCancelTrip(oList, fnSuccess, undefined, mCurrentTripContext.Pernr, mCurrentTripContext.Tripno,
							bindingPath, false, true);
					};

					var fnOtherwise = function() {
						//in all other cases, trigger Navigation - Nothing will be lost
						_setSelectedItemAndFire(oEventSource.getParent(), oEventSource);

						var oModel = oController.getOwnerComponent().getModel();
						oModel.invalidateEntry(sTripPath); // Mark the selected entry in the model cache as invalid. It will be refreshed from the server to force a GET

						var navPath = sTripPath;
						NavigationUtil.navigate(navPath, oController.getView().getModel("view").getProperty("/level"));
					};

					fnDraftOrUnsavedByDialog(onDialogConfirmEdit, fnOtherwise, oDraftItem, oTargetTrip);
				});

			}

			/**
			 * if the draft item === target item, we can safely enter into the target item (calling fnOtherwise)
			 * if the draft item !== target item, we need to request user confirmation for data loss (and in case of confirmation calling fnOnConfirm)
			 * if the unsaved by item === target item, we can safely enter into the target item -> it will be in display mode only (calling fnOtherwise)
			 * if the unsaved by item !== target item, we need to request user confirmation with unsaved by details (and in case of confirmation calling fnOnConfirm)
			 * in all other case, we can safely enter into the target item (calling fnOtherwise)
			 *
			 * @param {function} fnOnConfirm function is called when user confirms the dialog.
			 * @param {function} fnOtherwise function is called if there is no dialog to be displayed. it simply calls the function
			 * @param {object} object containing the draft item
			 * @param {object} object containg the item in which we'd like to go to
			 */
			function fnDraftOrUnsavedByDialog(fnOnConfirm, fnOtherwise, oDraftItem, oTargetTrip) {

				var bIsDraft = oDraftItem && oDraftItem.getProperty("DraftLinkType") === "Draft";
				var bIsUnsavedBy = oDraftItem && oDraftItem.getProperty("DraftLinkType") === "UnsavedBy";
				var sTargetTripNumber = oTargetTrip && oTargetTrip.getProperty("Tripno");
				var sDraftTripNumber = oDraftItem && oDraftItem.getProperty("Tripno");

				if (bIsDraft && sDraftTripNumber !== sTargetTripNumber) {
					//trip in draft, warn that data loss can happen

					var sAction = I18n.get().getText(oController, "LEAVE_PAGE");
					MessageBox.show(I18n.get().getText(oController, "BACK_WARNING"), {
						icon: MessageBox.Icon.WARNING,
						title: I18n.get().getText(oController, "WARNING"),
						actions: [sAction, MessageBox.Action.CANCEL],
						onClose: function(oAction) {
							if (oAction === sAction && fnOnConfirm && "function" === typeof fnOnConfirm) {
								fnOnConfirm();
							}
						}
					});
				} else if (bIsUnsavedBy && sDraftTripNumber !== sTargetTripNumber) {
					//trip in unsaved by mode, warn that we would take over existing changes by the other user
					//we display the popup in case of target !== unsavedBy item only, as otherwise the backend provides a display-only item
					var sDraftUser = oDraftItem.getProperty("DraftUserId");
					var sFragmentId = oController.getView().getId() + "UnsavedChangesDialogFragment";
					FragmentHelper.get().getUnsavedDialog(oController, sFragmentId, sDraftTripNumber, sDraftUser).then(fnOnConfirm);
				} else if (fnOtherwise && "function" === typeof fnOtherwise) {
					fnOtherwise();
				}

			}

			/**
			 * Handle item press default behavior for ObjectPage.
			 * When an item in a table is pressed, the default behaviour is to select the item and trigger the navigation to the element
			 */
			function handleItemPress(oEvent) {
				var oEventSource = oEvent.getSource();
				//1-select the item
				_setSelectedItemAndFire(oEvent.getSource().getParent(), oEvent.getSource());

				var sHash = HashChanger.getInstance().getHash();
				var sContextPath = oController.getView().getBindingContext() && oController.getView().getBindingContext().getPath();
				var sDestinationPath = oEvent.getSource().getBindingContext().getPath();
				var navPath = sContextPath + sDestinationPath;
				if (sHash.endsWith(sContextPath)) {
					navPath = sHash + sDestinationPath;
				}

				//2-build paginator model
				PaginatorHelper.get().updateEntry(oController.getView().getModel("view").getProperty("/level") + 1, sDestinationPath, oEvent.getSource()
					.getParent()
					.getBindingInfo(
						"items").binding
					.aKeys);

				//3-trigger navigation after a sbmit Changes
				var fnSuccessSubmit = function() {
					NavigationUtil.navigate(navPath, oController.getView().getModel("view").getProperty("/level"));
				};

				//
				PersistenceHelper.submitChanges(oController.getView().getModel(), {
					source: oEventSource,
					success: fnSuccessSubmit,
					functionalError: fnSuccessSubmit,
					submitChangeOrigin: PersistenceHelper.SUBMIT_CHANGE_ORIGIN.ITEM_PRESS,

				});

			}

			function closeDraftAdminPopover() {
				if (FragmentHelper.get().getFragment(oController.sDraftDialogId)) {
					FragmentHelper.get().getFragment(oController.sDraftDialogId).close();
				}
			}

			function closeDiscardPopover(oEvent, oSourceObj) {
				var oModel = oController.getView().getModel();
				var oSource = oSourceObj ? oSourceObj : CustomDataUtil.getCustomData(oEvent.getSource(), "source");

				if (oSource === "cancel") {
					// Reset All Pending Changes
					ODataModelUtil.get().resetChanges(oModel);
					if (oController.getView().getModel("view").getProperty("/level") === FCLayoutUtil.layout.midColumn.level) { // in case of first level navigation.
						// Get Travel Request Entity with URL Parameters
						var tripno = oController.getView().getBindingContext().getProperty("Tripno");
						var pernr = oController.getView().getBindingContext().getProperty("Pernr");
						//If the trip is new, there is no cancelation to perform on the backend. We can safely delete it.
						//otherwise it cancels the trip
						fnCancelTrip(oSource, undefined, undefined, pernr, tripno);
					} else {
						oController._fclHandler.handleClose();
					}
				} else if (oSource === "close") {
					// Reset Specific Pending Changes if a binding context exists.
					//Otherwise, we just close the column
					var oBindingContext = oController.getView().getBindingContext();
					if (!Utils.isEmptyObjectOrString(oBindingContext) && oModel.getProperty(oBindingContext.getPath())) {
						ODataModelUtil.get().resetChanges(oModel, [oBindingContext.getPath()]);
					}
					oController._fclHandler.handleClose();
				} else if (oSource === "paginator") {
					// Reset Specific Pending Changes
					var oBindingContext = oController.getView().getBindingContext();
					if (!Utils.isEmptyObjectOrString(oBindingContext) && oModel.getProperty(oBindingContext.getPath())) {
						ODataModelUtil.get().resetChanges(oModel, [oBindingContext.getPath()]);
					}
					var sNavObjectPath = oEvent.getParameter("navObjectPath") ? oEvent.getParameter("navObjectPath") : CustomDataUtil.getCustomData(
						oEvent.getSource(), "navObjectPath");
					var sParentPath = oEvent.getParameter("parentPath") ? oEvent.getParameter("parentPath") : CustomDataUtil.getCustomData(oEvent.getSource(),
						"parentPath");
					PaginatorHelper.get().updateEntry(oController.getView().getModel("view").getProperty("/level"), sNavObjectPath);
					NavigationUtil.navigate(sParentPath + sNavObjectPath, oController.getView().getModel("view").getProperty("/level"), true);
				}
				MessageUtil.get().refreshValidationMessages(oController.getView().getBindingContext().getPath());

				if (oController.oDiscardDialog && oController.oDiscardDialog.isOpen()) {
					oController.oDiscardDialog.close();
				}
			}

			/**
			 * Helper to wrap the cancel behaviour in presence of new trip.
			 * A new trip Persistencestatus = 0 is not saved in the backend cluster, thus the regular cancellation does not work as there is nothing to cancel.
			 * In this case, it's wiser to trigger the delete call for the given object to be sure to remove any instances.
			 *
			 * @param {object} the source to determine the context. Optional (if undefined, it's considered as a cancel from an object)
			 * @param {fnSuccess} Success function to be called upon successful cancelation or deletion
			 * @param {fnError} Error function to be called upon error during cancelation or deletion
			 * @param {sPernr} Pernr
			 * @param {sTripno} Tripno
			 * @param {sEntityPath} This param is provided to control which entity path is getting deleted. It's usefull when it's not possible to infer entity path from the context (for example, when a list item is changed, we have difficulties retrieving the previously selected context)
			 * @param {bTriggerNavigation} In some cases, we do not want to control the navigation. For isntance, when the deletion is immediately followed by another navigation (in the success functino for example). This is used for deletion when PersistenceStatus.New
			 * @param {bInvalidateOnCancelNotNecessary} This flags indicates whether the cancelTrip should invalidate or not the entries. For instance, it is not necessary to invalidate trip if the fnSuccess function contains logic to immediately leave it.
			 */
			function fnCancelTrip(oSource, fnSuccess, fnError, sPernr, sTripno, sEntityPath, bTriggerNavigation, bInvalidateOnCancelNotNecessary) {
				var oModel = oController.getView().getModel();
				sEntityPath = sEntityPath || oController.getView().getBindingContext().getPath();
				if (oModel.getProperty(sEntityPath).hasOwnProperty("Persistencestatus") && oModel.getProperty(sEntityPath).Persistencestatus ===
					TravelUtil.PersistenceStatus.New) {
					fnDeleteEntity(oSource, {
						sEntityName: I18n.get().getText(oController, "OBJECT_TYPE"),
						fnSuccess: fnSuccess,
						fnError: fnError,
						sEntityPath: sEntityPath,
						bTriggerNavigation: bTriggerNavigation
					});
				} else {
					PersistenceHelper.cancelTrip(oModel, {
						success: function() {
							PersistenceHelper.resetSubEntityChanges(oModel, sPernr, sTripno);
							if (fnSuccess && typeof fnSuccess === "function") {
								fnSuccess(arguments);
							}
						},
						error: fnError,
						urlParameters: {
							Tripno: sTripno,
							Pernr: sPernr
						},
						settings: {
							refreshAfterChange: !bInvalidateOnCancelNotNecessary
						},
						invalidate: !bInvalidateOnCancelNotNecessary
					});
				}
			}

			function handleOnDraftLinkPressed(oEvent) {
				var oButton = oEvent.getSource();
				oController.sDraftDialogId = oController.getView().getId() + "DraftAdminDataPopoverFragment";
				FragmentHelper.get().loadFragment({
					id: oController.sDraftDialogId,
					name: "sap.fin.travel.lib.reuse.ListPage.view.fragments.DraftAdminDataPopover",
					controller: oController,
					models: {
						i18n: oController.getView().getModel("i18n")
					}
				}).then(function(oDraftDialog) {
					if (oDraftDialog) {
						oDraftDialog.setModel(new JSONModel({
							"DraftLinkType": oButton.getBindingContext().getProperty("DraftLinkType"),
							"DraftUserId": oButton.getBindingContext().getProperty("DraftUserId"),
							"TripChange": oButton.getBindingContext().getProperty("TripChange")
						}));

						oDraftDialog.bindElement("/");
						oDraftDialog.openBy(oButton);
					}
				});
			}

			function handleEditAction(oEvent) {
				var oSource = oEvent.getSource();
				oSource.setEnabled(false); // Disabled edit button to prevent from multiple clics
				//reset delete button enablement status
				$("[id*=deleteEntry]").each(function(i, j) {
					var ownerId = oController.getOwnerComponent().getId();
					var buttonId = ownerId + j.id.split(ownerId).slice(-1).pop();
					var oDeleteButton = oController.getView().byId(buttonId);
					if (oDeleteButton && oDeleteButton.getMetadata && oDeleteButton.getMetadata().getName() === "sap.m.Button") {
						oDeleteButton.setEnabled(false);
					}
				});

				var oModel = oController.getView().getModel();
				// Get Travel Request Entity with URL Parameters
				var tripno = oController.getView().getBindingContext().getProperty("Tripno");
				var pernr = oController.getView().getBindingContext().getProperty("Pernr");

				var fnSuccess = function(oData) {
					//in case of backend error => key does not correspond to the actual trip.
					//we do display a generic error
					var bTripno = oData && oData.Tripno === tripno;
					var bPernr = oData && oData.Pernr === pernr;
					if (!bPernr || !bTripno) {
						MessageUtil.get().showMessage(I18n.get().getText(oController,
							"UNKNOWN_ERROR"));
					}

					PersistenceHelper.invalidateEntries(oModel, {
						Pernr: oData.Pernr,
						Tripno: oData.Tripno
					});
				};

				var fnSwitchEditMode = function(fnResolve) {
					//Function Import Call - Switch from Display to Edit Mode
					PersistenceHelper.callFunction(oModel, {
						name: "/SwitchEditMode",
						success: fnSuccess,
						functionalError: fnSuccess,
						resolve: fnResolve,
						reject: fnResolve,
						urlParameters: {
							Pernr: pernr,
							Tripno: tripno
						},
						settings: {
							refreshAfterChange: false
						}
					});
				};

				// Check for locking or unsaved changes
				var bIsDraftLinkVisible = oController.getView().getBindingContext().getProperty("DraftLinkVisible");
				var bIsDraftLinkType = oController.getView().getBindingContext().getProperty("DraftLinkType") === "UnsavedBy";
				var sDraftUserId = oController.getView().getBindingContext().getProperty("DraftUserId") || "";
				var sDraftTripno = oController.getView().getBindingContext().getProperty("Tripno") || "";
				var fnPromise = function(resolve) {
					if (bIsDraftLinkVisible && bIsDraftLinkType) {
						var sFragmentId = oController.getView().getId() + "UnsavedChangesDialogFragment";
						FragmentHelper.get().getUnsavedDialog(oController, sFragmentId, sDraftTripno, sDraftUserId).then(
							function() {
								//Function Import Call - Cancel flight and switch to Edit Mode
								fnCancelTrip(undefined, fnSwitchEditMode.bind(null, resolve), undefined, pernr, tripno, undefined, false);
							});
					} else {
						//Function Import Call - Switch from Display to Edit Mode
						fnSwitchEditMode.apply(null, [resolve]);
					}
				};
				var fnResolve = function() {
					oSource.setEnabled(true);
				};

				var pEditAction = new Promise(fnPromise);
				pEditAction.then(fnResolve).catch(fnResolve); // run promise then enabled edit button after success or error callback function of SwitchEditMode.
			}

			function handleCancelAction(oEvent) {
				var oCustomSourceData = CustomDataUtil.getCustomData(oEvent.getSource(), "source");
				var sEntityName = CustomDataUtil.getCustomData(oEvent.getSource(), "entityName");
				var sEntityKey = CustomDataUtil.getCustomData(oEvent.getSource(), "entityKey");
				var sEntity = sEntityKey ? sEntityName + " \"" + sEntityKey + "\"" : sEntityName;
				var oSourceModel = {
					source: oCustomSourceData,
					parentPath: oEvent.getParameter("parentPath"),
					navObjectPath: oEvent.getParameter("navObjectPath"),
					message: sEntity ? I18n.get().getText(oController, "DISCARD_ENTITY", sEntity) : I18n.get().getText(oController, "DISCARD_EDIT")
				};
				// Discard Changes - popover
				var oModel = oController.getView().getModel();

				var sBindingPath = oController.getView().getBindingContext() && oController.getView().getBindingContext().getPath();
				if (ODataModelUtil.get().hasPendingChanges(oModel, sBindingPath)) { // if the user has done any changes to the draft, a confirmation popover is displayed
					var oSource = oEvent.getSource();
					FragmentHelper.get().loadFragment({
						id: oController.getView().getId() + "DiscardDraftPopoverFragment",
						name: "sap.fin.travel.lib.reuse.view.fragments.DiscardDraftPopover",
						controller: oController,
						models: {
							i18n: oController.getView().getModel("i18n")
						}
					}).then(function(discardDialog) {
						if (discardDialog) {
							discardDialog.setModel(oController.getView().getModel());

							discardDialog.setModel(new JSONModel(oSourceModel), "discard");
							discardDialog.openBy(oSource); // further execution will be performed by the event handler of this popover
						}
					});
				} else { // the user wants to cancel a draft he has not edited at all -> execute immeadiately (no confirmation required)
					closeDiscardPopover(oEvent, oCustomSourceData);
				}
			}

			function callSaveSubmit(oEvent, iUserAction, bSkipCheck, fnSuccess, fnFunctionalError, fnError) {
				var oEventSource = oEvent.getSource();
				var fnSaveSubmit = function() {
					var oModel = oController.getView().getModel();
					// Get Travel Request Entity with URL Parameters
					var tripno = oController.getView().getBindingContext().getProperty("Tripno");
					var pernr = oController.getView().getBindingContext().getProperty("Pernr");

					var mParameters = {
						Pernr: pernr,
						Tripno: tripno,
						Useraction: iUserAction
					};

					var fnSuccessSave = function(oData, response) {
						if (!MessageUtil.get().handleMessageResponse(response)) {
							if (fnSuccess != undefined && typeof fnSuccess === "function") {
								fnSuccess();
							}
							// Display Success Message
							MessageToast.show(I18n.get().getText(oController, iUserAction === TravelUtil.UserAction.Save || iUserAction === TravelUtil.UserAction
								.Draft ? "SAVE_MSG" :
								"SUBMITTED_MSG_NO_APPROVER"));
							//RefreshAfterChange - Refresh List Page in case of success
							var oSmartTable = sap.ui.getCore().byId('listPageView--listPageSmartTableID');
							if (oSmartTable) {
								oSmartTable.rebindTable();
							}
							if (oController.getView().getBindingContext().getProperty("Persistencestatus") === TravelUtil.PersistenceStatus.New) {
								//Trigger navigation if the trip was in draft mode previously (Persistencestatus === 0)
								var sEntityPath = response.headers && response.headers["location"] && response.headers["location"].split("/").slice(-1).pop();
								var sNavPath = '/' + sEntityPath;
								NavigationUtil.navigate(sNavPath, oController.getView().getModel("view").getProperty("/level"), true);
							} else {
								//in such case, there is no need to invalidate the new entry as we are navigating to it, thus backend will return it as expected
								if (iUserAction !== TravelUtil.UserAction.Draft) {
									//In case of successfull save or submit, the backend switch from edit to display. We should reflect these changes in sub-entities
									PersistenceHelper.invalidateEntries(oModel, {
										Pernr: oData.Pernr,
										Tripno: oData.Tripno
									});
								}
							}

						}
					};
					var fnSuccessSubmit = function() {
						PersistenceHelper.callFunction(oModel, {
							name: "/SaveTrip",
							source: oEventSource,
							error: fnError,
							success: fnSuccessSave,
							functionalError: fnFunctionalError,
							urlParameters: mParameters,
							settings: {
								refreshAfterChange: false
							}
						});
					};

					PersistenceHelper.submitChanges(oModel, {
						success: fnSuccessSubmit,
						submitChangeOrigin: PersistenceHelper.SUBMIT_CHANGE_ORIGIN.ACTION,
						settings: { //in case of pending changes, we are directly saving the trip afterwards which will properly refresh concerned entities. No need to refresh it now
							refreshAfterChange: false
						}
					});
				};
				if (bSkipCheck) {
					fnSaveSubmit();
				} else {
					checkAppForms(oEvent, true, fnSaveSubmit);
				}
			}

			function handleSubmitAction(oEvent, fnSuccess, fnFunctionalError, fnError) {
				// Useraction = 3
				callSaveSubmit(oEvent, TravelUtil.UserAction.Submit, false, fnSuccess, fnFunctionalError, fnError);
			}

			function handleSaveAction(oEvent) {
				// Useraction = 2
				callSaveSubmit(oEvent, TravelUtil.UserAction.Save);
			}

			function handleSaveAsDraftAction(oEvent) {
				// Useraction = 4
				callSaveSubmit(oEvent, TravelUtil.UserAction.Draft, true);
			}

			function _createEntry(oModel, oSmartTable, sEntitySet, oSettings) {
				var fnSuccess = function(oData, response) {
					//Entity created. In case of navigatable item, we do trigger the navigation.

					//Prelimineray step: we record for the entity type the latest created record. This record will be selected by default
					//with the next table refresh
					//we assume that the table refresh will be performed after creation
					//we can provide safeguard (selected item === created item) to
					var oItem = oSmartTable.getTable().getSelectedItem();
					var subEntityPath = response.headers && response.headers["location"] && response.headers["location"].split("/").slice(-1).pop();
					var sCreatedEntityBindingPath = "/" + subEntityPath;
					if (oItem && oItem.getBindingContext() === sCreatedEntityBindingPath) {
						//item already selected, do not save it
						oController._lastCreatedItem[sEntitySet] = undefined;
					} else {
						//item is different, we save it for a later selection
						oController._lastCreatedItem[sEntitySet] = sCreatedEntityBindingPath;
					}

					if (!oSettings.inLine) {
						//When we create the entity, we do not have its navigation status contained in the corresponding ListItem.
						//Thus, we get the navigation status that is retrieved using the exact same procedure.
						//In case of "Navigation" type, the element is navigable.
						var pages = {
							pages: [],
							settings: []
						};

						//XXX sap.fin.travel.lib.reuse
						AnnotationHelper.listAppPages(AppComponent.get().getConfig(), pages);
						var sNavType = AnnotationHelper.getColumnListItemType(pages.pages, {
							name: sEntitySet
						});
						var bNavigable = "Navigation" === sNavType;

						//1) Get the first created item of the list

						//a. It corresponds to the list item in oSmartTable.getTable().getSelectedItemById() with id provided in oData
						//b. Check if the item has the navigation property set (meaning that item is navigable)
						//c. Select it and fire selection change
						// //XXX will be moved
						// if (oController.getView().getModel("view").getProperty("/level") === 0) {
						// 	var oList = oController.getView().byId("responsiveTableID");
						// 	_setSelectedItemAndFire(oList, oList.getItems()[0]);

						// }

						//d. Navigate to it.
						if (bNavigable) {
							var sHash = HashChanger.getInstance().getHash();
							var sContextPath = oSettings.viewContext ? oSettings.viewContext.getPath() : "";
							var sDestinationPath = sCreatedEntityBindingPath;
							var navPath = sContextPath + sDestinationPath;
							if (!Utils.isEmptyObjectOrString(sContextPath) && sHash.endsWith(sContextPath)) {
								navPath = sHash + sDestinationPath;
							}
							// update the paginator state with the new created item.
							var aBindings = [];
							oSmartTable.getTable().getItems().forEach(function(oItem) { // add all list items
								if (!Utils.isEmptyObjectOrString(oItem.getBindingContext())) {
									var sBindingPath = oItem.getBindingContext().getPath();
									aBindings.push(sBindingPath.slice(1));
								}
							});
							aBindings.push(sDestinationPath.slice(1)); // created item;
							PaginatorHelper.get().updateEntry(oController.getView().getModel("view").getProperty("/level") + 1, sDestinationPath, aBindings);

							NavigationUtil.navigate(navPath, oController.getView().getModel("view").getProperty("/level"));
						}
					}
				};

				PersistenceHelper.createEntry(oModel, oSettings.bindingPath, {
					success: fnSuccess,
					properties: oSettings.properties,
					submit: oSettings.submit
				});
			}

			/**
			 * Handle creation default behavior
			 * The creation is triggered from a ListPage to create the main object, or from a table contained in an ObjectPage
			 */
			function handleCreateAction(oEvent) {
				var oSource = oEvent.getSource();
				//Get the table context
				checkAppForms(oEvent, false, function() {
					var oSmartTable = ControlUtil.getSmartTable(oSource);
					var sEntitySet = oSmartTable.getEntitySet();
					var oModel = oSmartTable.getModel();
					var oView = oController.getView();
					var oViewContext = oView.getBindingContext();
					var sBindingPath;
					var oProperties;
					var bCreateFromList = false;
					if (oViewContext) {
						//assumes that navigation path for an inner element corresponds to the navigation name
						var sNavProp = ODataModelUtil.get().getNavigationProperty(oController, oModel, sEntitySet);
						sBindingPath = oViewContext.getPath() + "/" + sNavProp;
					} else {
						// on list, support only one entityset mapped to the root component
						var sSelectedPernr = ODataModelUtil.get().getCurrentTripContext().Pernr;
						sBindingPath = "/" + sEntitySet;
						oProperties = {
							Pernr: sSelectedPernr
						};
						bCreateFromList = true;
					}
					var oSettings = {
						bindingPath: sBindingPath,
						viewContext: oViewContext,
						properties: oProperties
					};
					var fnCreateEntry = function() {
						_createEntry(oModel, oSmartTable, sEntitySet, oSettings);
					};
					if (bCreateFromList) {
						//check for draft/unsavedBy item
						var oDraftItem = ODataModelUtil.get().getDraftItem(oSmartTable);
						fnDraftOrUnsavedByDialog(fnCreateEntry, fnCreateEntry, oDraftItem);
					} else {
						fnCreateEntry();
					}
				});
			}

			function handleCreateCustomAction(oEvent) {
				var oSource = oEvent.getSource();
				var oSelectedItem = oEvent.getSource().getSelectedItem();
				var oSmartTable = ControlUtil.getOwnerControl(oController.oSmartTable);
				var aProperties = JSON.parse(CustomDataUtil.getCustomData(oSelectedItem, "Properties"));
				var sEntitySet = CustomDataUtil.getCustomData(oSelectedItem, "Entity");
				var oModel = oSmartTable.getModel();
				var sBindingPath;
				var oView = oController.getView();
				var oViewContext = oView.getBindingContext();

				if (oViewContext) {
					//assumes that navigation path for an inner element corresponds to the navigation name
					sBindingPath = oViewContext.getPath() + "/" + sEntitySet;
				} else {
					// on list, support only one entityset mapped to the root component
					sBindingPath = "/" + sEntitySet;
				}

				var oSettings = {
					bindingPath: sBindingPath,
					viewContext: oController.getView().getBindingContext(),
					properties: {}
				};

				// Handle properties
				var oItemBindingContext = oSelectedItem.getBindingContext();
				for (var i = 0; i < aProperties.length; i++) {
					oSettings.properties[aProperties[i]] = oItemBindingContext.getProperty(aProperties[i]);
				}

				_createEntry(oModel, oSmartTable, oSmartTable.getEntitySet(), oSettings);
				oSource.getParent().close();
			}

			/** Handler when action select dialog is being canceled
				We would ensure that dialog is properly unbound when closing it
			 */
			function handleSearcheableActionItemCancel(oEvent) {
				if (oController.oAddSearchEntriesDialog) {
					oController.oAddSearchEntriesDialog.unbindElement();
					oController.oAddSearchEntriesDialog.destroy();
				}
			}

			function handleSearcheableActionItemConfirm(oEvent) {
				var aSelectedItem = oEvent.getParameters().selectedItems;
				var oSmartTable = ControlUtil.getOwnerControl(oController.oSmartTable);
				var oModel = oSmartTable.getModel();
				var oView = oController.getView();
				var oViewContext = oView.getBindingContext();
				var aProperties, sEntitySet, sBindingPath, oItemBindingContext, oSettings, oSelectedItem;
				if (aSelectedItem && aSelectedItem.length > 0) {
					for (var index = 0; index < aSelectedItem.length; index++) {
						oSelectedItem = aSelectedItem[index];
						aProperties = JSON.parse(CustomDataUtil.getCustomData(oSelectedItem, "Properties"));
						sEntitySet = CustomDataUtil.getCustomData(oSelectedItem, "Entity");

						if (oViewContext) {
							//assumes that navigation path for an inner element corresponds to the navigation name
							sBindingPath = oViewContext.getPath() + "/" + sEntitySet;
						} else {
							// on list, support only one entityset mapped to the root component
							sBindingPath = "/" + sEntitySet;
						}

						oSettings = {
							bindingPath: sBindingPath,
							viewContext: oController.getView().getBindingContext(),
							properties: {},
							inLine: aSelectedItem.length > 1,
							submit: index === aSelectedItem.length - 1
						};

						oItemBindingContext = oSelectedItem.getBindingContext();
						for (var i = 0; i < aProperties.length; i++) {
							oSettings.properties[aProperties[i]] = oItemBindingContext.getProperty(aProperties[i]);
						}

						_createEntry(oModel, oSmartTable, oSmartTable.getEntitySet(), oSettings);
					}
				}
				if (oController.oAddSearchEntriesDialog) {
					oController.oAddSearchEntriesDialog.unbindElement();
					oController.oAddSearchEntriesDialog.destroy();
				}
			}

			function handleCreateActionList(oEvent) {
				var oButton = oEvent.getSource();
				checkAppForms(oEvent, false, function() {
					var oBindingContext = oButton.getBindingContext();
					var sNavProp = ODataModelUtil.get().getNavigationProperty(oController, oBindingContext.getModel(), ControlUtil.getOwnerControl(
							oButton)
						.getEntitySet());
					var aTargetSettings = JSON.parse(CustomDataUtil.getCustomData(oButton, "targetEntitySettings"));
					oController.oSmartTable = oButton.getParent();
					var oPreprocessors = oController.oPreprocessors.xml;
					oPreprocessors.models.actionEntity = new sap.ui.model.json.JSONModel({
						targetEntity: aTargetSettings[0],
						targetName: aTargetSettings[1],
						targetProperties: CustomDataUtil.getCustomData(oButton, "targetEntityProperties"),
						sourceEntity: sNavProp
					});
					var oFragment = XMLTemplateProcessor.loadTemplate("sap.fin.travel.lib.reuse.DetailPage.view.fragments.ActionListItem", "fragment");
					oFragment.oAddEntriesDialog = XMLPreprocessor.process(oFragment, {
						name: "sap.fin.travel.lib.reuse.DetailPage.view.fragments.ActionListItem"
					}, oPreprocessors);
					oController.oAddEntriesDialog = sap.ui.xmlfragment({
						fragmentContent: oFragment,
						type: "XML"
					}, oController);
					oController.oAddEntriesDialog.attachAfterClose(function() {
						oController.oAddEntriesDialog.unbindElement();
						oController.oAddEntriesDialog.destroy();
					});

					oController.oAddEntriesDialog.setModel(oController.getView().getModel());
					oController.oAddEntriesDialog.bindElement(oController.getView().getBindingContext().getPath());
					oController.oAddEntriesDialog.openBy(oButton);
				});
			}

			function handleCreateActionSearcheableList(oEvent) {
				var oButton = oEvent.getSource();
				checkAppForms(oEvent, false, function() {
					var oBindingContext = oButton.getBindingContext();
					var sNavProp = ODataModelUtil.get().getNavigationProperty(oController, oBindingContext.getModel(), ControlUtil.getOwnerControl(
							oButton)
						.getEntitySet());
					var sNavPropName = ODataModelUtil.get().getNavigationPropertyName(oController, oBindingContext.getModel(), ControlUtil.getOwnerControl(
							oButton)
						.getEntitySet());
					var aTargetSettings = JSON.parse(CustomDataUtil.getCustomData(oButton, "targetEntitySettings"));
					oController.oSmartTable = oButton.getParent();
					var oPreprocessors = oController.oPreprocessors.xml;
					oPreprocessors.models.actionEntity = new sap.ui.model.json.JSONModel({
						targetEntity: aTargetSettings[0],
						targetName: aTargetSettings[1],
						targetProperties: CustomDataUtil.getCustomData(oButton, "targetEntityProperties"),
						sourceEntity: sNavProp,
						title: I18n.get().getText("ADD_ACTION_ITEMS", sNavPropName),
						noDataText: I18n.get().getText("NO_ACTION_ITEMS", sNavPropName)
					});
					var oFragment = XMLTemplateProcessor.loadTemplate("sap.fin.travel.lib.reuse.DetailPage.view.fragments.ActionSearchFieldItem",
						"fragment");
					oFragment.oAddSearchEntriesDialog = XMLPreprocessor.process(oFragment, {
						name: "sap.fin.travel.lib.reuse.DetailPage.view.fragments.ActionSearchFieldItem"
					}, oPreprocessors);
					oController.oAddSearchEntriesDialog = sap.ui.xmlfragment({
						fragmentContent: oFragment,
						type: "XML"
					}, oController);

					oController.oAddSearchEntriesDialog.setModel(oController.getView().getModel());
					oController.oAddSearchEntriesDialog.bindElement(oController.getView().getBindingContext().getPath());
					oController.oAddSearchEntriesDialog.open();
				});
			}

			function handleSearcheableActionItemSearch(oEvent) {
				var oList = oEvent.getSource(),
					sValue = oEvent.getParameter("value");

				if (oList) {
					var items = oList.getItems();
					if (items) {
						var i = 0;
						for (i = 0; i < items.length; i++) {
							if (items[i].getTitle().toLowerCase().indexOf(sValue.toLowerCase()) !== -1) {
								items[i].setVisible(true);
							} else {
								items[i].setVisible(false);
							}
						}
					}
				}
			}

			/**
			 * @param {object} mSettings is an object with expected following properties
			 *   - sEntityName: optionnal, the entity name is displayed in the message toast to confirm a proper deletion
			 *   - fnSuccess: optionnal, function executed once the deletion is succesful
			 *   - fnError: optionnal, function executed in case of error
			 *   - sEntityPath: optionnal, if provided, this entityPath is deleted (calling oModel.delete(sEntityPath). If it's not provided, we try to infer the entityPath from the source context. On a list, we retrieve the selected context and delete it. On an object, we retrieve the binding context and delete it.
			 *   - bTriggerNavigation: optionnal. In some cases, we do not want to control the navigation. For isntance, when the deletion is immediately followed by another navigation (in the success functino for example)
			 *
			 * Special case: when we are deleting a master entity (from the list page [controller level 0, list deletion], or from the object page [controller level 1, object deletion]), we reset all pending changes concerning sub-entities (not just all, as we can delete a trip not in edition). The relation can be more complex (sub-entity deletion would also need to invlidate its sub-sub-entities's pending changes, but we let this case aside at the moment)
			 *
			 */
			function fnDeleteEntity(oSource, mSettings) {

				var sEntityName = mSettings.sEntityName;
				var fnSuccess = mSettings.fnSuccess;
				var fnError = mSettings.fnError;

				var sEntityPath = mSettings.sEntityPath;
				//if the entity path is not already provided, we try to infer it from the source context
				//at the moment, a bindingpath provided through the settings occurs only when cancelling a trip
				var bDeleteMasterObject = true;
				var bDeleteList = false;
				var oList;
				if (Utils.isEmptyObjectOrString(sEntityPath)) {
					oList = ControlUtil.getSmartTable(oSource);
					bDeleteList = !Utils.isEmptyObjectOrString(oList) && oList.getTable;

					if (bDeleteList) {
						//Try to delete an item from a table (from a ListPage or from a DetailPage)
						sEntityPath = oList.getTable().getSelectedContextPaths()[0];
						bDeleteMasterObject = oController.getView().getModel("view").getProperty("/level") === 0;
					} else {
						//Try to delete an object (main entity or sub entity)
						sEntityPath = oController.getView().getBindingContext().getPath();
						bDeleteMasterObject = oController.getView().getModel("view").getProperty("/level") === 1;
					}
				}

				if (Utils.isEmptyObjectOrString(sEntityPath)) {
					return;
				}

				var fnRemoveSuccess = function(bDisplayMessage) {
					if (bDisplayMessage) {
						MessageToast.show(I18n.get().getText(oController, "DELETE_OK", sEntityName));
					}
					if (bDeleteList) {
						//unselect the list
						oList.getTable().removeSelections(true);
						//ensure that navigation is at the proper level. For instance, a selected item with the corresponding column opened should be close, as the item is now deleted
						if (mSettings && mSettings.bTriggerNavigation !== false && NavigationUtil.isBindingPathDisplayed(sEntityPath)) {
							NavigationUtil.navigateBack(oController.getView().getModel("view").getProperty("/level") + 1);
						}
					} else if (mSettings && mSettings.bTriggerNavigation !== false) {
						NavigationUtil.navigateBack(oController.getView().getModel("view").getProperty("/level"));
					}

					if (bDeleteMasterObject) {
						//clean pending changes concerning related sub entities
						var aResult = /Pernr='(\d+)'/.exec(sEntityPath);
						var sPernr = !Utils.isEmptyObjectOrString(aResult) && aResult[1];
						aResult = /Tripno='(\d+)'/.exec(sEntityPath);
						var sTripno = !Utils.isEmptyObjectOrString(aResult) && aResult[1];
						var oModel = oController.getView().getModel();
						PersistenceHelper.resetSubEntityChanges(oModel, sPernr, sTripno);
						// In case of sub entities we have to invalidate to read them again next time. Especially when tripno="00000000"
						PersistenceHelper.invalidateEntries(oModel, {
							Pernr: sPernr,
							Tripno: sTripno,
							refreshAfterChange: false
						});
					}

					if (fnSuccess && typeof fnSuccess === "function") {
						fnSuccess();
					}
				};

				// Delete object and navigate back
				var oModel = oController.getOwnerComponent().getModel();
				PersistenceHelper.remove(oModel, sEntityPath, {
					success: fnRemoveSuccess.bind(this, true),
					functionalError: fnRemoveSuccess,
					error: fnError,
					refreshAfterChange: true //default
				});

			}

			function handleDeleteAction(oEvent) {
				var that = oController;
				var sourceControl = oEvent.getSource();
				var sEntity = CustomDataUtil.getCustomData(sourceControl, "entityName");
				var fnError = function(oData, oResponse) {
					var error = "";
					if (oResponse != undefined) {
						error = MessageUtil.get().getErrorMessageResponse(oResponse);
					} else {
						error = MessageUtil.get().getErrorMessageResponse(oData);
					}
					MessageUtil.get().showMessage(error);
				};
				MessageBox.show(I18n.get().getText(oController, "DELETE_WARNING", sEntity), {
					icon: MessageBox.Icon.ERROR,
					title: I18n.get().getText(oController, "DELETE_TITLE"),
					actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],
					onClose: function(oAction) {
						if (oAction === MessageBox.Action.OK) {
							fnDeleteEntity(sourceControl, {
								sEntityName: sEntity,
								fnError: fnError
							});
						}
					}
				});
			}

			/**
			 * Default behaviour for data received on a table.
			 * The default behavior is to reset the "Delete" button status (visible if entity is having no delete restriction, and not enabled).
			 * Then, it selects an entry if needed (selection for the last created item for instance, binding path being saved in _lastCreatedItem)
			 */
			function onDataReceivedDetailTable(oEvent) {
				var oSmartTable = oEvent.getSource();
				var sEntitySet = oSmartTable.getEntitySet();

				// check for on behalf of
				var oSmartFilterBar = oController.byId(oSmartTable.getSmartFilterId());
				if (oSmartFilterBar) {
					var oFilterValue = JSON.parse(oSmartFilterBar.getFilterDataAsString());
					// we check if data result has been retrieve by table (i.e. data has been sent by backend) (i.e. request is valid and user name exists)
					if (oEvent.getParameter("mParameters") && oEvent.getParameter("mParameters").hasOwnProperty("data")) {
						var oProfile = oController.getView().getModel().getProperty("/UserProfiles('" + oFilterValue.Pernr + "')");
						AppComponent.get().updateGlobalModel("/userprofile", oProfile);
						if (oProfile && !oProfile.Isself) {
							oController.byId("template::UserText").setText(I18n.get().resolveText("ON_BEHALF_OF", [oFilterValue.Travelername, oFilterValue.Pernr]));
						} else {
							oController.byId("template::UserText").setText(I18n.get().resolveText("MY_SELF", [oFilterValue.Travelername, oFilterValue.Pernr]));
						}
					} else {
						oController.byId("template::UserText").setText("");
					}

				}

				// Check section visibility
				if (sEntitySet !== this.getOwnerComponent().sEntitySet) {
					var aWithoutVariant = oSmartTable.getId().split('::');
					aWithoutVariant.pop(); // last param id is the variant
					var oSection = this.getView().byId(aWithoutVariant.join('::').replace("::Table", "::Section"));
					if (oSection) {
						if (oEvent.getParameters().getParameter("data") && oEvent.getParameters().getParameter("data").results.length > 0) {
							if (oSection.getBindingInfo("visible") !== undefined) {

								oSection.bindProperty("visible", {
									parts: [{
										path: oSection.getBindingInfo("visible").parts[0].path,
										type: new sap.ui.model.type.Boolean()
									}],
									formatter: function(bHidden) {
										return !bHidden;
									}
								});
							}
						} else {
							if (oSection.getBindingInfo("visible") !== undefined) {
								oSection.bindProperty("visible", {
									parts: [{
										path: oSection.getBindingInfo("visible").parts[0].path,
										type: new sap.ui.model.type.Boolean()
									}, {
										path: "DisplayMode",
										type: new sap.ui.model.type.Boolean()
									}],
									formatter: function(bHidden, bDisplayMode) {
										return !bHidden && !bDisplayMode;
									}
								});
							}
						}
					}
				} else {
					// In case of List Page we have to make dure table is available after data received.
					// Since we migrated to Date Range Control if we spycify a default filter date table is disabled.
					oSmartTable.getTable().setShowOverlay(false);
				}

				var oDeleteButton = _getDeleteButton(oSmartTable);
				if (oDeleteButton) {
					//delete button exists
					//check if entity bound to the table is "deletable".
					var oMetaModel = oSmartTable.getModel().getMetaModel();
					var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					//check delete restriction presence? default is no delete restriction
					var deletable = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"] && oEntitySet[
						"Org.OData.Capabilities.V1.DeleteRestrictions"]["Deletable"];
					if (deletable && deletable.Bool && false === deletable.Bool) {
						//delete restriction in place. We should not even display the delete button
						oDeleteButton.setVisible(false);
					} else {
						if (!oSmartTable.getBindingContext()) { // If delete from list page
							oDeleteButton.setEnabled(false);
						} else {
							var bDisplayMode = oSmartTable.getBindingContext().getProperty("DisplayMode");
							if (!bDisplayMode) {
								//if we receive data in edit mode, we can render the button visible
								oDeleteButton.setVisible(true);
								oDeleteButton.setEnabled(false);
							}
						}
						//If a selection remains on the table, make sure to adjust the enablement
						if (!Utils.isEmptyObjectOrString(oSmartTable.getTable().getSelectedItem())) {
							_setSelectedItemAndFire(oSmartTable.getTable(), oSmartTable.getTable().getSelectedItem());
						}
					}
				}
				//Does it need to select an item?
				if (oController._lastCreatedItem && oController._lastCreatedItem[sEntitySet]) {
					var sBindingPath = oController._lastCreatedItem[sEntitySet];
					var oItems = oSmartTable.getTable().getItems();
					//loop over item and select the one corresponding to the latest created one (pointed out by sBindingPath) or the item displayed within the navigation path
					var oItem;
					$.each(oItems, function(i, e) {
						var bBindingContextExists = !Utils.isEmptyObjectOrString(e.getBindingContext());
						if (bBindingContextExists && e.getBindingContext().getPath() === sBindingPath) {
							oItem = e;
							return false;
						} else if (bBindingContextExists && NavigationUtil.isBindingPathDisplayed(e.getBindingContext().getPath())) {
							oItem = e;
							return false;
						}
					});
					if (oItem) {
						_setSelectedItemAndFire(oItem.getParent(), oItem);
					}
				}
				//Handle of Swith between Percentage and Absolute Amount for Cost Assignments
				if (sEntitySet == "CostAssignments" && oSmartTable.getTable().getItems().length > 0 && oSmartTable.getTable().getItems()[0] !==
					undefined) {
					//var cFieldControlAbs = oSmartTable.getTable().getItems()[0].getBindingContext().getProperty("AbsoluteFc");
					//var cFieldControlPerc = oSmartTable.getTable().getItems()[0].getBindingContext().getProperty("PercShareFc");
					var aColumns = oSmartTable.getTable().getColumns();
					// Hide Sequential Cost Number
					aColumns[0].setVisible(false);
				}
				if (sEntitySet == "Advances") {
					// Hide Advance Sequence Number
					var aColumns = oSmartTable.getTable().getColumns();
					aColumns[0].setVisible(false);
				}
				//Enabled smarttable action bar
				if (oController.byId("listPageSmartTableID")) {
					_customToolBarActionButton(true);
					//oController.byId("listPageSmartTableID").getCustomToolbar().setEnabled(true);
				}
				_adjustButtonEnablement(oEvent);
			}

			/**
			 * Default behaviour for data received in the Comment section
			 */
			function onDataReceivedCommentsSection(oEvent) {
				var oSection = this.getView().byId(oEvent.getSource().getParent().getParent().getParent().getParent().getId());
				if (oEvent.getSource().getItems().length <= 0) {
					oSection.setVisible(false);
				} else {
					if (oSection.getBindingInfo("visible") !== undefined) {
						oSection.bindProperty("visible", {
							parts: [{
								path: oSection.getBindingInfo("visible").parts[0].path,
								type: new sap.ui.model.type.Boolean()
							}],
							formatter: function(bHidden) {
								return !bHidden;
							}
						});
					} else {
						// In case UI.Hidden property is not defined and at least one comment is retrieved display the section.
						oSection.setVisible(true);
					}
				}
			}

			/**
			 * Calculates the name of an OData entity set from the given binding context.
			 *
			 * @param {sap.ui.model.Context} oContext The given binding context
			 * @returns {string} The name of the entity set, can be <code>null</code>
			 * @throws {Error} If no context is handed over as input parameter
			 * @public
			 */
			function _getEntitySetFromContext(oContext) {
				var sPath, sEntitySet;

				if (!oContext) {
					throw new Error("No context");
				}

				if (oContext && oContext.getPath) {
					sPath = oContext.getPath().split("(")[0];
					sEntitySet = sPath.substring(1);
				}

				if (sEntitySet == null) {
					return null;
				} else {
					return oContext.getModel().getMetaModel().getODataEntitySet(sEntitySet) && oContext.getModel().getMetaModel().getODataEntitySet(
						sEntitySet).name;
				}
			}

			/*
			 * helper to get custom toolbar either from ListPage (only toolbar for actions) either from DetailPage (complete toolbar of the smart table)
			 */
			function _getCustomToolBar(oSmartTable) {
				var oCustomToolbar = oController.byId("listPageSmartTableID") ? oController.getView().byId("customToolBarActionButtonId") :
					oSmartTable.getCustomToolbar();
				return oCustomToolbar;
			}

			/**
			 * Helper to retrieve the delete button from a smart table
			 */
			function _getDeleteButton(oSmartTable) {
				var oCustomToolbar = _getCustomToolBar(oSmartTable);
				var oDeleteButton;
				$.each(oCustomToolbar.getContent(), function(key, value) {
					if (-1 !== value.getId().indexOf(TravelUtil.DefaultButtons.DeleteListPage) ||
						-1 !== value.getId().indexOf(TravelUtil.DefaultButtons.DeleteDetailPage) ||
						-1 !== value.getId().indexOf("deleteEntry")) {
						oDeleteButton = value;
						return false;
					}
				});
				return oDeleteButton;

			}

			/**
			 * Private method which adjust delete button enablment status. The enablement status depends on the selected item's value.
			 * The entity's value controlling the enablement status is set in the entity's annotation DeleteRestriction on a deletable Path.
			 *
			 * @parameter oSmartTable: a smart table object holding the delete button
			 * @parameter oDeleteButton: the delete button hold by the smart table
			 *
			 */
			function _adjustDeleteButtonEnablement(oEvent) {
				var bEnablement = false;
				var oSmartTable = ControlUtil.getSmartTable(oEvent.getSource());
				var oDeleteButton = _getDeleteButton(oSmartTable);
				if (oDeleteButton && oDeleteButton.getVisible && oDeleteButton.getVisible()) {
					//delete button exists and is active
					var oSelectedItem = oSmartTable.getTable().getSelectedItem();
					if (!Utils.isEmptyObjectOrString(oSelectedItem)) {
						var sEntitySet = oSmartTable.getEntitySet();
						var oMetaModel = oSmartTable.getModel().getMetaModel();
						var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
						//check if selected item is actually "deletable" by verifying deletable-path's property if any. Default behavior if no deletable-path is there is to enable the "Delete" button
						var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
						var deletable = oEntityType["Org.OData.Capabilities.V1.DeleteRestrictions"] && oEntityType[
							"Org.OData.Capabilities.V1.DeleteRestrictions"]["Deletable"];
						var bEnablement = true; //default if no property or undefined value
						if (deletable && deletable.Path) {
							var sDeleteProperty = deletable.Path;
							var isDeletable = oSelectedItem && oSelectedItem.getBindingContext().getProperty(sDeleteProperty);
							//delete restriction in place for the item, we shuold not enable it.
							//no delete restriction in place for the item, We should enable the button
							if (false === isDeletable) {
								bEnablement = false;
							}
						}
					}

				}
				if (oDeleteButton) {
					oDeleteButton.setEnabled(bEnablement);
				}
			}

			/**
			 * Default behaviour for selection change event on a table.
			 * The default behavior is to verify if selected item can be deleted to adjust "Delete" button enablement
			 */
			function onDetailPageSelectionChange(oEvent) {
				_adjustButtonEnablement(oEvent);
			}

			function _adjustAddButtonEnablement() {
				//if there is a selected profile, we do allow creation
				var oButton = oController.getView().byId("listPageView--" + TravelUtil.DefaultButtons.AddListPage) || oController.getView().byId(
					"listPageView--" + TravelUtil.DefaultButtons.AddExtendedListPage); //listPageView is a stable id, but can be overrided.
				if (oButton) {
					oButton.setEnabled(true);
				}
			}

			function _adjustButtonEnablement(oEvent) {
				_adjustAddButtonEnablement();
				_adjustCustomButtonEnablement(oEvent);
				_adjustActionButtonEnablement(oEvent);
				_adjustDeleteButtonEnablement(oEvent);
				_adjustPDFButtonEnablement(oEvent);
				_adjustCopyButtonEnablement(oEvent);
			}

			function _adjustCustomButtonEnablement(oEvent) {
				var oSmartTable = ControlUtil.getSmartTable(oEvent.getSource());
				var sTableEntitySet = oSmartTable.getEntitySet();
				var sMainEntitySet = oController.getOwnerComponent().sEntitySet;
				var mButtonsId = new Set();
				//If the below manifest search is too power-consuming, we might cache the mButtonsId set result.
				//lookup for struct containing EntitySet == sMainEntitySet. Using getOwnProeprtyNames instead of Object.entries/values/keys :S
				//also, for es5 compatibility reason, we are not using for (var e of Iterable) :S
				var oEntitySetControllerExtensions = _getManifestControllerExtensions();
				oEntitySetControllerExtensions = oEntitySetControllerExtensions || [];
				Object.getOwnPropertyNames(oEntitySetControllerExtensions).forEach(function(e, index, array) {
					if (oEntitySetControllerExtensions[e].EntitySet === sMainEntitySet) {
						// Look at Object Page Sections
						var oActions;
						var oSections = oEntitySetControllerExtensions[e].Sections || {};
						Object.getOwnPropertyNames(oSections).forEach(function(e, index, array) {
							//lookup for struct containing Id == sTableEntitySet
							if (oSections[e].Id === sTableEntitySet) {
								//lookup for all Action ids and enable the corresponding button
								oActions = oSections[e].Actions;
								Object.getOwnPropertyNames(oActions).forEach(function(e, index, array) {
									var oAction = oActions[e];
									if (oAction.requiresSelection === true) {
										//selection has occured, we can enable the corresponding button
										mButtonsId.add(oAction.id);
									}
								});
								return false;
							}
						});
						// Look at List Page Actions
						oActions = oEntitySetControllerExtensions[e].Actions || {};
						Object.getOwnPropertyNames(oActions).forEach(function(e, index, array) {
							//lookup for struct containing Id == sTableEntitySet
							if (!oActions[e].global || oActions[e].global === false) {
								//selection has occured, we can enable the corresponding button
								mButtonsId.add(oActions[e].id);
							}
							return false;
						});
						return false;
					}
				});

				//iterate over toolbar buttons. If we detect the button, we can enable it

				var oCustomToolbar = _getCustomToolBar(oSmartTable);
				$.each(oCustomToolbar.getContent(), function(key, value) {
					mButtonsId.forEach(function(v1, v2, s) {
						if (value.getId().indexOf(v1) != -1) {
							value.setEnabled(true);
						}
					});
				});
			}

			function _adjustPDFButtonEnablement(oEvent) {
				var oSmartTable = ControlUtil.getSmartTable(oEvent.getSource()),
					oBindingContext;
				if (oSmartTable.getTable().getSelectedItem()) {
					oBindingContext = oSmartTable.getTable().getSelectedItem().getBindingContext();
				}

				var oCustomToolbar = _getCustomToolBar(oSmartTable);
				$.each(oCustomToolbar.getContent(), function(key, value) {
					if (value.getId().indexOf(TravelUtil.DefaultButtons.ExportListPage) != -1) {
						if (oBindingContext == undefined) {
							value.setEnabled(false);
						} else {
							var sApplicablePath = CustomDataUtil.getCustomData(value, "ApplicablePath");
							var sActionFor = CustomDataUtil.getCustomData(value, "ActionFor");
							value.setEnabled(Utils.isEmptyObjectOrString(oBindingContext) ? Utils.isEmptyObjectOrString(sActionFor) : (Utils.isEmptyObjectOrString(
								oBindingContext) ? true : oBindingContext[sApplicablePath]));
						}
					}
				});
			}

			function _adjustCopyButtonEnablement(oEvent) {
				var oSmartTable = ControlUtil.getSmartTable(oEvent.getSource()),
					oBindingContext;
				if (oSmartTable.getTable().getSelectedItem()) {
					oBindingContext = oSmartTable.getTable().getSelectedItem().getBindingContext();
				}
				var oCustomToolbar = _getCustomToolBar(oSmartTable);
				$.each(oCustomToolbar.getContent(), function(key, value) {
					if (value.getId().indexOf(TravelUtil.DefaultButtons.CopyListPage) != -1) {
						if (oBindingContext == undefined) {
							value.setEnabled(false);
						} else if (oBindingContext.getObject()) {
							var sApplicablePath = CustomDataUtil.getCustomData(value, "ApplicablePath");
							var sActionFor = CustomDataUtil.getCustomData(value, "ActionFor");
							var object = oBindingContext.getObject();
							value.setEnabled(Utils.isEmptyObjectOrString(object) ? Utils.isEmptyObjectOrString(sActionFor) : (Utils.isEmptyObjectOrString(
								object) ? true : object[sApplicablePath]));
						}
					}
				});
			}

			function _adjustActionButtonEnablement(oEvent) {
				var oSmartTable = ControlUtil.getSmartTable(oEvent.getSource()),
					oBindingContext;
				if (oSmartTable.getTable().getSelectedItem()) {
					oBindingContext = oSmartTable.getTable().getSelectedItem().getBindingContext();
				}
				var oCustomToolbar = _getCustomToolBar(oSmartTable);
				var sDataFieldForActionToolbarId = "DataFieldForActionButton";
				$.each(oCustomToolbar.getContent(), function(key, value) {
					if (value.getId().indexOf(sDataFieldForActionToolbarId) != -1) {
						var sApplicablePath = CustomDataUtil.getCustomData(value, "ApplicablePath");
						var sActionFor = CustomDataUtil.getCustomData(value, "ActionFor");
						var oObject = oBindingContext ? oBindingContext.getObject() : oBindingContext;
						value.setEnabled(Utils.isEmptyObjectOrString(oObject) ? Utils.isEmptyObjectOrString(sActionFor) : (Utils.isEmptyObjectOrString(
							oObject) ? true : oObject[sApplicablePath]));
					}
				});
			}

			function handleExportAction(oEvent) {
				var oModel = oController.getView().getModel();

				var sTripPath = _getBindingPathFromButton(oEvent);
				var oTrip = oModel.getObject(sTripPath);
				var sPernr = oTrip.Pernr;
				var sTripno = oTrip.Tripno;

				if (!oController._oPdfViewer) {
					oController._oPdfViewer = new PDFViewer();
					oController.getView().addDependent(oController._oPdfViewer);

					oController._oPdfViewer.attachError(function() {
						MessageBox.show(I18n.get().getText(oController, "PDF_ERROR"), {
							icon: MessageBox.Icon.ERROR,
							title: I18n.get().getText(oController, "ST_ERROR")
						});
					});
				}

				var sTripComponent = 'R';
				if (oTrip && oTrip.__metadata && -1 !== oTrip.__metadata.type.indexOf("TravelExpense")) {
					sTripComponent = 'E';
				}
				var sSource = oModel.sServiceUrl + "/PrintPreviews(Pernr='" + sPernr + "',Tripno='" + sTripno + "',TripComponent='" + sTripComponent +
					"')/$value";

				oController._oPdfViewer.setSource(sSource);
				oController._oPdfViewer.setTitle(sTripno + (oTrip.Customer ? " - " + oTrip.Customer : ""));
				oController._oPdfViewer.setShowDownloadButton(false);
				oController._oPdfViewer.open();
			}

			/**
			 * Retrieves binding path, either from a list or from an object page entity
			 *
			 * @return sBindingPath
			 */
			function _getBindingPathFromButton(oEvent) {
				var sBindingPath;
				if (oController.getView().getBindingContext()) {
					// View is bound to an entity. It corresponds to an ObjectPage context
					sBindingPath = oController.getView().getBindingContext().getPath();
				} else {
					// Otherwise, binding should be retrieved from the selected element in a list.
					var oSmartTable = ControlUtil.getSmartTable(oEvent.getSource());
					sBindingPath = oSmartTable && oSmartTable.getTable().getSelectedContextPaths()[0];
				}
				return sBindingPath;
			}

			/**
			 * Retrieves binding context, either from a list or from an object page entity
			 *
			 * @return sBindingPath
			 */
			function _getBindingContextFromButton(oEvent) {
				var sBindingContext;
				if (oController.getView().getBindingContext()) {
					// View is bound to an entity. It corresponds to an ObjectPage context
					sBindingContext = oController.getView().getBindingContext();
				} else {
					// Otherwise, binding should be retrieved from the selected element in a list.
					var oSmartTable = ControlUtil.getSmartTable(oEvent.getSource());
					if (oSmartTable.getTable().getSelectedItem()) {
						sBindingContext = oSmartTable && oSmartTable.getTable().getSelectedItem().getBindingContext();
					}
				}
				return sBindingContext;
			}

			function handleCopyAction(oEvent) {
				var that = this;
				// Retrieve the targetted trip to copy.
				var sourceControl = oEvent.getSource();
				var oList = ControlUtil.getSmartTable(sourceControl);
				var bDeleteObject = Utils.isEmptyObjectOrString(oList);
				var sEntityPath;
				if (bDeleteObject) {
					sEntityPath = this.getView().getBindingContext().getPath();
				} else {
					sEntityPath = oList.getTable().getSelectedContextPaths()[0];
				}

				if (Utils.isEmptyObjectOrString(sEntityPath)) {
					return;
				}
				var oTripObject = oEvent.getSource().getModel().getObject(sEntityPath);

				var sTripno = oTripObject.Tripno;
				var sPernr = oTripObject.Pernr;

				// Check if a trip is in draft mode
				var oDraftItem = ODataModelUtil.get().getDraftItem(oList);
				var sDraftTripno = oDraftItem && oDraftItem.getProperty("Tripno");

				var jsonData = {
					date: undefined,
					reason: "",
					pernr: sPernr,
					tripno: sTripno,
					stripMessage: sDraftTripno && sDraftTripno !== oTripObject.Tripno ? (TravelUtil.TripNumber.Initial === sDraftTripno ? I18n.get().getText(
						"DRAFT_WARNING_UNKNOWN", sDraftTripno) : I18n.get().getText("DRAFT_WARNING", sDraftTripno)) : "",
					stripType: sDraftTripno && sDraftTripno !== oTripObject.Tripno ? MessageType.Warning : MessageType.None
				};

				oController.sCopyFramgmentId = "CopyFragmentId";
				FragmentHelper.get().loadFragment({
					id: oController.sCopyFramgmentId,
					name: "sap.fin.travel.lib.reuse.view.fragments.Copy",
					controller: oController,
					models: {
						i18n: oController.getView().getModel("i18n"),
						copyDialogModel: new sap.ui.model.json.JSONModel()
					}
				}).then(function(copyFragment) {
					if (copyFragment) {
						that.oCopyFragment = copyFragment;
						that.oCopyFragment.getModel("copyDialogModel").setData(jsonData);

						that.oCopyFragment.open();
					}
				});
			}

			function handleCloseCopy(oEvent) {
				if (this.oCopyFragment) {
					this.oCopyFragment.close();
				}
			}

			function handleCopy(oEvent) {
				var oEventSource = oEvent.getSource();
				var that = this;
				var oModel = oController.getView().getModel();
				var oCopyDialogModel = this.oCopyFragment.getModel("copyDialogModel");
				var mParameters = {
					Date: oCopyDialogModel.getProperty("/date"),
					Customer: oCopyDialogModel.getProperty("/reason"),
					Pernr: oCopyDialogModel.getProperty("/pernr"),
					Tripno: oCopyDialogModel.getProperty("/tripno")
				};

				if (!mParameters.Date || !mParameters.Customer) {
					oCopyDialogModel.setProperty("/stripMessage", I18n.get().getText(oController, "COPY_MISSING_FIELD_ALERT"));
					oCopyDialogModel.setProperty("/stripType", MessageType.Error);
					return;
				}

				var fnError = function(oError) {
					if (MessageUtil.get().handleMessageResponse(oError)) {
						var error = MessageUtil.get().getErrorMessageResponse(oError);
						oCopyDialogModel.setProperty("/stripMessage", error.hasOwnProperty("message") ? error.message : error);
						var sErrorType = error.hasOwnProperty("type") ? MessageParser.ErrorType.toMessageType(error.type) : MessageType.Error;
						oCopyDialogModel.setProperty("/stripType", sErrorType);
					} else {
						oCopyDialogModel.setProperty("/stripMessage", MessageUtil.get().getErrorMessage(oError));
						oCopyDialogModel.setProperty("/stripType", MessageType.Error);
					}
				};

				var fnSuccessDuplicate = function(oData, response) {
					that.oCopyFragment.close();
					var sEntityPath = response.headers && response.headers.location && response.headers.location.split("/").slice(-1).pop();
					NavigationUtil.navigate(sEntityPath, oController.getView().getModel("view").getProperty("/level"));
				};

				var fnSuccessSubmit = function(oData, response) {
					PersistenceHelper.callFunction(oModel, {
						name: "/DuplicateTrip",
						source: oEventSource,
						success: fnSuccessDuplicate,
						error: fnError,
						functionalError: fnSuccessDuplicate,
						urlParameters: {
							Pernr: mParameters.Pernr,
							Tripno: mParameters.Tripno,
							Date: mParameters.Date,
							Customer: mParameters.Customer
						}
					});
				};

				PersistenceHelper.submitChanges(oModel, {
					source: oEventSource,
					success: fnSuccessSubmit,
					error: fnError,
					submitChangeOrigin: PersistenceHelper.SUBMIT_CHANGE_ORIGIN.ACTION,
				});
			}

			function onBreadCrumbUrlPressed(oEvent) {
				oEvent.preventDefault();

				var oPressedLink = oEvent.getSource(); //link

				var sHash = HashChanger.getInstance().getHash();
				//hash is the target hash. For the breadcrumb, we need all but the last one
				var aSections = sHash.split("/");
				aSections.pop(); //breadcrumb works on upper parts, not the current context ;)
				var oBreadcrumbs = oController._getBreadcrumbs();
				var iLevel = 1;
				oBreadcrumbs.getLinks().reverse().forEach(function(oLink, index, array) {
					if (oLink !== oPressedLink) {
						iLevel += 1;
						aSections.pop();
						return true;
					}
					//processed link if the clicked one, we shall navigate to it
					var sPath = aSections.join("/");
					NavigationUtil.navigate(sPath, oController.getView().getModel("view").getProperty("/level") - iLevel, true);
				});

				//				window.location.hash = sHref; //also updates the browser history
			}

			function _setSelectedItemAndFire(oTable, oItem) {
				oItem.setSelected(true);
				oTable.fireSelectionChange({
					listItem: oItem,
					selected: true
				});
			}

			function handleSelectionChange(oEvent) {
				var sNewSelectedTripPath = oEvent.getSource().getSelectedContextPaths()[0];
				var oSelectedTrip = new Context(oController.getView().getModel(), sNewSelectedTripPath);
				var bSelectedTripDeletable = oSelectedTrip.getProperty("Deletable");
				var iPersistenceStatus = oSelectedTrip.getProperty("Persistencestatus");

				// Manage list buttons
				oController.byId(TravelUtil.DefaultButtons.DeleteListPage).setEnabled(bSelectedTripDeletable);
				oController.byId(TravelUtil.DefaultButtons.CopyListPage).setEnabled(iPersistenceStatus === TravelUtil.PersistenceStatus.Save);
				oController.byId(TravelUtil.DefaultButtons.ExportListPage).setEnabled(true);
				_adjustButtonEnablement(oEvent);
			}

			/**
			 * Custom toolbar could not be completely disabled as it contains both personalization/settings buttons and action buttons
			 * We want to control action buttons only.
			 * 
			 * @parameter{boolean} bEnabled: controls whether we activate or deactivate the custom bar action buttons. By default we activate in default state
			 */
			function _customToolBarActionButton(bEnabled) {
				bEnabled = undefined === bEnabled ? true : bEnabled;
				var fnById = oController.getView().byId.bind(oController);
				if (!oController.actionButtonEnablement) {
					oController.actionButtonEnablement = new Map();
				}

				var actionButtonLayouts = $("[class~=customToolBarActionButton]").toArray();

				//there should be only one
				actionButtonLayouts.forEach(function(e) {
					var el = fnById(e.id);

					el.getAggregation("content").forEach(function(e) {
						if (e instanceof sap.m.Button) {
							if (bEnabled) {
								e.setEnabled(oController.actionButtonEnablement.get(e.getId()));
							} else if (!oController.actionButtonEnablement.has(e.getId())) {
								oController.actionButtonEnablement.set(e.getId(), e.getEnabled());
								e.setEnabled(false);
							}
						}
					});

					if (bEnabled) {
						oController.actionButtonEnablement.clear();
					}

				});

			}

			function onAssignedFiltersChanged(oEvent) {
				if (oEvent.getSource()) {
					oController.byId("template::FilterText").setText(oEvent.getSource().retrieveFiltersWithValuesAsText());
					// Disable SmartTable toolbar
					if (oController.byId("listPageSmartTableID")) {
						_customToolBarActionButton(false);
						//oController.byId("listPageSmartTableID").getCustomToolbar().setEnabled(false);
					}
				}
			}

			function onShowMessages() {
				MessageUtil.get().toggleMessagesPopover();
			}

			function handleApplyAction(oEvent) {
				checkAppForms(oEvent, undefined, function() {
					var fnSuccess = function() {
						oController._fclHandler.handleClose();
					};
					var fnfunctionalError = function() {
						MessageUtil.get().openMessagesPopover();
					};
					PersistenceHelper.apply(oController.getView().getModel(), {
						success: fnSuccess,
						functionalError: fnfunctionalError
					});
				});
			}

			function onContactDetails(oEvent) {
				var oButton = oEvent.getSource();
				var sFragmentId = oController.getView().getId() + "ContactDetailsPopoverFragment";
				FragmentHelper.get().loadFragment({
					id: sFragmentId,
					name: "sap.fin.travel.lib.reuse.DetailPage.view.fragments.ContactDetails",
					controller: oController,
					models: {
						i18n: oController.getView().getModel("i18n")
					}
				}).then(function(oContactDialog) {
					if (oContactDialog) {
						oContactDialog.setModel(oController.getView().getModel());
						var sContactId = oButton.getBindingContext().getProperty("Approverid") ? oButton.getBindingContext().getProperty("Approverid") :
							oButton.getBindingContext().getProperty("Authorid");
						oContactDialog.bindElement("/Contacts('" + sContactId + "')");
						oContactDialog.openBy(oButton);
					}
				});
			}

			function handleOnSort() {
				var oSmartTable = oController.getView().byId("listPageSmartTableID");
				if (oSmartTable) {
					oSmartTable.openPersonalisationDialog("Sort");
				}
			}

			function handleOnGroup() {
				var oSmartTable = oController.getView().byId("listPageSmartTableID");
				if (oSmartTable) {
					oSmartTable.openPersonalisationDialog("Group");
				}
			}

			function handleOnColumns() {
				var oSmartTable = oController.getView().byId("listPageSmartTableID");
				if (oSmartTable) {
					oSmartTable.openPersonalisationDialog("Columns");
				}
			}

			function handleDataFieldForAction(oEvent) {
				var oSource = oEvent.getSource();
				checkAppForms(oEvent, false, function() {
					var oList = ControlUtil.getSmartTable(oSource);
					var oDraftItem = ODataModelUtil.get().getDraftItem(oList);
					var sDraftTripno = oDraftItem && oDraftItem.getProperty("Tripno");
					ActionUtil.callAction(oSource, oController, sDraftTripno);
				});
			}

			function handleInlineDataFieldForAction(oEvent) {
				var oSource = oEvent.getSource();
				checkAppForms(oEvent, true, function() {
					ActionUtil.callInLineAction(oSource, oController);
				});
			}

			function handleShowPrevObject(oEvent) {
				var sTripPath = oEvent.getSource().getBindingContext().getPath();
				var aBindingPaths = NavigationUtil.bindingPaths(HashChanger.getInstance().getHash()).paths;
				aBindingPaths.pop();

				var mParameters = {
					parentPath: aBindingPaths.join(''),
					navObjectPath: PaginatorHelper.get().getPrevEntry(oController.getView().getModel("view").getProperty("/level"), sTripPath)
				};
				var oPaginatorEvent = new Event(oController.createId("travel::paginator::event"), oEvent.getSource(), mParameters);
				handleCancelAction(oPaginatorEvent);
			}

			function handleShowNextObject(oEvent) {
				var sTripPath = oEvent.getSource().getBindingContext().getPath();
				var aBindingPaths = NavigationUtil.bindingPaths(HashChanger.getInstance().getHash()).paths;
				aBindingPaths.pop();

				var mParameters = {
					parentPath: aBindingPaths.join(''),
					navObjectPath: PaginatorHelper.get().getNextEntry(oController.getView().getModel("view").getProperty("/level"), sTripPath)
				};
				var oPaginatorEvent = new Event(oController.createId("travel::paginator::event"), oEvent.getSource(), mParameters);
				handleCancelAction(oPaginatorEvent);
			}

			function onShareActionButtonPress(oEvent) {
				var oButton = oEvent.getSource();
				var sFragmentId = oController.getView().getId() + "SharePopoverFragment";
				FragmentHelper.get().loadFragment({
					id: sFragmentId,
					name: "sap.fin.travel.lib.reuse.view.fragments.Share",
					controller: oController,
					models: {
						i18n: oController.getView().getModel("i18n")
					}
				}).then(function(oShareDialog) {
					if (oShareDialog) {
						oShareDialog.setModel(new JSONModel(), "share");
						oShareDialog.setModel(oController.getView().getModel());

						$("[id*=travelDetailObjectPageHeader]").each(function(i, j) {
							var oObjectPageHeader = oController.getView().byId(j.id);
							if (oObjectPageHeader) {
								if (oObjectPageHeader.getMetadata().getName() === "sap.uxap.ObjectPageHeader") {
									AppComponent.get().updateGlobalModel("/share/title", oObjectPageHeader.getObjectTitle());
									AppComponent.get().updateGlobalModel(
										"/share/subTitle", oObjectPageHeader.getObjectSubtitle());
								}
								if (oObjectPageHeader.getMetadata()
									.getName() === "sap.uxap.ObjectPageDynamicHeaderTitle") {
									AppComponent.get().updateGlobalModel("/share/title", oObjectPageHeader.getExpandedHeading().getText());
									AppComponent.get().updateGlobalModel(
										"/share/subTitle", oObjectPageHeader.getExpandedContent()[0].getText());
								}
								AppComponent.get().updateGlobalModel("/share/customUrl", document.URL);
							}
						});
						var oShareModel = oShareDialog.getModel("share");
						var oNewData = jQuery.extend(oShareModel.getData(), AppComponent.get().getGlobalModel().getProperty("/share"));
						oShareModel.setData(
							oNewData);
						oShareDialog.openBy(oButton);
					}
				});
			}

			function onBeforeRebindDetailTable(oEvent) {
				var oBindingParams = oEvent.getParameter("bindingParams");
				oBindingParams.parameters = oBindingParams.parameters || {};
			}

			function onIconTabBarSelect(oEvent) {

				var oSource = oEvent.getSource();
				var oCustomData = CustomDataUtil.getCustomData(oEvent.getSource(), "entitySet");
				var bCostAssignments = oCustomData && -1 !== oCustomData.indexOf("CostAssignments");
				var sSelectedKey = oEvent.getParameter("selectedKey");
				if (bCostAssignments) {
					var sCostAssignmentDestinationValue = sSelectedKey === "Percentage" ? "P" : "B";

					var sCostAssignementSourceValue = oSource.getBindingContext().getProperty("PercAbs");
					if (sCostAssignementSourceValue === sCostAssignmentDestinationValue) {
						return; //same selection, we do not trigger the percentage switch
					}

					var fnSuccess = function() {
						//refresh receipt and rebind tables
						oSource.getAggregation("items").forEach(function(item) {
							var aContent = item.getContent();
							if (aContent && aContent.length > 0 && aContent[0] && aContent[0].rebindTable) {
								aContent[0].rebindTable();
							}
						});

						PersistenceHelper.read(oSource.getModel(), oSource.getBindingContext().getPath());
					};

					var fnError = function(oData, oResponse) {
						//display message strip error and revert back to initial selected key (the other one)

						var sError, sErrorType;
						if (MessageUtil.get().handleMessageResponse(oResponse)) {
							var error = MessageUtil.get().getErrorMessageResponse(oResponse);
							sError = error.hasOwnProperty("message") ? error.message : error;
							sErrorType = error.hasOwnProperty("type") ? MessageParser.ErrorType.toMessageType(error.type) : MessageType.Error;
						} else {
							sError = MessageUtil.get().getErrorMessage(oResponse);
							sErrorType = MessageType.Error;
						}

						var fnMessageBox;
						switch (sErrorType) {
							case MessageType.Warning:
								MessageBox.warning(sError);
								break;
							case MessageType.Error:
								MessageBox.error(sError);
								break;
							default:
								MessageBox.alert(sError);
						}

						oSource.setSelectedKey(sCostAssignementSourceValue === "B" ? "Absolute" : "Percentage");
					};
					//Icontab bar for select between absolute and percentage for cost assignments
					PersistenceHelper.callFunction(oSource.getModel(), {
						name: "/SwitchPercAbsForReceipt",
						success: fnSuccess,
						error: fnError,
						functionalError: fnError,
						urlParameters: {
							Pernr: oSource.getBindingContext().getProperty("Pernr"),
							Receiptno: oSource.getBindingContext().getProperty("Receiptno"),
							Tripno: oSource.getBindingContext().getProperty("Tripno")
						}
					});
				}
			}

			return {
				handleEditAction: handleEditAction,
				handleCancelAction: handleCancelAction,
				handleCreateActionList: handleCreateActionList,
				handleCreateCustomAction: handleCreateCustomAction,
				handleSearcheableActionItemConfirm: handleSearcheableActionItemConfirm,
				handleSearcheableActionItemCancel: handleSearcheableActionItemCancel,
				handleCreateActionSearcheableList: handleCreateActionSearcheableList,
				handleSearcheableActionItemSearch: handleSearcheableActionItemSearch,
				handleInlineDataFieldForAction: handleInlineDataFieldForAction,
				handleDataFieldForAction: handleDataFieldForAction,
				handleSaveAction: handleSaveAction,
				handleSubmitAction: handleSubmitAction,
				handleCreateAction: handleCreateAction,
				handleDeleteAction: handleDeleteAction,
				handleExportAction: handleExportAction,
				handleCopyAction: handleCopyAction,
				handleCloseCopy: handleCloseCopy,
				handleCopy: handleCopy,
				handleApplyAction: handleApplyAction,
				handleOnSort: handleOnSort,
				handleOnGroup: handleOnGroup,
				handleOnColumns: handleOnColumns,
				handleListPageItemPress: handleListPageItemPress,
				handleItemPress: handleItemPress,
				closeDraftAdminPopover: closeDraftAdminPopover,
				closeDiscardPopover: closeDiscardPopover,
				handleOnDraftLinkPressed: handleOnDraftLinkPressed,
				handleSelectionChange: handleSelectionChange,
				onAssignedFiltersChanged: onAssignedFiltersChanged,
				initListPageFilterBar: initListPageFilterBar,
				onFilterBarDataReceived: onFilterBarDataReceived,
				handleFilterBarSearchPressed: handleFilterBarSearchPressed,
				onShowMessages: onShowMessages,
				onSelectionChange: onDetailPageSelectionChange,
				onIconTabBarSelect: onIconTabBarSelect,
				onDataReceived: onDataReceivedDetailTable,
				onContactDetails: onContactDetails,
				onBreadCrumbUrlPressed: onBreadCrumbUrlPressed,
				handleShowPrevObject: handleShowPrevObject,
				handleShowNextObject: handleShowNextObject,
				onShareActionButtonPress: onShareActionButtonPress,
				onDataReceivedCommentsSection: onDataReceivedCommentsSection,
				handleSaveAsDraftAction: handleSaveAsDraftAction,
				onBeforeRebindDetailTable: onBeforeRebindDetailTable,
				checkAppForms: checkAppForms
			};
		}

		return BaseObject.extend("sap.fin.travel.lib.reuse.util.EventHandler", {
			constructor: function(oController) {
				jQuery.extend(this, getMethods(oController));
			}
		});

	});

}; // end of sap/fin/travel/lib/reuse/util/EventHandler.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.util.BaseComponentHandler')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.registerModulePath('CryptoJS', jQuery.sap.getModulePath("sap/fin/travel/lib/reuse") + '/thirdparty/CryptoJS/sha1');

	jQuery.sap.declare('sap.fin.travel.lib.reuse.util.BaseComponentHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
	jQuery.sap.require('CryptoJS'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/util/BaseComponentHandler", [
		"sap/ui/base/Object",
		"sap/ui/core/mvc/ViewType",
		"sap/fin/travel/lib/reuse/util/FCLayoutHandler",
		"sap/fin/travel/lib/reuse/util/EventHandler",
		"sap/fin/travel/lib/reuse/util/FormatHandler",
		"sap/fin/travel/lib/reuse/util/AnnotationHelper",
		"sap/fin/travel/lib/reuse/util/ConfigurationUtil",
		"sap/fin/travel/lib/reuse/util/Utils",
		"sap/fin/travel/lib/reuse/util/TravelUtil",
		"sap/fin/travel/lib/reuse/util/AppComponent",
		"sap/fin/travel/lib/reuse/util/StableIdDefinition",
		"sap/fin/travel/lib/reuse/util/StableIdHelper",
		"sap/fin/travel/lib/reuse/util/AppDescriptorUtil",
		"CryptoJS"
	], function(BaseObject, ViewType, FCLayoutHandler, EventHandler, FormatHandler, AnnotationHelper, ConfigurationUtil, Utils, TravelUtil,
		AppComponent, StableIdDefinition, StableIdHelper, AppDescriptorUtil, CryptoJS) {
		"use strict";

		function getBreadCrumbInfo(aBreadCrumb) {
			if (Utils.isEmptyObjectOrString(aBreadCrumb)) {
				return undefined;
			}
			var aSections = aBreadCrumb;
			// remove the last one - this is the current shown section
			aSections.pop();
			var sPath = "";
			var delimiter = "";
			var aRet = [];
			for (var i = 0; i < aSections.length; i++) {
				sPath = sPath + delimiter + aSections[i];
				aRet.push(sPath);
				delimiter = "/";
			}
			return aRet;
		}

		/**
		 * Cache key is fundamental to ensure that views are properly regenerated when context change.
		 * Context can be: application (standard MTE or MTR, but other apps depending on customer enhancements), reuse version, and more specifically metadata version (views are generated given metadata mostly). 
		 * 
		 * The algorithm to detect metadata change is currently a simple sha1sum on service metadata json. This is not the best (there are several versions of json for a same service metadata for no reason. For example with or without namespace info), but this already provide perf enhancement (factor 3) for matched cache entries.
		 */
		function computeCacheKey(oComponent, oAppComponent) {
			var sServiceMetadataHash = CryptoJS.SHA1(JSON.stringify(oComponent.getModel().getServiceMetadata())).toString();
			var sAppId = oAppComponent.getId();
			var sAppCompVersion = oAppComponent.getManifestEntry("sap.app").applicationVersion.version;
			var sLibraryVersion = sap.ui.getCore().getLoadedLibraries()["sap.fin.travel.lib.reuse"];
			sLibraryVersion = sLibraryVersion && sLibraryVersion.version;
			var sCacheKey = sLibraryVersion + "-" + sAppId + "-" + sAppCompVersion + "-" + sServiceMetadataHash;
			return sCacheKey;
		}

		function getCacheKey() {
			return sApplicationCacheKey;
		}

		var BaseComponentHandler = BaseObject.extend("sap.fin.travel.lib.reuse.util.BaseComponentHandler");
		//var sEntitySet = "TravelRequests";

		/**
		 * Destroy should be called when leaving out an application to ensure that application cache key is properly refreshed afterwards
		 */
		BaseComponentHandler.destroy = function() {
			sApplicationCacheKey = undefined;
		};

		var sApplicationCacheKey = undefined;

		BaseComponentHandler.createComponentContent = function(oComponent, oSettings) {

			if (undefined === sApplicationCacheKey) {
				//the hash is used to properly handle view cache keys. We need to load it once.
				sApplicationCacheKey = computeCacheKey(oComponent, oComponent.getComponentData().oAppComponent);
			}

			var oMetaModel = oComponent.getModel().getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var sEntityType = oEntitySet && oEntitySet.entityType;
			var sStableId = oSettings && oSettings.view && oSettings.view.id;
			if (!sEntityType) {
				return null;
			}
			var oEntitySetContext = oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oSettings.entitySet, true));
			var oEntityTypeContext = oMetaModel.createBindingContext(oMetaModel.getODataEntityType(sEntityType, true));
			oComponent.setModel(new sap.ui.model.json.JSONModel(oSettings.view), "view");

			if (!oComponent.getAppComponent && oComponent.getComponentData().oAppComponent) {
				oComponent.getAppComponent = function() {
					return oComponent.getComponentData().oAppComponent;
				};
			}

			//The promise generates the view in a component's context then render the view.
			oComponent.promiseViewProcessed = new Promise(function(resolve, reject) {
				oComponent.runAsOwner(function() {
					var oController = BaseComponentHandler.createBaseController(oSettings.controller.name);
					var oPreprocessors = {
						xml: {
							bindingContexts: {
								entitySet: oEntitySetContext,
								entityType: oEntityTypeContext
							},
							models: {
								entitySet: oMetaModel,
								entityType: oMetaModel,
								parameter: BaseComponentHandler.createParameterModel(oComponent, sEntityType, oMetaModel, oSettings.entitySet)
							}
						}
					};

					//caching key - if reuse version of application version changes, we can invalidate existing views

					var sCacheKey = getCacheKey();
					oController.oPreprocessors = oPreprocessors;
					var oViewSettings = {
						async: true,
						preprocessors: oPreprocessors,
						id: sStableId,
						type: ViewType.XML,
						viewName: oSettings.view.name,
						height: "100%",
						controller: oController,
						cache: {
							keys: [sCacheKey]
						}
					};

					//extension
					oController.extension = oSettings.extension;

					var oView = sap.ui.view(oViewSettings);
					oComponent.oViewContainer.addContent(oView);
					oView.attachAfterInit(function() {
						resolve(oController);
					});

				});
			});

		};

		BaseComponentHandler.createBaseController = function(sControllerName) {
			//Extension: to make sure that a controller is in the SAP UI5's registry, one can use the following three lines to load the controller's implementation.
			//jQuery.sap.require({modName: sControllerName, type: "controller"});
			//var controllerImpl = jQuery.sap.getObject(sControllerName);
			//sap.ui.controller(sControllerName, controllerImpl); //no extension

			var oBaseController = sap.ui.controller(sControllerName);
			var fclHandler = new FCLayoutHandler(oBaseController);
			var eventHandler = new EventHandler(oBaseController);
			var formatHandler = new FormatHandler(oBaseController);

			oBaseController._fclHandler = {};
			oBaseController._eventHandler = {};
			oBaseController._formatHandler = {};
			jQuery.extend(oBaseController._fclHandler, fclHandler);
			jQuery.extend(oBaseController._eventHandler, eventHandler);
			jQuery.extend(oBaseController._formatHandler, formatHandler);

			oBaseController.getEventHandler = function() {
				return oBaseController._eventHandler;
			};

			return oBaseController;
		};

		BaseComponentHandler.createParameterModel = function(oComponent, sEntityType, oMetaModel, sEntitySet) {
			var oSettings = {
				pages: [],
				settings: []
			};
			//sap.fin.travel.lib.reuse
			AnnotationHelper.listAppPages(AppComponent.get().getConfig(), oSettings);
			return new sap.ui.model.json.JSONModel({
				entitySet: sEntitySet,
				entityType: sEntityType,
				appManifest: oComponent.oAppManifest.hasOwnProperty("sap.ui.generic.app") ? oComponent.oAppManifest : oComponent.oAppDescriptor,
				manifest: oComponent.getManifest(),
				extensionFacets: AppDescriptorUtil.prepareAfterFacet(oComponent.getManifest()),
				pages: oSettings.pages,
				settings: oSettings.settings,
				metaModel: oMetaModel,
				appComponentName: oComponent.getMetadata().getComponentName(),
				configuration: ConfigurationUtil.checkVersion(),
				helper: {
					bool: {
						"true": true,
						"false": false
					}
				},
				stableId: {
					definition: StableIdDefinition,
					aParameter: [],
					getStableId: StableIdHelper.getStableId
				},
				//valid only for ObjectPages. It's null in case of ListPage
				//breadCrumb: getBreadCrumbInfo(oComponent.aBreadCrumb),
				defaultButtons: TravelUtil.DefaultButtons
			});
		};

		return BaseComponentHandler;

	}, true);
}; // end of sap/fin/travel/lib/reuse/util/BaseComponentHandler.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.DetailPage.Component')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.DetailPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/DetailPage/Component", [
		"sap/ui/core/UIComponent",
		"sap/fin/travel/lib/reuse/util/BaseComponentHandler",
		"sap/fin/travel/lib/reuse/util/i18n"

	], function(UIComponent, BaseComponentHandler, I18n) {
		"use strict";

		return UIComponent.extend("sap.fin.travel.lib.reuse.DetailPage.Component", {

			metadata: {
				manifest: "json", //Attention, fake usage for the build!!
				config: {
					fullWidth: true
				}
			},

			init: function() {
				//Calling private method activate for component instance to make sure that extension points are
				//loaded from URL-defined manifest
				try {
					//Customizing configuration no longer available above ui5 1.97.
					//If we are using [] within require, we do not control/understand the callback fn that were not called sometimes
					//If we are using solely the no array version, the CustomizingConfiguration was never loaded
					//This will dump in ui5 gt than 1.97, and we provide defensive code if for some reason the module is not loaded
					sap.ui.require(["sap/ui/core/CustomizingConfiguration"]);
					var CustomizingConfiguration = sap.ui.require("sap/ui/core/CustomizingConfiguration");
					if (undefined !== CustomizingConfiguration) {
						CustomizingConfiguration.activateForComponentInstance(this);
					}
				} catch (e) {
					jQuery.sap.log.warning("Customizing Configuration no longer available above ui5 1.97");
				}
				//this.getMetadata()._oManifest.init();
				// Set data model
				this.setModel(this.getComponentData().oModel);
				this.oRouter = this.getComponentData().oRouter;
				this.oAppManifest = this.getComponentData().oAppManifest;
				this.sEntitySet = this.getComponentData().sEntitySet;
				//XXX breadcrumbs should remain in the model!! component can be used at different levels
				this.aBreadCrumb = this.getComponentData().aBreadCrumb;
				this.oExtension = this.getComponentData().extension;

				//i18n default should be provided through the manifest (../i18n/i18n.properties)
				var oAppResourceBundle = this.getComponentData().oAppResourceBundle;
				var o18model = this.getModel("i18n");
				if (oAppResourceBundle) {
					oAppResourceBundle.aPropertyFiles[0].getKeys().forEach(function(key) {
						o18model.getResourceBundle().aPropertyFiles[0].setProperty(key, oAppResourceBundle.getText(key));
					});
				}

				// Call the init function of the parent
				UIComponent.prototype.init.apply(this, arguments);
			},

			// Called every time a detail view is opened.
			createContent: function() {
				var that = this;
				var sStableId = this.createId(this.sEntitySet);

				var oSettings = {
					extension: this.oExtension,
					entitySet: this.sEntitySet,
					controller: {
						name: "sap.fin.travel.lib.reuse.DetailPage.controller.DetailPage"
					},
					view: {
						id: sStableId,
						name: "sap.fin.travel.lib.reuse.DetailPage.view.DetailPage",
						level: 0
					}
				};

				// The view container is returned to the caller and will be cached. It contains our created view.
				this.oViewContainer = new sap.m.Page(this.createId("detailPage"), {
					showHeader: false
				});

				this.promiseComponentCreated = new Promise(function(resolve, reject) {
					that.getModel().getMetaModel().loaded().then(function() {
						BaseComponentHandler.createComponentContent(that, oSettings);
						resolve(that);
					});
				}).catch(function(error) {
					$.sap.log.error("Could not create component content : " + error);
				});
				return this.oViewContainer;
			},

			exit: function() {
				if (this.oViewContainer) {
					this.oViewContainer.destroy();
					delete this.oViewContainer;
				}
			}

		});
	});

}; // end of sap/fin/travel/lib/reuse/DetailPage/Component.js
if (!jQuery.sap.isDeclared('sap.fin.travel.lib.reuse.ListPage.Component')) {
	/*
	 * Copyright (C) 2009-2022 SAP SE or an SAP affiliate company. All rights reserved.
	 */
	jQuery.sap.declare('sap.fin.travel.lib.reuse.ListPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
	jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
	jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained
	sap.ui.define("sap/fin/travel/lib/reuse/ListPage/Component", [
		"sap/ui/core/UIComponent",
		"sap/fin/travel/lib/reuse/util/BaseComponentHandler",
		"sap/fin/travel/lib/reuse/util/PersistenceHelper",
		"sap/fin/travel/lib/reuse/util/ODataModelUtil",
		"sap/ui/thirdparty/datajs"
	], function(UIComponent, BaseComponentHandler, PersistenceHelper, ODataModelUtil, OData) {
		"use strict";

		return UIComponent.extend("sap.fin.travel.lib.reuse.ListPage.Component", {

			metadata: {
				manifest: "json", //Attention, fake usage for the build!!
				config: {
					fullWidth: true
				}
			},

			init: function() {
				//preparing application unload
				var oModel = this.getComponentData().oModel;
				var that = this;

				//SignOut does prevent any call trough regular ODataModel/datajs. To perform our proper clean-up, we do manually call the ExitApplication function import
				if (sap.ushell && sap.ushell.Container) {
					var fnLogout = function(oEvent) {

						if (!that.bExitCalled) {
							var sSelectedPernr = ODataModelUtil.get().getCurrentTripContext().Pernr;

							var sServiceUrl = oModel.sServiceUrl;
							var mHeaders = oModel.getHeaders(); //retrieve x-csrf-token
							var sCsrfToken = mHeaders["x-csrf-token"];
							var sMethod = "POST";
							var urlParameters = ["Pernr='" + sSelectedPernr + "'", "NewPernr=''"];
							var aAllUrlParameters = [];
							aAllUrlParameters = aAllUrlParameters.concat(oModel["aUrl" + "Params"]); //aUrlParams is a private member, but there is no alternative at the moment
							aAllUrlParameters = aAllUrlParameters.concat(urlParameters);
							var sUrl = sServiceUrl + "/ExitApplication?" + aAllUrlParameters.join("&");

							var sOrigin = "";
							if (window.location["orig" + "in"]) {
								sOrigin = window.location["orig" + "in"];
							} else {
								sOrigin = window.location.protocol + "//" + window.location.host;
							}

							var sDestinationUrl = sOrigin + sUrl;
							$.ajax({
								url: sDestinationUrl,
								type: 'post',
								headers: {
									"X-CSRF-Token": sCsrfToken
								}
							});
							that.bExitCalled = true;
						}

						sap.ushell.Container.detachLogoutEvent(fnLogout);

						oEvent.preventDefault(); // causes delay of logout by 1 sec
					};

					sap.ushell.Container.attachLogoutEvent(fnLogout);
				}

				$(window).bind("beforeunload", function() {

					if (!that.bExitCalled) {
						var sSelectedPernr = ODataModelUtil.get().getCurrentTripContext().Pernr;

						//invoke ExitApplication function import through datajs to have a synchronous call
						var sServiceUrl = oModel.sServiceUrl;
						var mHeaders = oModel.getHeaders(); //retrieve x-csrf-token
						var sMethod = "POST";
						var urlParameters = ["Pernr='" + sSelectedPernr + "'", "NewPernr=''"];
						var aAllUrlParameters = [];
						aAllUrlParameters = aAllUrlParameters.concat(oModel["aUrl" + "Params"]); //aUrlParams is a private member, but there is no alternative at the moment
						aAllUrlParameters = aAllUrlParameters.concat(urlParameters);
						var sUrl = sServiceUrl + "/ExitApplication?" + aAllUrlParameters.join("&");

						//In case of chrome browser
						var isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);
						var bAsync = isChrome;

						//no callback needed as we are completely exiting the application after the complete unload
						OData.request({
							headers: {
								"X-CSRF-Token": mHeaders["x-csrf-token"]
							},
							async: bAsync, //works only under SAP data-js framework
							method: "POST",
							requestUri: sUrl,
							data: undefined
						}, function() {
							//success

						}, function() {
							//error
						});
						that.bExitCalled = true;
					}
				});

				//Calling private method activate for component instance to make sure that extension points are
				//loaded from URL-defined manifest
				try {
					//Customizing configuration no longer available above ui5 1.97.
					//If we are using [] within require, we do not control/understand the callback fn that were not called sometimes
					//If we are using solely the no array version, the CustomizingConfiguration was never loaded
					//This will dump in ui5 gt than 1.97, and we provide defensive code if for some reason the module is not loaded
					sap.ui.require(["sap/ui/core/CustomizingConfiguration"]);
					var CustomizingConfiguration = sap.ui.require("sap/ui/core/CustomizingConfiguration");
					if (undefined !== CustomizingConfiguration) {
						CustomizingConfiguration.activateForComponentInstance(this);
					}
				} catch (e) {
					jQuery.sap.log.warning("Customizing Configuration no longer available above ui5 1.97");
				}

				this.setModel(oModel);
				this.oRouter = this.getComponentData().oRouter;
				this.oAppManifest = this.getComponentData().oAppManifest;
				this.sEntitySet = this.getComponentData().sEntitySet;
				//this.iLevel = this.getComponentData().iLevel;
				this.oExtension = this.getComponentData().extension;

				//i18n default should be provided through the manifest (../i18n/i18n.properties)
				var oAppResourceBundle = this.getComponentData().oAppResourceBundle;
				var o18model = this.getModel("i18n");
				if (oAppResourceBundle) {
					oAppResourceBundle.aPropertyFiles[0].getKeys().forEach(function(key) {
						o18model.getResourceBundle().aPropertyFiles[0].setProperty(key, oAppResourceBundle.getText(key));
					});
				}

				// Call the init function of the parent
				UIComponent.prototype.init.apply(this, arguments);
			},

			destroy: function() {
				BaseComponentHandler.destroy(); //properly clean handler (for cache mechanism across apps)
				UIComponent.prototype.destroy.apply(this, arguments);
			},

			exit: function() {
				if (this.oViewContainer) {
					this.oViewContainer.destroy();
					delete this.oViewContainer;
				}
			},

			createContent: function() {
				var that = this;
				var oSettings = {
					entitySet: this.sEntitySet,
					extension: this.oExtension,
					controller: {
						name: "sap.fin.travel.lib.reuse.ListPage.controller.ListPage"
					},
					view: {
						id: "listPageView",
						name: "sap.fin.travel.lib.reuse.ListPage.view.ListPage",
						level: 0
					}
				};

				// The view container is returned to the caller and will be cached. It contains our created view.
				this.oViewContainer = new sap.m.Page(this.createId("rootPage"), {
					showHeader: false
				});

				this.getModel().getMetaModel().loaded().then(function() {
					BaseComponentHandler.createComponentContent(that, oSettings);
				}).catch(function(error) {
					$.sap.log.error("Could not create component content : " + error);
				});

				return this.oViewContainer;
			},

			getRouter: function() {
				return this.oRouter;
			},

			/**
			 * This methods exposes the ExitApplication function import call. Only the ListPage knows which user is being selected,
			 * therefore component proposes to call itself the exit application.
			 * This main usage is on application exit, with the possibility to call callback functions
			 *
			 * @param {map} parameters: {
			 *    fnSuccess: callback function in case of ExitApplication function import success,
			 *    fnError: callback function in case of ExitApplication function import error,
			 *    bDestroy: indicator that we are leaving the application. We can use a raw request to ensure that request is sent. Callbacks would not be called
			 *
			 */
			exitApplication: function(mParameters) {
				mParameters = mParameters || {};

				//We are trying to exit the application. A super application unload might already have triggered the ExitApplication call.
				//In this case, we directly call the call back function.
				if (this.bExitCalled === true) {
					if ("function" === typeof mParameters.fnSuccess) {
						mParameters.fnSuccess();
					}
					return;
				}

				var sSelectedPernr = ODataModelUtil.get().getCurrentTripContext().Pernr;
				var oModel = this.getModel();

				//do not provide a new pernr when leaving the app, otherwise backend get the profile back and lock again the app
				var sNewPernr = sSelectedPernr;
				if (mParameters && mParameters.bDestroy === true) {
					sNewPernr = "";
				}

				//Exit Application - Unlock Employee Number
				PersistenceHelper.callFunction(oModel, {
					name: "/ExitApplication",
					success: mParameters.fnSuccess,
					error: mParameters.fnError,
					urlParameters: {
						Pernr: sSelectedPernr,
						NewPernr: sNewPernr
					}
				});
			}

		});
	});

}; // end of sap/fin/travel/lib/reuse/ListPage/Component.js